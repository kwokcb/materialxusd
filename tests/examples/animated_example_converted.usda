#usda 1.0
(
    defaultPrim = "World"
    doc = "Animation on referenced MaterialX"
    endTimeCode = 24
    metersPerUnit = 1
    startTimeCode = 1
    upAxis = "Y"
)

def Xform "World"
{
    def "MaterialX"
    {
        def "Materials"
        {
            def Material "ExampleMaterial" (
                apiSchemas = ["MaterialXConfigAPI"]
            )
            {
                string config:mtlx:version = "1.39"
                float inputs:base = 0.5
                color3f inputs:base_color = (0.1037792, 0.5921203, 0.85064936)
                color3f inputs:base_color.timeSamples = {
                    1: (1, 0, 0),
                    12: (0, 1, 0),
                    24: (0, 0, 1),
                }
                float inputs:coat = 1
                float inputs:coat_affect_color
                float inputs:coat_affect_roughness
                float inputs:coat_anisotropy
                color3f inputs:coat_color
                float inputs:coat_IOR
                float3 inputs:coat_normal
                float inputs:coat_rotation
                float inputs:coat_roughness = 0
                float inputs:diffuse_roughness.timeSamples = {
                    1: 0.5,
                    12: 0.2,
                    24: 0.8,
                }
                float inputs:emission
                color3f inputs:emission_color
                float inputs:metalness
                float3 inputs:normal
                color3f inputs:opacity
                float inputs:sheen
                color3f inputs:sheen_color
                float inputs:sheen_roughness
                float inputs:specular = 1
                float inputs:specular_anisotropy = 0.5
                color3f inputs:specular_color = (1, 1, 1)
                float inputs:specular_IOR
                float inputs:specular_rotation
                float inputs:specular_roughness = 0.4
                float inputs:subsurface
                float inputs:subsurface_anisotropy
                color3f inputs:subsurface_color
                color3f inputs:subsurface_radius
                float inputs:subsurface_scale
                float3 inputs:tangent
                float inputs:thin_film_IOR
                float inputs:thin_film_thickness
                bool inputs:thin_walled
                float inputs:transmission
                color3f inputs:transmission_color
                float inputs:transmission_depth
                float inputs:transmission_dispersion
                float inputs:transmission_extra_roughness
                color3f inputs:transmission_scatter
                float inputs:transmission_scatter_anisotropy
                token outputs:mtlx:surface.connect = </World/MaterialX/Materials/ExampleMaterial/ExampleShader.outputs:surface>

                def Shader "ExampleShader"
                {
                    uniform token info:id = "ND_standard_surface_surfaceshader"
                    float inputs:base.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:base>
                    color3f inputs:base_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:base_color>
                    float inputs:coat.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat>
                    float inputs:coat_affect_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_affect_color>
                    float inputs:coat_affect_roughness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_affect_roughness>
                    float inputs:coat_anisotropy.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_anisotropy>
                    color3f inputs:coat_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_color>
                    float inputs:coat_IOR.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_IOR>
                    float3 inputs:coat_normal.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_normal>
                    float inputs:coat_rotation.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_rotation>
                    float inputs:coat_roughness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:coat_roughness>
                    float inputs:diffuse_roughness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:diffuse_roughness>
                    float inputs:emission.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:emission>
                    color3f inputs:emission_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:emission_color>
                    float inputs:metalness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:metalness>
                    float3 inputs:normal.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:normal>
                    color3f inputs:opacity.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:opacity>
                    float inputs:sheen.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:sheen>
                    color3f inputs:sheen_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:sheen_color>
                    float inputs:sheen_roughness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:sheen_roughness>
                    float inputs:specular.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:specular>
                    float inputs:specular_anisotropy.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:specular_anisotropy>
                    color3f inputs:specular_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:specular_color>
                    float inputs:specular_IOR.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:specular_IOR>
                    float inputs:specular_rotation.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:specular_rotation>
                    float inputs:specular_roughness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:specular_roughness>
                    float inputs:subsurface.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:subsurface>
                    float inputs:subsurface_anisotropy.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:subsurface_anisotropy>
                    color3f inputs:subsurface_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:subsurface_color>
                    color3f inputs:subsurface_radius.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:subsurface_radius>
                    float inputs:subsurface_scale.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:subsurface_scale>
                    float3 inputs:tangent.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:tangent>
                    float inputs:thin_film_IOR.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:thin_film_IOR>
                    float inputs:thin_film_thickness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:thin_film_thickness>
                    bool inputs:thin_walled.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:thin_walled>
                    float inputs:transmission.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:transmission>
                    color3f inputs:transmission_color.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:transmission_color>
                    float inputs:transmission_depth.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:transmission_depth>
                    float inputs:transmission_dispersion.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:transmission_dispersion>
                    float inputs:transmission_extra_roughness.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:transmission_extra_roughness>
                    color3f inputs:transmission_scatter.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:transmission_scatter>
                    float inputs:transmission_scatter_anisotropy.connect = </World/MaterialX/Materials/ExampleMaterial.inputs:transmission_scatter_anisotropy>
                    token outputs:surface
                }
            }
        }

        def "Shaders"
        {
            def Shader "ExampleShader"
            {
                uniform token info:id = "ND_standard_surface_surfaceshader"
                token outputs:surface
            }
        }
    }

    def Sphere "Sphere" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/MaterialX/Materials/ExampleMaterial>
    }
}


