#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./examples/nodegraph_surfaceshader_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\shaderball.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def NodeGraph "lighting1"
        {
            token outputs:out2.connect = </MaterialX/Materials/lighting1/diffusebsdf1.outputs:out>

            def Shader "diffusebsdf1" (
                prepend apiSchemas = ["MaterialXConfigAPI"]
            )
            {
                string config:mtlx:version = "1.39"
                uniform token info:id = "ND_oren_nayar_diffuse_bsdf"
                color3f inputs:color = (0.3, 0.3, 1)
                float3 inputs:normal.connect = </MaterialX/Materials/lighting1/Nworld.outputs:out>
                float inputs:roughness = 0.8
                token outputs:out
            }

            def Shader "Nworld" (
                prepend apiSchemas = ["MaterialXConfigAPI"]
            )
            {
                string config:mtlx:version = "1.39"
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def Shader "surface1" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            uniform token info:id = "ND_surface"
            token inputs:bsdf.connect = </MaterialX/Materials/lighting1.outputs:out2>
            token inputs:edf
            float inputs:opacity = 1
            token outputs:out
        }

        def Material "lighting1_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            token outputs:mtlx:surface.connect = </MaterialX/Materials/surface1.outputs:out>
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\shaderball.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/lighting1_out>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera.usda@
    )
    {
    }
}

