#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: examples/standard_surface_carpaint.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\shaderball.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Shader "SR_carpaint"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            float inputs:base = 0.5
            color3f inputs:base_color = (0.1037792, 0.5921203, 0.85064936)
            float inputs:coat = 1
            float inputs:coat_roughness = 0
            float inputs:specular = 1
            float inputs:specular_anisotropy = 0.5
            color3f inputs:specular_color = (1, 1, 1)
            float inputs:specular_roughness = 0.4
            token outputs:out
        }

        def Material "Car_Paint" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            token outputs:mtlx:surface.connect = </MaterialX/Materials/SR_carpaint.outputs:out>
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\shaderball.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/Car_Paint>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera.usda@
    )
    {
    }
}

