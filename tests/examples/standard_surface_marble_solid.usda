#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: examples/standard_surface_marble_solid.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\shaderball.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def NodeGraph "NG_marble1"
        {
            color3f inputs:base_color_1 = (0.8, 0.8, 0.8)
            color3f inputs:base_color_2 = (0.1, 0.1, 0.3)
            int inputs:noise_octaves = 3
            float inputs:noise_power = 3
            float inputs:noise_scale_1 = 6
            float inputs:noise_scale_2 = 4
            color3f outputs:out.connect = </MaterialX/Materials/NG_marble1/color_mix.outputs:out>

            def Shader "obj_pos"
            {
                uniform token info:id = "ND_position_vector3"
                vector3f outputs:out
            }

            def Shader "add_xyz"
            {
                uniform token info:id = "ND_dotproduct_vector3"
                vector3f inputs:in1.connect = </MaterialX/Materials/NG_marble1/obj_pos.outputs:out>
                vector3f inputs:in2 = (1, 1, 1)
                float outputs:out
            }

            def Shader "scale_xyz"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/Materials/NG_marble1/add_xyz.outputs:out>
                float inputs:in2.connect = </MaterialX/Materials/NG_marble1.inputs:noise_scale_1>
                float outputs:out
            }

            def Shader "scale_pos"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                vector3f inputs:in1.connect = </MaterialX/Materials/NG_marble1/obj_pos.outputs:out>
                float inputs:in2.connect = </MaterialX/Materials/NG_marble1.inputs:noise_scale_2>
                vector3f outputs:out
            }

            def Shader "noise"
            {
                uniform token info:id = "ND_fractal3d_float"
                int inputs:octaves.connect = </MaterialX/Materials/NG_marble1.inputs:noise_octaves>
                vector3f inputs:position.connect = </MaterialX/Materials/NG_marble1/scale_pos.outputs:out>
                float outputs:out
            }

            def Shader "scale_noise"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/Materials/NG_marble1/noise.outputs:out>
                float inputs:in2 = 3
                float outputs:out
            }

            def Shader "sum"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </MaterialX/Materials/NG_marble1/scale_xyz.outputs:out>
                float inputs:in2.connect = </MaterialX/Materials/NG_marble1/scale_noise.outputs:out>
                float outputs:out
            }

            def Shader "sin"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </MaterialX/Materials/NG_marble1/sum.outputs:out>
                float outputs:out
            }

            def Shader "scale"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/Materials/NG_marble1/sin.outputs:out>
                float inputs:in2 = 0.5
                float outputs:out
            }

            def Shader "bias"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </MaterialX/Materials/NG_marble1/scale.outputs:out>
                float inputs:in2 = 0.5
                float outputs:out
            }

            def Shader "power"
            {
                uniform token info:id = "ND_power_float"
                float inputs:in1.connect = </MaterialX/Materials/NG_marble1/bias.outputs:out>
                float inputs:in2.connect = </MaterialX/Materials/NG_marble1.inputs:noise_power>
                float outputs:out
            }

            def Shader "color_mix"
            {
                uniform token info:id = "ND_mix_color3"
                color3f inputs:bg.connect = </MaterialX/Materials/NG_marble1.inputs:base_color_1>
                color3f inputs:fg.connect = </MaterialX/Materials/NG_marble1.inputs:base_color_2>
                float inputs:mix.connect = </MaterialX/Materials/NG_marble1/power.outputs:out>
                color3f outputs:out
            }
        }

        def Shader "SR_marble1"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            float inputs:base = 1
            color3f inputs:base_color.connect = </MaterialX/Materials/NG_marble1.outputs:out>
            float inputs:specular_roughness = 0.1
            float inputs:subsurface = 0.4
            color3f inputs:subsurface_color.connect = </MaterialX/Materials/NG_marble1.outputs:out>
            token outputs:out
        }

        def Material "Marble_3D" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            token outputs:mtlx:surface.connect = </MaterialX/Materials/SR_marble1.outputs:out>
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\shaderball.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/Marble_3D>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera.usda@
    )
    {
    }
}

