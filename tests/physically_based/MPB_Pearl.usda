#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: ./physically_based\\stdsurf_materials_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\shaderball.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "MPB_Aluminum" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.912, 0.914, 0.92)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.97, 0.979, 0.988)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Aluminum/SPB_Aluminum.outputs:surface>

            def Shader "SPB_Aluminum" (
                prepend references = </MaterialX/Shaders/SPB_Aluminum>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Aluminum.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Aluminum.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Aluminum.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Aluminum.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Aluminum.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Aluminum.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Aluminum.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Aluminum.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Aluminum.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Aluminum.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Aluminum.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Aluminum.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Aluminum.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Aluminum.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Aluminum.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Aluminum.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Aluminum.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Aluminum.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Aluminum.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Aluminum.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Aluminum.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Aluminum.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Aluminum.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Banana" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.634, 0.532, 0.111)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Banana/SPB_Banana.outputs:surface>

            def Shader "SPB_Banana" (
                prepend references = </MaterialX/Shaders/SPB_Banana>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Banana.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Banana.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Banana.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Banana.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Banana.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Banana.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Banana.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Banana.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Banana.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Banana.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Banana.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Banana.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Banana.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Banana.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Banana.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Banana.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Banana.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Banana.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Banana.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Banana.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Banana.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Banana.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Banana.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Banana.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Banana.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Banana.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Banana.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Banana.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Banana.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Banana.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Banana.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Banana.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Banana.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Banana.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Banana.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Blackboard" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.039, 0.039, 0.039)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Blackboard/SPB_Blackboard.outputs:surface>

            def Shader "SPB_Blackboard" (
                prepend references = </MaterialX/Shaders/SPB_Blackboard>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Blackboard.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Blackboard.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Blackboard.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Blackboard.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Blackboard.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Blackboard.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Blackboard.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Blackboard.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Blackboard.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Blackboard.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Blackboard.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Blackboard.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Blackboard.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Blackboard.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Blackboard.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Blackboard.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Blackboard.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Blackboard.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Blackboard.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Blackboard.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Blackboard.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Blackboard.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Blackboard.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Blood" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.64448, 0.003, 0.005)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.301
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (0.64448, 0.003, 0.005)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Blood/SPB_Blood.outputs:surface>

            def Shader "SPB_Blood" (
                prepend references = </MaterialX/Shaders/SPB_Blood>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Blood.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Blood.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Blood.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Blood.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Blood.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Blood.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Blood.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Blood.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Blood.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Blood.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Blood.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Blood.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Blood.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Blood.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Blood.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Blood.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Blood.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Blood.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Blood.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Blood.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Blood.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Blood.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Blood.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Blood.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Blood.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Blood.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Blood.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Blood.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Blood.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Blood.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Blood.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Blood.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Blood.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Blood.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Blood.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Bone" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.793, 0.793, 0.664)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Bone/SPB_Bone.outputs:surface>

            def Shader "SPB_Bone" (
                prepend references = </MaterialX/Shaders/SPB_Bone>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Bone.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Bone.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Bone.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Bone.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Bone.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Bone.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Bone.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Bone.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Bone.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Bone.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Bone.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Bone.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Bone.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Bone.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Bone.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Bone.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Bone.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Bone.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Bone.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Bone.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Bone.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Bone.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Bone.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Bone.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Bone.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Bone.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Bone.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Bone.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Bone.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Bone.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Bone.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Bone.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Bone.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Bone.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Bone.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Brass" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.887, 0.789, 0.434)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.988, 0.976, 0.843)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Brass/SPB_Brass.outputs:surface>

            def Shader "SPB_Brass" (
                prepend references = </MaterialX/Shaders/SPB_Brass>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Brass.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Brass.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Brass.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Brass.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Brass.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Brass.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Brass.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Brass.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Brass.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Brass.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Brass.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Brass.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Brass.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Brass.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Brass.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Brass.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Brass.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Brass.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Brass.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Brass.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Brass.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Brass.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Brass.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Brass.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Brass.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Brass.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Brass.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Brass.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Brass.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Brass.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Brass.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Brass.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Brass.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Brass.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Brass.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Brick" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.262, 0.095, 0.061)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Brick/SPB_Brick.outputs:surface>

            def Shader "SPB_Brick" (
                prepend references = </MaterialX/Shaders/SPB_Brick>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Brick.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Brick.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Brick.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Brick.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Brick.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Brick.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Brick.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Brick.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Brick.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Brick.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Brick.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Brick.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Brick.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Brick.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Brick.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Brick.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Brick.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Brick.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Brick.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Brick.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Brick.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Brick.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Brick.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Brick.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Brick.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Brick.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Brick.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Brick.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Brick.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Brick.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Brick.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Brick.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Brick.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Brick.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Brick.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Car_Paint" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.1, 0.1, 0.1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Car_Paint/SPB_Car_Paint.outputs:surface>

            def Shader "SPB_Car_Paint" (
                prepend references = </MaterialX/Shaders/SPB_Car_Paint>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Car_Paint.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Carrot" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.713, 0.17, 0.026)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Carrot/SPB_Carrot.outputs:surface>

            def Shader "SPB_Carrot" (
                prepend references = </MaterialX/Shaders/SPB_Carrot>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Carrot.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Carrot.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Carrot.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Carrot.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Carrot.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Carrot.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Carrot.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Carrot.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Carrot.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Carrot.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Carrot.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Carrot.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Carrot.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Carrot.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Carrot.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Carrot.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Carrot.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Carrot.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Carrot.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Carrot.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Carrot.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Carrot.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Carrot.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Carrot.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Carrot.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Carrot.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Carrot.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Carrot.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Carrot.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Charcoal" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.02, 0.02, 0.02)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Charcoal/SPB_Charcoal.outputs:surface>

            def Shader "SPB_Charcoal" (
                prepend references = </MaterialX/Shaders/SPB_Charcoal>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Charcoal.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Charcoal.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Charcoal.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Charcoal.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Charcoal.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Charcoal.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Charcoal.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Charcoal.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Charcoal.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Charcoal.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Charcoal.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Charcoal.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Charcoal.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Charcoal.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Charcoal.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Charcoal.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Charcoal.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Charcoal.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Charcoal.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Charcoal.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Charcoal.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Charcoal.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Charcoal.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Chocolate" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.162, 0.091, 0.06)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Chocolate/SPB_Chocolate.outputs:surface>

            def Shader "SPB_Chocolate" (
                prepend references = </MaterialX/Shaders/SPB_Chocolate>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Chocolate.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Chocolate.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Chocolate.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Chocolate.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Chocolate.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Chocolate.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Chocolate.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Chocolate.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Chocolate.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Chocolate.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Chocolate.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Chocolate.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Chocolate.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Chocolate.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Chocolate.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Chocolate.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Chocolate.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Chocolate.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Chocolate.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Chocolate.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Chocolate.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Chocolate.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Chocolate.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Chromium" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.638, 0.651, 0.663)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.632, 0.718, 0.809)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Chromium/SPB_Chromium.outputs:surface>

            def Shader "SPB_Chromium" (
                prepend references = </MaterialX/Shaders/SPB_Chromium>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Chromium.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Chromium.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Chromium.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Chromium.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Chromium.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Chromium.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Chromium.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Chromium.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Chromium.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Chromium.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Chromium.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Chromium.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Chromium.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Chromium.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Chromium.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Chromium.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Chromium.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Chromium.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Chromium.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Chromium.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Chromium.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Chromium.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Chromium.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Chromium.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Chromium.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Chromium.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Chromium.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Chromium.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Chromium.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Cobalt" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.692, 0.703, 0.673)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.684, 0.771, 0.817)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Cobalt/SPB_Cobalt.outputs:surface>

            def Shader "SPB_Cobalt" (
                prepend references = </MaterialX/Shaders/SPB_Cobalt>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Cobalt.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Cobalt.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Cobalt.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Cobalt.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Cobalt.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Cobalt.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Cobalt.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Cobalt.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Cobalt.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Cobalt.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Cobalt.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Cobalt.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Cobalt.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Cobalt.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Cobalt.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Cobalt.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Cobalt.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Cobalt.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Cobalt.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Cobalt.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Cobalt.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Cobalt.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Cobalt.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Coffee" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.027, 0.019, 0.018)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.33
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Coffee/SPB_Coffee.outputs:surface>

            def Shader "SPB_Coffee" (
                prepend references = </MaterialX/Shaders/SPB_Coffee>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Coffee.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Coffee.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Coffee.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Coffee.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Coffee.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Coffee.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Coffee.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Coffee.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Coffee.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Coffee.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Coffee.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Coffee.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Coffee.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Coffee.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Coffee.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Coffee.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Coffee.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Coffee.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Coffee.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Coffee.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Coffee.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Coffee.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Coffee.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Coffee.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Coffee.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Coffee.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Coffee.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Coffee.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Coffee.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Concrete" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.51, 0.51, 0.51)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Concrete/SPB_Concrete.outputs:surface>

            def Shader "SPB_Concrete" (
                prepend references = </MaterialX/Shaders/SPB_Concrete>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Concrete.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Concrete.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Concrete.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Concrete.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Concrete.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Concrete.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Concrete.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Concrete.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Concrete.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Concrete.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Concrete.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Concrete.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Concrete.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Concrete.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Concrete.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Concrete.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Concrete.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Concrete.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Concrete.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Concrete.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Concrete.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Concrete.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Concrete.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Concrete.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Concrete.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Concrete.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Concrete.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Concrete.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Concrete.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Cooking_Oil" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.737911, 0.687, 0.091)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.47
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (0.737911, 0.687, 0.091)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Cooking_Oil/SPB_Cooking_Oil.outputs:surface>

            def Shader "SPB_Cooking_Oil" (
                prepend references = </MaterialX/Shaders/SPB_Cooking_Oil>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Cooking_Oil.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Copper" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.926, 0.721, 0.504)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.996, 0.957, 0.823)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Copper/SPB_Copper.outputs:surface>

            def Shader "SPB_Copper" (
                prepend references = </MaterialX/Shaders/SPB_Copper>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Copper.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Copper.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Copper.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Copper.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Copper.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Copper.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Copper.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Copper.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Copper.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Copper.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Copper.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Copper.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Copper.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Copper.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Copper.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Copper.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Copper.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Copper.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Copper.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Copper.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Copper.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Copper.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Copper.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Copper.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Copper.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Copper.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Copper.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Copper.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Copper.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Copper.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Copper.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Copper.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Copper.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Copper.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Copper.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Diamond" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 2.4168
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion = 55.3
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Diamond/SPB_Diamond.outputs:surface>

            def Shader "SPB_Diamond" (
                prepend references = </MaterialX/Shaders/SPB_Diamond>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Diamond.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Diamond.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Diamond.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Diamond.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Diamond.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Diamond.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Diamond.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Diamond.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Diamond.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Diamond.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Diamond.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Diamond.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Diamond.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Diamond.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Diamond.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Diamond.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Diamond.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Diamond.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Diamond.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Diamond.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Diamond.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Diamond.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Diamond.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Diamond.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Diamond.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Diamond.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Diamond.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Diamond.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Diamond.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Egg_Shell" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.61, 0.624, 0.631)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Egg_Shell/SPB_Egg_Shell.outputs:surface>

            def Shader "SPB_Egg_Shell" (
                prepend references = </MaterialX/Shaders/SPB_Egg_Shell>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Egg_Shell.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Eye__cornea_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.376
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Eye__cornea_/SPB_Eye__cornea_.outputs:surface>

            def Shader "SPB_Eye__cornea_" (
                prepend references = </MaterialX/Shaders/SPB_Eye__cornea_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Eye__cornea_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Eye__lens_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.386
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Eye__lens_/SPB_Eye__lens_.outputs:surface>

            def Shader "SPB_Eye__lens_" (
                prepend references = </MaterialX/Shaders/SPB_Eye__lens_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Eye__lens_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Eye__sclera_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.68, 0.49, 0.37)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.4
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Eye__sclera_/SPB_Eye__sclera_.outputs:surface>

            def Shader "SPB_Eye__sclera_" (
                prepend references = </MaterialX/Shaders/SPB_Eye__sclera_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Eye__sclera_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Gasoline" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 0.97, 0.617)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.427
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 0.97, 0.617)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Gasoline/SPB_Gasoline.outputs:surface>

            def Shader "SPB_Gasoline" (
                prepend references = </MaterialX/Shaders/SPB_Gasoline>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Gasoline.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Gasoline.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Gasoline.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Gasoline.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Gasoline.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Gasoline.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Gasoline.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Gasoline.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Gasoline.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Gasoline.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Gasoline.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Gasoline.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Gasoline.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Gasoline.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Gasoline.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Gasoline.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Gasoline.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Gasoline.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Gasoline.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Gasoline.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Gasoline.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Gasoline.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Gasoline.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Glass" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.52
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion = 64
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Glass/SPB_Glass.outputs:surface>

            def Shader "SPB_Glass" (
                prepend references = </MaterialX/Shaders/SPB_Glass>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Glass.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Glass.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Glass.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Glass.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Glass.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Glass.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Glass.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Glass.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Glass.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Glass.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Glass.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Glass.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Glass.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Glass.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Glass.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Glass.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Glass.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Glass.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Glass.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Glass.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Glass.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Glass.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Glass.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Glass.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Glass.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Glass.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Glass.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Glass.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Glass.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Glass.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Glass.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Glass.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Glass.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Glass.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Glass.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Gold" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.944, 0.776, 0.373)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.998, 0.981, 0.751)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Gold/SPB_Gold.outputs:surface>

            def Shader "SPB_Gold" (
                prepend references = </MaterialX/Shaders/SPB_Gold>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Gold.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Gold.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Gold.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Gold.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Gold.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Gold.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Gold.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Gold.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Gold.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Gold.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Gold.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Gold.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Gold.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Gold.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Gold.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Gold.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Gold.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Gold.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Gold.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Gold.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Gold.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Gold.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Gold.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Gold.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Gold.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Gold.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Gold.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Gold.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Gold.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Gold.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Gold.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Gold.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Gold.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Gold.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Gold.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Gray_Card" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.18, 0.18, 0.18)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Gray_Card/SPB_Gray_Card.outputs:surface>

            def Shader "SPB_Gray_Card" (
                prepend references = </MaterialX/Shaders/SPB_Gray_Card>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Gray_Card.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Honey" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.83077, 0.397, 0.038)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.504
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (0.83077, 0.397, 0.038)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Honey/SPB_Honey.outputs:surface>

            def Shader "SPB_Honey" (
                prepend references = </MaterialX/Shaders/SPB_Honey>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Honey.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Honey.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Honey.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Honey.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Honey.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Honey.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Honey.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Honey.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Honey.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Honey.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Honey.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Honey.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Honey.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Honey.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Honey.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Honey.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Honey.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Honey.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Honey.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Honey.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Honey.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Honey.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Honey.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Honey.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Honey.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Honey.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Honey.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Honey.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Honey.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Honey.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Honey.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Honey.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Honey.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Honey.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Honey.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Ice" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.3098
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion = 64.87
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Ice/SPB_Ice.outputs:surface>

            def Shader "SPB_Ice" (
                prepend references = </MaterialX/Shaders/SPB_Ice>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Ice.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Ice.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Ice.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Ice.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Ice.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Ice.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Ice.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Ice.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Ice.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Ice.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Ice.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Ice.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Ice.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Ice.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Ice.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Ice.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Ice.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Ice.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Ice.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Ice.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Ice.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Ice.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Ice.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Ice.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Ice.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Ice.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Ice.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Ice.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Ice.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Ice.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Ice.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Ice.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Ice.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Ice.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Ice.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Iron" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.531, 0.512, 0.496)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.571, 0.54, 0.586)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Iron/SPB_Iron.outputs:surface>

            def Shader "SPB_Iron" (
                prepend references = </MaterialX/Shaders/SPB_Iron>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Iron.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Iron.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Iron.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Iron.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Iron.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Iron.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Iron.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Iron.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Iron.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Iron.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Iron.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Iron.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Iron.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Iron.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Iron.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Iron.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Iron.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Iron.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Iron.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Iron.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Iron.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Iron.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Iron.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Iron.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Iron.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Iron.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Iron.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Iron.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Iron.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Iron.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Iron.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Iron.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Iron.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Iron.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Iron.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Ketchup" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.164, 0.006, 0.002)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.3
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.1
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Ketchup/SPB_Ketchup.outputs:surface>

            def Shader "SPB_Ketchup" (
                prepend references = </MaterialX/Shaders/SPB_Ketchup>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Ketchup.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Ketchup.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Ketchup.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Ketchup.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Ketchup.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Ketchup.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Ketchup.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Ketchup.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Ketchup.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Ketchup.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Ketchup.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Ketchup.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Ketchup.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Ketchup.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Ketchup.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Ketchup.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Ketchup.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Ketchup.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Ketchup.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Ketchup.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Ketchup.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Ketchup.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Ketchup.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Lead" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.632, 0.626, 0.641)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.803, 0.808, 0.862)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Lead/SPB_Lead.outputs:surface>

            def Shader "SPB_Lead" (
                prepend references = </MaterialX/Shaders/SPB_Lead>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Lead.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Lead.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Lead.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Lead.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Lead.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Lead.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Lead.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Lead.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Lead.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Lead.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Lead.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Lead.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Lead.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Lead.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Lead.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Lead.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Lead.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Lead.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Lead.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Lead.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Lead.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Lead.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Lead.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Lead.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Lead.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Lead.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Lead.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Lead.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Lead.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Lead.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Lead.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Lead.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Lead.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Lead.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Lead.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Lemon" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.718, 0.483, 0)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Lemon/SPB_Lemon.outputs:surface>

            def Shader "SPB_Lemon" (
                prepend references = </MaterialX/Shaders/SPB_Lemon>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Lemon.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Lemon.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Lemon.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Lemon.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Lemon.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Lemon.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Lemon.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Lemon.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Lemon.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Lemon.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Lemon.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Lemon.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Lemon.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Lemon.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Lemon.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Lemon.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Lemon.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Lemon.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Lemon.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Lemon.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Lemon.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Lemon.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Lemon.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Lemon.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Lemon.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Lemon.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Lemon.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Lemon.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Lemon.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Marble" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.83, 0.791, 0.753)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Marble/SPB_Marble.outputs:surface>

            def Shader "SPB_Marble" (
                prepend references = </MaterialX/Shaders/SPB_Marble>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Marble.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Marble.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Marble.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Marble.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Marble.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Marble.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Marble.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Marble.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Marble.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Marble.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Marble.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Marble.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Marble.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Marble.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Marble.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Marble.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Marble.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Marble.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Marble.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Marble.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Marble.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Marble.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Marble.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Marble.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Marble.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Marble.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Marble.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Marble.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Marble.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Marble.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Marble.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Marble.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Marble.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Marble.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Marble.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Mercury" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.781, 0.779, 0.779)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.879, 0.91, 0.941)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Mercury/SPB_Mercury.outputs:surface>

            def Shader "SPB_Mercury" (
                prepend references = </MaterialX/Shaders/SPB_Mercury>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Mercury.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Mercury.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Mercury.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Mercury.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Mercury.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Mercury.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Mercury.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Mercury.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Mercury.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Mercury.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Mercury.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Mercury.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Mercury.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Mercury.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Mercury.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Mercury.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Mercury.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Mercury.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Mercury.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Mercury.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Mercury.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Mercury.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Mercury.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Mercury.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Mercury.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Mercury.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Mercury.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Mercury.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Mercury.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Milk" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.815, 0.813, 0.682)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.348
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Milk/SPB_Milk.outputs:surface>

            def Shader "SPB_Milk" (
                prepend references = </MaterialX/Shaders/SPB_Milk>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Milk.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Milk.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Milk.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Milk.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Milk.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Milk.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Milk.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Milk.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Milk.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Milk.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Milk.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Milk.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Milk.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Milk.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Milk.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Milk.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Milk.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Milk.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Milk.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Milk.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Milk.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Milk.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Milk.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Milk.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Milk.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Milk.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Milk.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Milk.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Milk.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Milk.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Milk.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Milk.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Milk.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Milk.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Milk.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_MIT_Black" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.00005, 0.00005, 0.00005)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.99
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_MIT_Black/SPB_MIT_Black.outputs:surface>

            def Shader "SPB_MIT_Black" (
                prepend references = </MaterialX/Shaders/SPB_MIT_Black>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_MIT_Black.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Musou_Black" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.006, 0.006, 0.006)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.9
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Musou_Black/SPB_Musou_Black.outputs:surface>

            def Shader "SPB_Musou_Black" (
                prepend references = </MaterialX/Shaders/SPB_Musou_Black>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Musou_Black.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Nickel" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.649, 0.61, 0.541)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.797, 0.801, 0.789)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Nickel/SPB_Nickel.outputs:surface>

            def Shader "SPB_Nickel" (
                prepend references = </MaterialX/Shaders/SPB_Nickel>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Nickel.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Nickel.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Nickel.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Nickel.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Nickel.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Nickel.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Nickel.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Nickel.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Nickel.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Nickel.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Nickel.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Nickel.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Nickel.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Nickel.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Nickel.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Nickel.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Nickel.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Nickel.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Nickel.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Nickel.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Nickel.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Nickel.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Nickel.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Nickel.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Nickel.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Nickel.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Nickel.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Nickel.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Nickel.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Office_Paper" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.794, 0.834, 0.884)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Office_Paper/SPB_Office_Paper.outputs:surface>

            def Shader "SPB_Office_Paper" (
                prepend references = </MaterialX/Shaders/SPB_Office_Paper>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Office_Paper.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Pearl" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.8, 0.75, 0.7)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.68
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.35
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR = 2
            float inputs:thin_film_thickness = 420
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Pearl/SPB_Pearl.outputs:surface>

            def Shader "SPB_Pearl" (
                prepend references = </MaterialX/Shaders/SPB_Pearl>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Pearl.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Pearl.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Pearl.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Pearl.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Pearl.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Pearl.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Pearl.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Pearl.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Pearl.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Pearl.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Pearl.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Pearl.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Pearl.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Pearl.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Pearl.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Pearl.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Pearl.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Pearl.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Pearl.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Pearl.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Pearl.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Pearl.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Pearl.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Pearl.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Pearl.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Pearl.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Pearl.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Pearl.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Pearl.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Petroleum" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.03, 0.027, 0.024)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Petroleum/SPB_Petroleum.outputs:surface>

            def Shader "SPB_Petroleum" (
                prepend references = </MaterialX/Shaders/SPB_Petroleum>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Petroleum.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Petroleum.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Petroleum.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Petroleum.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Petroleum.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Petroleum.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Petroleum.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Petroleum.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Petroleum.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Petroleum.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Petroleum.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Petroleum.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Petroleum.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Petroleum.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Petroleum.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Petroleum.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Petroleum.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Petroleum.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Petroleum.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Petroleum.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Petroleum.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Petroleum.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Petroleum.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Plastic__Acrylic_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.476
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_/SPB_Plastic__Acrylic_.outputs:surface>

            def Shader "SPB_Plastic__Acrylic_" (
                prepend references = </MaterialX/Shaders/SPB_Plastic__Acrylic_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__Acrylic_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Plastic__PC_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5848
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Plastic__PC_/SPB_Plastic__PC_.outputs:surface>

            def Shader "SPB_Plastic__PC_" (
                prepend references = </MaterialX/Shaders/SPB_Plastic__PC_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PC_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Plastic__PET_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.575
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Plastic__PET_/SPB_Plastic__PET_.outputs:surface>

            def Shader "SPB_Plastic__PET_" (
                prepend references = </MaterialX/Shaders/SPB_Plastic__PET_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PET_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Plastic__PP_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.492
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Plastic__PP_/SPB_Plastic__PP_.outputs:surface>

            def Shader "SPB_Plastic__PP_" (
                prepend references = </MaterialX/Shaders/SPB_Plastic__PP_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PP_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Plastic__PVC_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.531
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Plastic__PVC_/SPB_Plastic__PVC_.outputs:surface>

            def Shader "SPB_Plastic__PVC_" (
                prepend references = </MaterialX/Shaders/SPB_Plastic__PVC_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Plastic__PVC_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Platinum" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.679, 0.642, 0.588)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.785, 0.789, 0.784)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Platinum/SPB_Platinum.outputs:surface>

            def Shader "SPB_Platinum" (
                prepend references = </MaterialX/Shaders/SPB_Platinum>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Platinum.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Platinum.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Platinum.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Platinum.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Platinum.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Platinum.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Platinum.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Platinum.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Platinum.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Platinum.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Platinum.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Platinum.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Platinum.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Platinum.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Platinum.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Platinum.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Platinum.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Platinum.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Platinum.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Platinum.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Platinum.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Platinum.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Platinum.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Platinum.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Platinum.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Platinum.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Platinum.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Platinum.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Platinum.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Polyurethane" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.6
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Polyurethane/SPB_Polyurethane.outputs:surface>

            def Shader "SPB_Polyurethane" (
                prepend references = </MaterialX/Shaders/SPB_Polyurethane>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Polyurethane.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Salt" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5275
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.2
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Salt/SPB_Salt.outputs:surface>

            def Shader "SPB_Salt" (
                prepend references = </MaterialX/Shaders/SPB_Salt>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Salt.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Salt.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Salt.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Salt.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Salt.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Salt.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Salt.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Salt.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Salt.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Salt.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Salt.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Salt.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Salt.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Salt.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Salt.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Salt.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Salt.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Salt.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Salt.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Salt.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Salt.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Salt.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Salt.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Salt.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Salt.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Salt.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Salt.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Salt.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Salt.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Salt.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Salt.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Salt.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Salt.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Salt.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Salt.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Sand" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.44, 0.386, 0.23074)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Sand/SPB_Sand.outputs:surface>

            def Shader "SPB_Sand" (
                prepend references = </MaterialX/Shaders/SPB_Sand>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Sand.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Sand.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Sand.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Sand.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Sand.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Sand.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Sand.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Sand.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Sand.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Sand.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Sand.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Sand.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Sand.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Sand.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Sand.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Sand.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Sand.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Sand.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Sand.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Sand.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Sand.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Sand.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Sand.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Sand.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Sand.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Sand.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Sand.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Sand.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Sand.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Sand.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Sand.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Sand.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Sand.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Sand.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Sand.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Sapphire" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.67, 0.764, 0.855)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.7682
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (0.67, 0.764, 0.855)
            float inputs:transmission_depth
            float inputs:transmission_dispersion = 72.2
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Sapphire/SPB_Sapphire.outputs:surface>

            def Shader "SPB_Sapphire" (
                prepend references = </MaterialX/Shaders/SPB_Sapphire>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Sapphire.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Sapphire.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Sapphire.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Sapphire.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Sapphire.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Sapphire.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Sapphire.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Sapphire.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Sapphire.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Sapphire.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Sapphire.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Sapphire.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Sapphire.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Sapphire.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Sapphire.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Sapphire.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Sapphire.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Sapphire.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Sapphire.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Sapphire.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Sapphire.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Sapphire.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Sapphire.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Silicon" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.344, 0.367, 0.419)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Silicon/SPB_Silicon.outputs:surface>

            def Shader "SPB_Silicon" (
                prepend references = </MaterialX/Shaders/SPB_Silicon>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Silicon.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Silicon.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Silicon.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Silicon.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Silicon.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Silicon.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Silicon.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Silicon.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Silicon.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Silicon.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Silicon.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Silicon.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Silicon.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Silicon.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Silicon.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Silicon.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Silicon.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Silicon.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Silicon.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Silicon.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Silicon.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Silicon.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Silicon.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Silicon.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Silicon.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Silicon.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Silicon.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Silicon.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Silicon.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Silver" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.962, 0.949, 0.922)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.999, 0.998, 0.998)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Silver/SPB_Silver.outputs:surface>

            def Shader "SPB_Silver" (
                prepend references = </MaterialX/Shaders/SPB_Silver>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Silver.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Silver.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Silver.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Silver.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Silver.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Silver.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Silver.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Silver.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Silver.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Silver.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Silver.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Silver.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Silver.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Silver.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Silver.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Silver.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Silver.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Silver.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Silver.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Silver.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Silver.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Silver.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Silver.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Silver.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Silver.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Silver.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Silver.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Silver.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Silver.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Silver.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Silver.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Silver.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Silver.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Silver.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Silver.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Skin_I" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.847, 0.638, 0.552)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.4
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Skin_I/SPB_Skin_I.outputs:surface>

            def Shader "SPB_Skin_I" (
                prepend references = </MaterialX/Shaders/SPB_Skin_I>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Skin_I.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Skin_I.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Skin_I.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Skin_I.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Skin_I.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Skin_I.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Skin_I.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Skin_I.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Skin_I.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Skin_I.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Skin_I.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Skin_I.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Skin_I.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Skin_I.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Skin_I.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Skin_I.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Skin_I.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Skin_I.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Skin_I.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Skin_I.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Skin_I.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Skin_I.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Skin_I.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Skin_II" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.799, 0.485, 0.347)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.4
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Skin_II/SPB_Skin_II.outputs:surface>

            def Shader "SPB_Skin_II" (
                prepend references = </MaterialX/Shaders/SPB_Skin_II>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Skin_II.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Skin_II.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Skin_II.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Skin_II.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Skin_II.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Skin_II.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Skin_II.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Skin_II.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Skin_II.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Skin_II.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Skin_II.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Skin_II.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Skin_II.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Skin_II.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Skin_II.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Skin_II.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Skin_II.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Skin_II.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Skin_II.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Skin_II.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Skin_II.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Skin_II.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Skin_II.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Skin_III" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.623, 0.433, 0.343)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.4
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Skin_III/SPB_Skin_III.outputs:surface>

            def Shader "SPB_Skin_III" (
                prepend references = </MaterialX/Shaders/SPB_Skin_III>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Skin_III.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Skin_III.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Skin_III.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Skin_III.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Skin_III.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Skin_III.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Skin_III.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Skin_III.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Skin_III.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Skin_III.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Skin_III.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Skin_III.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Skin_III.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Skin_III.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Skin_III.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Skin_III.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Skin_III.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Skin_III.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Skin_III.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Skin_III.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Skin_III.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Skin_III.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Skin_III.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Skin_IV" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.436, 0.227, 0.131)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.4
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Skin_IV/SPB_Skin_IV.outputs:surface>

            def Shader "SPB_Skin_IV" (
                prepend references = </MaterialX/Shaders/SPB_Skin_IV>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Skin_IV.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Skin_V" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.283, 0.148, 0.079)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.4
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Skin_V/SPB_Skin_V.outputs:surface>

            def Shader "SPB_Skin_V" (
                prepend references = </MaterialX/Shaders/SPB_Skin_V>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Skin_V.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Skin_V.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Skin_V.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Skin_V.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Skin_V.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Skin_V.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Skin_V.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Skin_V.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Skin_V.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Skin_V.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Skin_V.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Skin_V.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Skin_V.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Skin_V.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Skin_V.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Skin_V.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Skin_V.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Skin_V.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Skin_V.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Skin_V.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Skin_V.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Skin_V.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Skin_V.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Skin_VI" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.09, 0.05, 0.02)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.4
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Skin_VI/SPB_Skin_VI.outputs:surface>

            def Shader "SPB_Skin_VI" (
                prepend references = </MaterialX/Shaders/SPB_Skin_VI>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Skin_VI.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Snow" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.85, 0.85, 0.85)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.3098
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Snow/SPB_Snow.outputs:surface>

            def Shader "SPB_Snow" (
                prepend references = </MaterialX/Shaders/SPB_Snow>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Snow.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Snow.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Snow.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Snow.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Snow.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Snow.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Snow.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Snow.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Snow.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Snow.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Snow.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Snow.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Snow.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Snow.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Snow.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Snow.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Snow.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Snow.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Snow.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Snow.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Snow.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Snow.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Snow.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Snow.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Snow.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Snow.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Snow.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Snow.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Snow.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Snow.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Snow.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Snow.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Snow.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Snow.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Snow.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Soap_Bubble" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR = 1.4
            float inputs:thin_film_thickness = 500
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Soap_Bubble/SPB_Soap_Bubble.outputs:surface>

            def Shader "SPB_Soap_Bubble" (
                prepend references = </MaterialX/Shaders/SPB_Soap_Bubble>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Soap_Bubble.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Tire" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.023, 0.023, 0.023)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Tire/SPB_Tire.outputs:surface>

            def Shader "SPB_Tire" (
                prepend references = </MaterialX/Shaders/SPB_Tire>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Tire.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Tire.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Tire.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Tire.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Tire.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Tire.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Tire.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Tire.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Tire.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Tire.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Tire.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Tire.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Tire.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Tire.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Tire.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Tire.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Tire.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Tire.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Tire.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Tire.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Tire.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Tire.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Tire.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Tire.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Tire.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Tire.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Tire.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Tire.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Tire.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Tire.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Tire.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Tire.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Tire.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Tire.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Tire.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Titanium" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.616, 0.582, 0.544)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.689, 0.683, 0.689)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Titanium/SPB_Titanium.outputs:surface>

            def Shader "SPB_Titanium" (
                prepend references = </MaterialX/Shaders/SPB_Titanium>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Titanium.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Titanium.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Titanium.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Titanium.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Titanium.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Titanium.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Titanium.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Titanium.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Titanium.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Titanium.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Titanium.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Titanium.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Titanium.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Titanium.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Titanium.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Titanium.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Titanium.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Titanium.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Titanium.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Titanium.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Titanium.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Titanium.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Titanium.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Titanium.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Titanium.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Titanium.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Titanium.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Titanium.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Titanium.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Toner__black_" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.05, 0.05, 0.05)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0.5
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Toner__black_/SPB_Toner__black_.outputs:surface>

            def Shader "SPB_Toner__black_" (
                prepend references = </MaterialX/Shaders/SPB_Toner__black_>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Toner__black_.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Tungsten" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.504, 0.498, 0.478)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.403, 0.418, 0.423)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Tungsten/SPB_Tungsten.outputs:surface>

            def Shader "SPB_Tungsten" (
                prepend references = </MaterialX/Shaders/SPB_Tungsten>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Tungsten.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Tungsten.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Tungsten.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Tungsten.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Tungsten.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Tungsten.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Tungsten.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Tungsten.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Tungsten.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Tungsten.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Tungsten.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Tungsten.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Tungsten.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Tungsten.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Tungsten.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Tungsten.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Tungsten.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Tungsten.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Tungsten.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Tungsten.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Tungsten.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Tungsten.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Tungsten.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Vanadium" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.52, 0.532, 0.541)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.402, 0.447, 0.395)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Vanadium/SPB_Vanadium.outputs:surface>

            def Shader "SPB_Vanadium" (
                prepend references = </MaterialX/Shaders/SPB_Vanadium>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Vanadium.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Vanadium.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Vanadium.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Vanadium.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Vanadium.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Vanadium.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Vanadium.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Vanadium.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Vanadium.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Vanadium.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Vanadium.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Vanadium.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Vanadium.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Vanadium.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Vanadium.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Vanadium.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Vanadium.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Vanadium.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Vanadium.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Vanadium.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Vanadium.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Vanadium.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Vanadium.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Water" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.3325
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth
            float inputs:transmission_dispersion = 55.78
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Water/SPB_Water.outputs:surface>

            def Shader "SPB_Water" (
                prepend references = </MaterialX/Shaders/SPB_Water>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Water.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Water.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Water.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Water.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Water.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Water.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Water.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Water.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Water.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Water.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Water.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Water.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Water.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Water.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Water.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Water.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Water.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Water.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Water.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Water.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Water.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Water.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Water.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Water.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Water.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Water.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Water.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Water.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Water.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Water.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Water.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Water.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Water.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Water.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Water.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Water.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Water.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Water.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Water.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Water.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Water.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Water.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Whiteboard" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.869, 0.867, 0.771)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 0
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Whiteboard/SPB_Whiteboard.outputs:surface>

            def Shader "SPB_Whiteboard" (
                prepend references = </MaterialX/Shaders/SPB_Whiteboard>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Whiteboard.inputs:transmission_scatter_anisotropy>
            }
        }

        def Material "MPB_Zinc" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (0.802, 0.844, 0.863)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness = 1
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color = (0.817, 0.922, 0.964)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation
            float inputs:specular_roughness = 0
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/MPB_Zinc/SPB_Zinc.outputs:surface>

            def Shader "SPB_Zinc" (
                prepend references = </MaterialX/Shaders/SPB_Zinc>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/MPB_Zinc.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/MPB_Zinc.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/MPB_Zinc.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/MPB_Zinc.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/MPB_Zinc.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/MPB_Zinc.inputs:normal>
                color3f inputs:opacity.connect = </MaterialX/Materials/MPB_Zinc.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/MPB_Zinc.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/MPB_Zinc.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/MPB_Zinc.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/MPB_Zinc.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/MPB_Zinc.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/MPB_Zinc.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/MPB_Zinc.inputs:specular_roughness>
                float inputs:subsurface.connect = </MaterialX/Materials/MPB_Zinc.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/MPB_Zinc.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/MPB_Zinc.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/MPB_Zinc.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/MPB_Zinc.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/MPB_Zinc.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/MPB_Zinc.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/MPB_Zinc.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/MPB_Zinc.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/MPB_Zinc.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/MPB_Zinc.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/MPB_Zinc.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/MPB_Zinc.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/MPB_Zinc.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/MPB_Zinc.inputs:transmission_scatter_anisotropy>
            }
        }
    }

    def "Shaders"
    {
        def Shader "SPB_Aluminum" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/aluminum.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Banana" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/banana.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Blackboard" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/blackboard.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Blood" (
            doc = "The color of blood depends on its oxygen level. When there is plenty of oxygen, the color is a brighter red. The reason is because of a protein called hemoglobin, which carries the oxygen in your blood. When hemoglobin has a full oxygen load, it has a bright red color, and when it's deoxygenated it's a darker red. For example, arterial and capillary blood is bright, and venous blood is dark.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/blood.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Bone" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/bone.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Brass" (
            doc = 'Brass is an alloy of copper and zinc, with a bright and gold-like appearance. It is similar to bronze, another alloy containing copper that uses tin instead of zinc. Historically, the distinction between the two alloys has been less consistent and clear, and modern practice in museums and archaeology increasingly avoids both terms for historical objects in favor of the more general "copper alloy".. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/brass.jpeg'
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Brick" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/brick.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Car_Paint" (
            doc = 'Modern car paints are nearly always an acrylic polyurethane "enamel" with a pigmented basecoat and a clear topcoat. It may be described as "acrylic", "acrylic enamel", "urethane", etc. and the clearcoat in particular may be described as a lacquer. The size of the metal flakes in metallic paints is typically between 100 to 400 microns in diameter. Modern automobile paint is applied in several layers, with a total thickness of around 100 μm (0.1mm).. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/car-paint.jpeg'
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Carrot" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/carrot.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Charcoal" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/charcoal.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Chocolate" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/chocolate.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Chromium" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/chromium.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Cobalt" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/cobalt.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Coffee" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/coffee.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Concrete" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/concrete.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Cooking_Oil" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/cooking-oil.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Copper" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/copper.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Diamond" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/diamond.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Egg_Shell" (
            doc = "White hen egg from grocery store.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/egg-shell.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Eye__cornea_" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/eye-cornea.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Eye__lens_" (
            doc = "The refractive index of human lens varies from approximately 1.406 in the central layers down to 1.386 in less dense layers of the lens. This index gradient enhances the optical power of the lens.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/eye-lens.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Eye__sclera_" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/eye-sclera.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Gasoline" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/gasoline.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Glass" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/glass.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Gold" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/gold.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Gray_Card" (
            doc = "18% gray has a perceptual lightness of 50%.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/gray-card.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Honey" (
            doc = "Variations in its water content alter its refractive index. Typically, the refractive index for honey ranges from 1.504 at 13% water content to 1.474 at 25%.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/honey.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Ice" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/ice.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Iron" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/iron.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Ketchup" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/ketchup.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Lead" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/lead.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Lemon" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/lemon.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Marble" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/marble.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Mercury" (
            doc = "Mercury is the only metallic element that is known to be liquid at standard conditions.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/mercury.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Milk" (
            doc = "Cow's milk. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/milk.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_MIT_Black" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/mit-black.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Musou_Black" (
            doc = "Musou Black is one of the darkest paints available. Darker materials can be achieved by using technology such as carbon nanotubes, like the MIT Black material.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/musou-black.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Nickel" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/nickel.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Office_Paper" (
            doc = "Office paper contains optical brightening additives that absorb light in the ultraviolet and violet region (usually 340-370 nm), and re-emit light in the blue region (typically 420-470 nm) by fluorescence.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/office-paper.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Pearl" (
            doc = "The akoya pearl is a saltwater cultured pearl from the akoya oyster. Akoya are considered to be the classic pearl used for necklaces and other pearl jewelry. Nacre is the material of which pearls are composed and consists of aragonite crystal layers separated by conchiolin, a protein secreted by mollusk shells. The thickness of these layers determines the color of reflection from the nacre. The transmission interference color is complementary to the reflection interference color.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/pearl.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Petroleum" (
            doc = "The viscosity of crude oil is sensitive to temperature.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/petroleum.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Plastic__Acrylic_" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/plastic-acrylic.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Plastic__PC_" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/plastic-pc.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Plastic__PET_" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/plastic-pet.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Plastic__PP_" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/plastic-pp.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Plastic__PVC_" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/plastic-pvc.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Platinum" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/platinum.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Polyurethane" (
            doc = 'Modern car paints are nearly always an acrylic polyurethane "enamel" with a pigmented basecoat and a clear topcoat. It may be described as "acrylic", "acrylic enamel", "urethane", etc. and the clearcoat in particular may be described as a lacquer.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/polyurethane.jpeg'
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Salt" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/salt.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Sand" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/sand.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Sapphire" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/sapphire.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Silicon" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/silicon.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Silver" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/silver.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Skin_I" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/skin-i.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Skin_II" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/skin-ii.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Skin_III" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/skin-iii.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Skin_IV" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/skin-iv.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Skin_V" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/skin-v.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Skin_VI" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/skin-vi.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Snow" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/snow.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Soap_Bubble" (
            doc = "The colors of a soap bubble are the result of an interaction between the light reflected from the front and back surfaces of the soap film, a phenomenon known as thin-film interference. The thickness of a soap bubble can range between 10 nm and 1000 nm. It's thinner at the top due to gravity.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/soap-bubble.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Tire" (
            doc = "Car tire.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/tire.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Titanium" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/titanium.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Toner__black_" (
            doc = "Black toner printed on office paper with linear sRGB values of 0, 0, 0.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/toner-black.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Tungsten" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/tungsten.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Vanadium" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/vanadium.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Water" (
            doc = "While relatively small quantities of water appear to be colorless, pure water has a slight blue color that becomes deeper as the thickness of the observed sample increases. The hue of water is an intrinsic property and is caused by selective absorption and scattering of white light. Dissolved elements or suspended impurities may give water a different color.. Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/water.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Whiteboard" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/whiteboard.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "SPB_Zinc" (
            doc = "Reference: https://raw.githubusercontent.com/AntonPalmqvist/physically-based-api/main/images/renders/cycles/600/zinc.jpeg"
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\shaderball.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/MPB_Pearl>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera.usda@
    )
    {
    }
}

