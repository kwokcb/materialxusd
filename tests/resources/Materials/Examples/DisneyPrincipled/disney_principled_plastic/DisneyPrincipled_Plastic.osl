#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void mx_roughness_anisotropy(float roughness, float anisotropy, output vector2 result)
{
    float roughness_sqr = clamp(roughness*roughness, M_FLOAT_EPS, 1.0);
    if (anisotropy > 0.0)
    {
        float aspect = sqrt(1.0 - clamp(anisotropy, 0.0, 0.98));
        result.x = min(roughness_sqr / aspect, 1.0);
        result.y = roughness_sqr * aspect;
    }
    else
    {
        result.x = roughness_sqr;
        result.y = roughness_sqr;
    }
}

void mx_subsurface_bsdf(float weight, color albedo, color radius, float anisotropy, normal N, output BSDF bsdf)
{
#if OSL_VERSION_MAJOR >= 1 && OSL_VERSION_MINOR >= 14
    bsdf = subsurface_bssrdf(N, weight * albedo, radius, anisotropy);
#else
    bsdf = subsurface_bssrdf(N, weight * albedo, 1.0, radius, anisotropy);
#endif
}

void mx_dielectric_bsdf(float weight, color tint, float ior, vector2 roughness, float thinfilm_thickness, float thinfilm_ior, normal N, vector U, string distribution, string scatter_mode, output BSDF bsdf)
{
    color reflection_tint = (scatter_mode == "T") ? color(0.0) : tint;
    color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
    bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
}

void NG_convert_float_vector2(float in, output vector2 out)
{
    vector2 combine_out = { in,in };
    out = combine_out;
}

void mx_generalized_schlick_bsdf(float weight, color color0, color color82, color color90, float exponent, vector2 roughness, float thinfilm_thickness, float thinfilm_ior, normal N, vector U, string distribution, string scatter_mode, output BSDF bsdf)
{
    color reflection_tint = (scatter_mode == "T") ? color(0.0) : color(1.0);
    color transmission_tint = (scatter_mode == "R") ? color(0.0) : color(1.0);
    bsdf = weight * generalized_schlick_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, color0, color90, exponent, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
}

void mx_roughness_dual(vector2 roughness, output vector2 result)
{
    result.x = clamp(roughness.x * roughness.x, M_FLOAT_EPS, 1.0);
    if (roughness.y < 0.0)
    {
        result.y = result.x;
    }
    else
    {
        result.y = clamp(roughness.y * roughness.y, M_FLOAT_EPS, 1.0);
    }
}

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

void NG_disney_principled(color baseColor, float metallic, float roughness, float anisotropic, float specular, float specularTint, float sheen1, float sheenTint, float clearcoat, float clearcoatGloss, float specTrans, float ior, float subsurface1, color subsurfaceDistance, output surfaceshader out)
{
    closure color null_closure = 0;
    string geomprop_Nworld_space_tmp = "world";
    vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space_tmp, N);
    vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
    float coat_intensity_in2_tmp = 0.040000;
    float coat_intensity_out = clearcoat * coat_intensity_in2_tmp;
    float coat_roughness_amount_tmp = 1.000000;
    float coat_roughness_out = coat_roughness_amount_tmp - clearcoatGloss;
    float dielectric_intensity_in2_tmp = 0.080000;
    float dielectric_intensity_out = specular * dielectric_intensity_in2_tmp;
    color dielectric_tint_bg_tmp = color(1.000000, 1.000000, 1.000000);
    color dielectric_tint_out = mix(dielectric_tint_bg_tmp, baseColor, specularTint);
    vector2 specular_roughness_out = vector2(0.0, 0.0);
    mx_roughness_anisotropy(roughness, anisotropic, specular_roughness_out);
    color sheen_color_bg_tmp = color(1.000000, 1.000000, 1.000000);
    color sheen_color_out = mix(sheen_color_bg_tmp, baseColor, sheenTint);
    float invert_metalness_amount_tmp = 1.000000;
    float invert_metalness_out = invert_metalness_amount_tmp - metallic;
    vector2 coat_roughness_vector_out = vector2(0.0, 0.0);
    NG_convert_float_vector2(coat_roughness_out, coat_roughness_vector_out);
    vector2 coat_roughness_dual_out = vector2(0.0, 0.0);
    mx_roughness_dual(coat_roughness_vector_out, coat_roughness_dual_out);
    BSDF coat_bsdf_out = null_closure;
    mx_generalized_schlick_bsdf(coat_intensity_out, color(1.000000, 1.000000, 1.000000), color(1.000000, 1.000000, 1.000000), color(1.000000, 1.000000, 1.000000), 5.000000, coat_roughness_dual_out, 0.000000, 1.500000, geomprop_Nworld_out1, geomprop_Tworld_out1, "ggx", "R", coat_bsdf_out);
    BSDF metallic_bsdf_out = null_closure;
    mx_generalized_schlick_bsdf(1.000000, baseColor, color(1.000000, 1.000000, 1.000000), color(1.000000, 1.000000, 1.000000), 5.000000, specular_roughness_out, 0.000000, 1.500000, geomprop_Nworld_out1, geomprop_Tworld_out1, "ggx", "R", metallic_bsdf_out);
    BSDF dielectric_bsdf_out = null_closure;
    mx_generalized_schlick_bsdf(dielectric_intensity_out, dielectric_tint_out, color(1.000000, 1.000000, 1.000000), color(1.000000, 1.000000, 1.000000), 5.000000, specular_roughness_out, 0.000000, 1.500000, geomprop_Nworld_out1, geomprop_Tworld_out1, "ggx", "R", dielectric_bsdf_out);
    BSDF transmission_bsdf_out = null_closure;
    mx_dielectric_bsdf(1.000000, baseColor, ior, vector2(0.000000, 0.000000), 0.000000, 1.500000, geomprop_Nworld_out1, geomprop_Tworld_out1, "ggx", "T", transmission_bsdf_out);
    float sheen_bsdf_roughness_tmp = 0.300000;
    BSDF sheen_bsdf_out = sheen1 * sheen_bsdf(geomprop_Nworld_out1, sheen_color_out, sheen_bsdf_roughness_tmp);
    BSDF subsurface_bsdf_out = null_closure;
    mx_subsurface_bsdf(1.000000, baseColor, subsurfaceDistance, 0.000000, geomprop_Nworld_out1, subsurface_bsdf_out);
    BSDF diffuse_bsdf_out = invert_metalness_out * burley_diffuse_bsdf(geomprop_Nworld_out1, baseColor, roughness);
    BSDF subsurface_mix_out = mix(diffuse_bsdf_out, subsurface_bsdf_out, subsurface1);
    BSDF sheen_layer_out = layer(sheen_bsdf_out, subsurface_mix_out);
    BSDF transmission_mix_out = mix(sheen_layer_out, transmission_bsdf_out, specTrans);
    BSDF dielectric_layer_out = layer(dielectric_bsdf_out, transmission_mix_out);
    BSDF metallic_mix_out = mix(dielectric_layer_out, metallic_bsdf_out, metallic);
    BSDF coat_layer_out = layer(coat_bsdf_out, metallic_mix_out);
    surfaceshader surface_constructor_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(coat_layer_out, null_closure, 1.000000, 0, surface_constructor_out);
    out = surface_constructor_out;
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader DisneyPrincipled_Plastic
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "DisneyPrincipled_Plastic"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    color SR_plastic_baseColor = color(0.104704, 0.241883, 0.818000)
    [[
        string label = "Base Color",
        string page = "Base"
    ]],
    float SR_plastic_metallic = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Metallic",
        string page = "Base",
        string widget = "number"
    ]],
    float SR_plastic_roughness = 0.324675
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Roughness",
        string page = "Base",
        string widget = "number"
    ]],
    float SR_plastic_anisotropic = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Anisotropic",
        string page = "Specular",
        string widget = "number"
    ]],
    float SR_plastic_specular = 0.500000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Specular",
        string page = "Specular",
        string widget = "number"
    ]],
    float SR_plastic_specularTint = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Specular Tint",
        string page = "Specular",
        string widget = "number"
    ]],
    float SR_plastic_sheen = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Sheen",
        string page = "Sheen",
        string widget = "number"
    ]],
    float SR_plastic_sheenTint = 0.500000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Sheen Tint",
        string page = "Sheen",
        string widget = "number"
    ]],
    float SR_plastic_clearcoat = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Clearcoat",
        string page = "Clearcoat",
        string widget = "number"
    ]],
    float SR_plastic_clearcoatGloss = 1.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Clearcoat Gloss",
        string page = "Clearcoat",
        string widget = "number"
    ]],
    float SR_plastic_specTrans = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Spec Trans",
        string page = "Transmission",
        string widget = "number"
    ]],
    float SR_plastic_ior = 1.500000
    [[
        float slidermin = 1.000000,
        float slidermax = 3.000000,
        string label = "IOR",
        string page = "Transmission",
        string widget = "number"
    ]],
    float SR_plastic_subsurface = 0.000000
    [[
        string label = "Subsurface",
        string page = "Subsurface",
        string widget = "number"
    ]],
    color SR_plastic_subsurfaceDistance = color(1.000000, 1.000000, 1.000000)
    [[
        string label = "Subsurface Distance",
        string page = "Subsurface"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    surfaceshader SR_plastic_out = surfaceshader(null_closure, null_closure, 1.0);
    NG_disney_principled(SR_plastic_baseColor, SR_plastic_metallic, SR_plastic_roughness, SR_plastic_anisotropic, SR_plastic_specular, SR_plastic_specularTint, SR_plastic_sheen, SR_plastic_sheenTint, SR_plastic_clearcoat, SR_plastic_clearcoatGloss, SR_plastic_specTrans, SR_plastic_ior, SR_plastic_subsurface, SR_plastic_subsurfaceDistance, SR_plastic_out);
    MATERIAL DisneyPrincipled_Plastic_out = mx_surfacematerial(SR_plastic_out, backsurfaceshader, displacementshader1);
    out = DisneyPrincipled_Plastic_out;
}

