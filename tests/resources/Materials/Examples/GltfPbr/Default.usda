#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: D:\\Work\\materialx\\materialxusd\\tests\\resources\\Materials\\Examples\\GltfPbr\\gltf_pbr_default_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "Default" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:alpha = 1
            float inputs:alpha_cutoff = 0.5
            int inputs:alpha_mode = 0
            color3f inputs:attenuation_color = (0, 0, 0)
            float inputs:attenuation_distance = 100000
            color3f inputs:base_color = (1, 1, 1)
            float inputs:clearcoat = 0
            float3 inputs:clearcoat_normal
            float inputs:clearcoat_roughness = 0
            color3f inputs:emissive = (0, 0, 0)
            float inputs:emissive_strength = 1
            float inputs:ior = 1.5
            float inputs:iridescence = 0
            float inputs:iridescence_ior = 1.3
            float inputs:iridescence_thickness = 300
            float inputs:metallic = 1
            float3 inputs:normal
            float inputs:occlusion = 0
            float inputs:roughness = 1
            color3f inputs:sheen_color = (0, 0, 0)
            float inputs:sheen_roughness = 0
            float inputs:specular = 1
            color3f inputs:specular_color = (1, 1, 1)
            float3 inputs:tangent
            float inputs:thickness = 0
            float inputs:transmission = 0
            token outputs:mtlx:surface.connect = </MaterialX/Materials/Default/SR_default.outputs:surface>

            def Shader "SR_default" (
                prepend references = </MaterialX/Shaders/SR_default>
            )
            {
                float inputs:alpha.connect = </MaterialX/Materials/Default.inputs:alpha>
                float inputs:alpha_cutoff.connect = </MaterialX/Materials/Default.inputs:alpha_cutoff>
                int inputs:alpha_mode.connect = </MaterialX/Materials/Default.inputs:alpha_mode>
                color3f inputs:attenuation_color.connect = </MaterialX/Materials/Default.inputs:attenuation_color>
                float inputs:attenuation_distance.connect = </MaterialX/Materials/Default.inputs:attenuation_distance>
                color3f inputs:base_color.connect = </MaterialX/Materials/Default.inputs:base_color>
                float inputs:clearcoat.connect = </MaterialX/Materials/Default.inputs:clearcoat>
                float3 inputs:clearcoat_normal.connect = </MaterialX/Materials/Default/root_graph.outputs:out2>
                float inputs:clearcoat_roughness.connect = </MaterialX/Materials/Default.inputs:clearcoat_roughness>
                color3f inputs:emissive.connect = </MaterialX/Materials/Default.inputs:emissive>
                float inputs:emissive_strength.connect = </MaterialX/Materials/Default.inputs:emissive_strength>
                float inputs:ior.connect = </MaterialX/Materials/Default.inputs:ior>
                float inputs:iridescence.connect = </MaterialX/Materials/Default.inputs:iridescence>
                float inputs:iridescence_ior.connect = </MaterialX/Materials/Default.inputs:iridescence_ior>
                float inputs:iridescence_thickness.connect = </MaterialX/Materials/Default.inputs:iridescence_thickness>
                float inputs:metallic.connect = </MaterialX/Materials/Default.inputs:metallic>
                float3 inputs:normal.connect = </MaterialX/Materials/Default/root_graph.outputs:out>
                float inputs:occlusion.connect = </MaterialX/Materials/Default.inputs:occlusion>
                float inputs:roughness.connect = </MaterialX/Materials/Default.inputs:roughness>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/Default.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/Default.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/Default.inputs:specular>
                color3f inputs:specular_color.connect = </MaterialX/Materials/Default.inputs:specular_color>
                float3 inputs:tangent.connect = </MaterialX/Materials/Default/root_graph.outputs:out3>
                float inputs:thickness.connect = </MaterialX/Materials/Default.inputs:thickness>
                float inputs:transmission.connect = </MaterialX/Materials/Default.inputs:transmission>
            }

            def "root_graph" (
                prepend references = </MaterialX/NodeGraphs/root_graph>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "SR_default"
        {
            uniform token info:id = "ND_gltf_pbr_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "root_graph"
        {
            float3 outputs:out.connect = </MaterialX/NodeGraphs/root_graph/Nworld.outputs:out>
            float3 outputs:out2.connect = </MaterialX/NodeGraphs/root_graph/Nworld.outputs:out>
            float3 outputs:out3.connect = </MaterialX/NodeGraphs/root_graph/Tworld.outputs:out>

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/Default>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

