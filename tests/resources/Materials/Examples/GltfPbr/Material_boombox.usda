#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/Examples\\GltfPbr\\gltf_pbr_boombox_converted.mtlx, D:\\work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "Material_boombox" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:alpha
            float inputs:alpha_cutoff
            int inputs:alpha_mode
            color3f inputs:attenuation_color
            float inputs:attenuation_distance
            color3f inputs:base_color
            float inputs:clearcoat
            float3 inputs:clearcoat_normal
            float inputs:clearcoat_roughness
            color3f inputs:emissive
            float inputs:emissive_strength
            float inputs:ior
            float inputs:iridescence
            float inputs:iridescence_ior
            float inputs:iridescence_thickness
            float inputs:metallic
            float3 inputs:normal
            float inputs:occlusion
            float inputs:roughness
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            color3f inputs:specular_color
            float3 inputs:tangent
            float inputs:thickness
            float inputs:transmission
            token outputs:mtlx:surface.connect = </MaterialX/Materials/Material_boombox/SR_boombox.outputs:surface>

            def Shader "SR_boombox" (
                prepend references = </MaterialX/Shaders/SR_boombox>
            )
            {
                float inputs:alpha.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out2>
                float inputs:alpha_cutoff.connect = </MaterialX/Materials/Material_boombox.inputs:alpha_cutoff>
                int inputs:alpha_mode.connect = </MaterialX/Materials/Material_boombox.inputs:alpha_mode>
                color3f inputs:attenuation_color.connect = </MaterialX/Materials/Material_boombox.inputs:attenuation_color>
                float inputs:attenuation_distance.connect = </MaterialX/Materials/Material_boombox.inputs:attenuation_distance>
                color3f inputs:base_color.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out>
                float inputs:clearcoat.connect = </MaterialX/Materials/Material_boombox.inputs:clearcoat>
                float3 inputs:clearcoat_normal.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out9>
                float inputs:clearcoat_roughness.connect = </MaterialX/Materials/Material_boombox.inputs:clearcoat_roughness>
                color3f inputs:emissive.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out4>
                float inputs:emissive_strength.connect = </MaterialX/Materials/Material_boombox.inputs:emissive_strength>
                float inputs:ior.connect = </MaterialX/Materials/Material_boombox.inputs:ior>
                float inputs:iridescence.connect = </MaterialX/Materials/Material_boombox.inputs:iridescence>
                float inputs:iridescence_ior.connect = </MaterialX/Materials/Material_boombox.inputs:iridescence_ior>
                float inputs:iridescence_thickness.connect = </MaterialX/Materials/Material_boombox.inputs:iridescence_thickness>
                float inputs:metallic.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out5>
                float3 inputs:normal.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out3>
                float inputs:occlusion.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out7>
                float inputs:roughness.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out6>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/Material_boombox.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/Material_boombox.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/Material_boombox.inputs:specular>
                color3f inputs:specular_color.connect = </MaterialX/Materials/Material_boombox.inputs:specular_color>
                float3 inputs:tangent.connect = </MaterialX/Materials/Material_boombox/root_graph.outputs:out8>
                float inputs:thickness.connect = </MaterialX/Materials/Material_boombox.inputs:thickness>
                float inputs:transmission.connect = </MaterialX/Materials/Material_boombox.inputs:transmission>
            }

            def "root_graph" (
                prepend references = </MaterialX/NodeGraphs/root_graph>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "SR_boombox"
        {
            uniform token info:id = "ND_gltf_pbr_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "root_graph"
        {
            color3f outputs:out.connect = </MaterialX/NodeGraphs/root_graph/image_basecolor.outputs:outcolor>
            float outputs:out2.connect = </MaterialX/NodeGraphs/root_graph/image_basecolor.outputs:outa>
            float3 outputs:out3.connect = </MaterialX/NodeGraphs/root_graph/image_normal.outputs:out>
            color3f outputs:out4.connect = </MaterialX/NodeGraphs/root_graph/image_emission.outputs:out>
            float outputs:out5.connect = </MaterialX/NodeGraphs/root_graph/image_orm_channels.outputs:outz>
            float outputs:out6.connect = </MaterialX/NodeGraphs/root_graph/image_orm_channels.outputs:outy>
            float outputs:out7.connect = </MaterialX/NodeGraphs/root_graph/image_orm_channels.outputs:outx>
            float3 outputs:out8.connect = </MaterialX/NodeGraphs/root_graph/Tworld.outputs:out>
            float3 outputs:out9.connect = </MaterialX/NodeGraphs/root_graph/Nworld.outputs:out>

            def Shader "image_basecolor"
            {
                uniform token info:id = "ND_gltf_colorimage"
                asset inputs:file = @boombox/BoomBox_baseColor.png@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/root_graph/UV0.outputs:out>
                float outputs:outa
                color3f outputs:outcolor
            }

            def Shader "image_orm"
            {
                uniform token info:id = "ND_gltf_image_vector3_vector3_1_0"
                asset inputs:file = @boombox/BoomBox_occlusionRoughnessMetallic.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/root_graph/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "image_normal"
            {
                uniform token info:id = "ND_gltf_normalmap_vector3_1_0"
                asset inputs:file = @boombox/BoomBox_normal.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/root_graph/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "image_emission"
            {
                uniform token info:id = "ND_gltf_image_color3_color3_1_0"
                asset inputs:file = @boombox/BoomBox_emissive.png@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/root_graph/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "image_orm_channels"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/root_graph/image_orm.outputs:out>
                float outputs:outx
                float outputs:outy
                float outputs:outz
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/Material_boombox>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

