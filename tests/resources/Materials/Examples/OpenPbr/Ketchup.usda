#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/Examples\\OpenPbr\\open_pbr_ketchup_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "Ketchup" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            color3f inputs:base_color = (0.164, 0.006, 0.002)
            float inputs:base_diffuse_roughness
            float inputs:base_metalness
            float inputs:base_weight
            color3f inputs:coat_color
            float inputs:coat_darkening
            float inputs:coat_ior
            float inputs:coat_roughness
            float inputs:coat_roughness_anisotropy
            float inputs:coat_weight
            color3f inputs:emission_color
            float inputs:emission_luminance
            color3f inputs:fuzz_color
            float inputs:fuzz_roughness
            float inputs:fuzz_weight
            float3 inputs:geometry_coat_normal
            float3 inputs:geometry_coat_tangent
            float3 inputs:geometry_normal
            float inputs:geometry_opacity
            float3 inputs:geometry_tangent
            bool inputs:geometry_thin_walled
            color3f inputs:specular_color
            float inputs:specular_ior = 1.3
            float inputs:specular_roughness = 0
            float inputs:specular_roughness_anisotropy
            float inputs:specular_weight
            color3f inputs:subsurface_color = (0.164, 0.006, 0.002)
            float inputs:subsurface_radius
            color3f inputs:subsurface_radius_scale = (0.476, 0.058, 0.039)
            float inputs:subsurface_scatter_anisotropy
            float inputs:subsurface_weight = 1
            float inputs:thin_film_ior
            float inputs:thin_film_thickness
            float inputs:thin_film_weight
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion_abbe_number
            float inputs:transmission_dispersion_scale
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            float inputs:transmission_weight
            token outputs:mtlx:surface.connect = </MaterialX/Materials/Ketchup/open_pbr_surface_surfaceshader.outputs:surface>

            def Shader "open_pbr_surface_surfaceshader" (
                prepend references = </MaterialX/Shaders/open_pbr_surface_surfaceshader>
            )
            {
                color3f inputs:base_color.connect = </MaterialX/Materials/Ketchup.inputs:base_color>
                float inputs:base_diffuse_roughness.connect = </MaterialX/Materials/Ketchup.inputs:base_diffuse_roughness>
                float inputs:base_metalness.connect = </MaterialX/Materials/Ketchup.inputs:base_metalness>
                float inputs:base_weight.connect = </MaterialX/Materials/Ketchup.inputs:base_weight>
                color3f inputs:coat_color.connect = </MaterialX/Materials/Ketchup.inputs:coat_color>
                float inputs:coat_darkening.connect = </MaterialX/Materials/Ketchup.inputs:coat_darkening>
                float inputs:coat_ior.connect = </MaterialX/Materials/Ketchup.inputs:coat_ior>
                float inputs:coat_roughness.connect = </MaterialX/Materials/Ketchup.inputs:coat_roughness>
                float inputs:coat_roughness_anisotropy.connect = </MaterialX/Materials/Ketchup.inputs:coat_roughness_anisotropy>
                float inputs:coat_weight.connect = </MaterialX/Materials/Ketchup.inputs:coat_weight>
                color3f inputs:emission_color.connect = </MaterialX/Materials/Ketchup.inputs:emission_color>
                float inputs:emission_luminance.connect = </MaterialX/Materials/Ketchup.inputs:emission_luminance>
                color3f inputs:fuzz_color.connect = </MaterialX/Materials/Ketchup.inputs:fuzz_color>
                float inputs:fuzz_roughness.connect = </MaterialX/Materials/Ketchup.inputs:fuzz_roughness>
                float inputs:fuzz_weight.connect = </MaterialX/Materials/Ketchup.inputs:fuzz_weight>
                float3 inputs:geometry_coat_normal.connect = </MaterialX/Materials/Ketchup/root_graph.outputs:out2>
                float3 inputs:geometry_coat_tangent.connect = </MaterialX/Materials/Ketchup/root_graph.outputs:out4>
                float3 inputs:geometry_normal.connect = </MaterialX/Materials/Ketchup/root_graph.outputs:out>
                float inputs:geometry_opacity.connect = </MaterialX/Materials/Ketchup.inputs:geometry_opacity>
                float3 inputs:geometry_tangent.connect = </MaterialX/Materials/Ketchup/root_graph.outputs:out3>
                bool inputs:geometry_thin_walled.connect = </MaterialX/Materials/Ketchup.inputs:geometry_thin_walled>
                color3f inputs:specular_color.connect = </MaterialX/Materials/Ketchup.inputs:specular_color>
                float inputs:specular_ior.connect = </MaterialX/Materials/Ketchup.inputs:specular_ior>
                float inputs:specular_roughness.connect = </MaterialX/Materials/Ketchup.inputs:specular_roughness>
                float inputs:specular_roughness_anisotropy.connect = </MaterialX/Materials/Ketchup.inputs:specular_roughness_anisotropy>
                float inputs:specular_weight.connect = </MaterialX/Materials/Ketchup.inputs:specular_weight>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/Ketchup.inputs:subsurface_color>
                float inputs:subsurface_radius.connect = </MaterialX/Materials/Ketchup.inputs:subsurface_radius>
                color3f inputs:subsurface_radius_scale.connect = </MaterialX/Materials/Ketchup.inputs:subsurface_radius_scale>
                float inputs:subsurface_scatter_anisotropy.connect = </MaterialX/Materials/Ketchup.inputs:subsurface_scatter_anisotropy>
                float inputs:subsurface_weight.connect = </MaterialX/Materials/Ketchup.inputs:subsurface_weight>
                float inputs:thin_film_ior.connect = </MaterialX/Materials/Ketchup.inputs:thin_film_ior>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/Ketchup.inputs:thin_film_thickness>
                float inputs:thin_film_weight.connect = </MaterialX/Materials/Ketchup.inputs:thin_film_weight>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/Ketchup.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/Ketchup.inputs:transmission_depth>
                float inputs:transmission_dispersion_abbe_number.connect = </MaterialX/Materials/Ketchup.inputs:transmission_dispersion_abbe_number>
                float inputs:transmission_dispersion_scale.connect = </MaterialX/Materials/Ketchup.inputs:transmission_dispersion_scale>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/Ketchup.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/Ketchup.inputs:transmission_scatter_anisotropy>
                float inputs:transmission_weight.connect = </MaterialX/Materials/Ketchup.inputs:transmission_weight>
            }

            def "root_graph" (
                prepend references = </MaterialX/NodeGraphs/root_graph>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "open_pbr_surface_surfaceshader"
        {
            uniform token info:id = "ND_open_pbr_surface_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "root_graph"
        {
            float3 outputs:out.connect = </MaterialX/NodeGraphs/root_graph/Nworld.outputs:out>
            float3 outputs:out2.connect = </MaterialX/NodeGraphs/root_graph/Nworld.outputs:out>
            float3 outputs:out3.connect = </MaterialX/NodeGraphs/root_graph/Tworld.outputs:out>
            float3 outputs:out4.connect = </MaterialX/NodeGraphs/root_graph/Tworld.outputs:out>

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/Ketchup>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

