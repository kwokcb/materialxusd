#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/Examples\\StandardSurface\\standard_surface_brick_procedural_converted.mtlx, D:\\work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "M_BrickPattern" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_BrickPattern/N_StandardSurface.outputs:surface>

            def Shader "N_StandardSurface" (
                prepend references = </MaterialX/Shaders/N_StandardSurface>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_BrickPattern.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_BrickPattern/NG_BrickPattern.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_BrickPattern.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_BrickPattern.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_BrickPattern.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_BrickPattern.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_BrickPattern.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/M_BrickPattern/NG_BrickPattern.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_BrickPattern.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_BrickPattern.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_BrickPattern.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_BrickPattern.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_BrickPattern.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_BrickPattern.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_BrickPattern.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_BrickPattern.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_BrickPattern.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_BrickPattern/NG_BrickPattern.outputs:specular_roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_BrickPattern.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_BrickPattern.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_BrickPattern.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_BrickPattern.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_BrickPattern.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_BrickPattern.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_BrickPattern.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_BrickPattern.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_BrickPattern.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_BrickPattern.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_BrickPattern.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_BrickPattern.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_BrickPattern.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_BrickPattern.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_BrickPattern.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_BrickPattern.inputs:transmission_scatter_anisotropy>
            }

            def "NG_BrickPattern" (
                prepend references = </MaterialX/NodeGraphs/NG_BrickPattern>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "N_StandardSurface"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "NG_BrickPattern"
        {
            color3f inputs:brick_color = (0.661876, 0.19088, 0) (
                displayGroup = "Color"
                displayName = "Brick Color"
            )
            float inputs:dirt_amount = 0.248 (
                displayGroup = "Dirt"
                displayName = "Dirt Amount"
            )
            color3f inputs:dirt_color = (0.56372, 0.56372, 0.56372) (
                displayGroup = "Dirt"
                displayName = "Dirt Color"
            )
            float inputs:hue_variation = 0.083 (
                displayGroup = "Color"
                displayName = "Hue Variation"
            )
            float inputs:roughness_amount = 0.853 (
                displayGroup = "Roughness"
                displayName = "Roughness Amount"
            )
            float inputs:uvtiling = 3 (
                displayGroup = "Texturing"
                displayName = "UV Tiling"
            )
            float inputs:value_variation = 0.787 (
                displayGroup = "Color"
                displayName = "Value Variation"
            )
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_clamp_0.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_normalmap_3.outputs:out>
            float outputs:specular_roughness_output.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_1.outputs:out>

            def Shader "node_multiply_5"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_mix_6.outputs:out>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_7.outputs:out>
                color3f outputs:out
            }

            def Shader "node_mix_8"
            {
                uniform token info:id = "ND_mix_color3"
                color3f inputs:bg.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_9.outputs:out>
                color3f inputs:fg.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_5.outputs:out>
                float inputs:mix.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_10.outputs:out>
                color3f outputs:out
            }

            def Shader "node_color_11"
            {
                uniform token info:id = "ND_constant_color3"
                color3f inputs:value = (0.263273, 0.263273, 0.263273)
                color3f outputs:out
            }

            def Shader "node_multiply_9"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_color_11.outputs:out>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_7.outputs:out>
                color3f outputs:out
            }

            def Shader "node_rgbtohsv_12"
            {
                uniform token info:id = "ND_rgbtohsv_color3"
                color3f inputs:in.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:brick_color>
                color3f outputs:out
            }

            def Shader "node_combine3_color3_13"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_14.outputs:out>
                float inputs:in2 = 0
                float inputs:in3.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_15.outputs:out>
                color3f outputs:out
            }

            def Shader "node_add_16"
            {
                uniform token info:id = "ND_add_color3"
                color3f inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_combine3_color3_13.outputs:out>
                color3f inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_rgbtohsv_12.outputs:out>
                color3f outputs:out
            }

            def Shader "node_hsvtorgb_17"
            {
                uniform token info:id = "ND_hsvtorgb_color3"
                color3f inputs:in.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_add_16.outputs:out>
                color3f outputs:out
            }

            def Shader "node_subtract_18"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_add_19.outputs:out>
                float inputs:in2 = 0.35
                float outputs:out
            }

            def Shader "node_multiply_14"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_subtract_18.outputs:out>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:hue_variation>
                float outputs:out
            }

            def Shader "node_multiply_15"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_add_19.outputs:out>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_20.outputs:out>
                float outputs:out
            }

            def Shader "node_clamp_0"
            {
                uniform token info:id = "ND_clamp_color3FA"
                color3f inputs:in.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_mix_8.outputs:out>
                color3f outputs:out
            }

            def Shader "node_multiply_1"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_divide_21.outputs:out>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_22.outputs:out>
                float outputs:out
            }

            def Shader "node_max_1"
            {
                uniform token info:id = "ND_max_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_10.outputs:out>
                float inputs:in2 = 0.00001
                float outputs:out
            }

            def Shader "node_divide_21"
            {
                uniform token info:id = "ND_divide_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:roughness_amount>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_max_1.outputs:out>
                float outputs:out
            }

            def Shader "node_mix_6"
            {
                uniform token info:id = "ND_mix_color3"
                color3f inputs:bg.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_hsvtorgb_17.outputs:out>
                color3f inputs:fg.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:dirt_color>
                float inputs:mix.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_23.outputs:out>
                color3f outputs:out
            }

            def Shader "node_multiply_23"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:dirt_amount>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_24.outputs:out>
                float outputs:out
            }

            def Shader "node_multiply_25"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:hue_variation>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_26.outputs:out>
                float outputs:out
            }

            def Shader "node_add_19"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_multiply_25.outputs:out>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_7.outputs:out>
                float outputs:out
            }

            def Shader "node_multiply_20"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:value_variation>
                float inputs:in2.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_float_26.outputs:out>
                float outputs:out
            }

            def Shader "node_normalmap_3"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_tiledimage_vector3_27.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_BrickPattern/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_BrickPattern/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "node_convert_1"
            {
                uniform token info:id = "ND_convert_float_vector2"
                float inputs:in.connect = </MaterialX/NodeGraphs/NG_BrickPattern.inputs:uvtiling>
                float2 outputs:out
            }

            def Shader "node_tiledimage_vector3_27"
            {
                uniform token info:id = "ND_tiledimage_vector3"
                asset inputs:file = @D:\work\materialx\materialxusd\tests\resources\Images\brick_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BrickPattern/UV0.outputs:out>
                float2 inputs:uvtiling.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_convert_1.outputs:out>
                float3 outputs:out
            }

            def Shader "node_tiledimage_float_22"
            {
                uniform token info:id = "ND_tiledimage_float"
                asset inputs:file = @D:\work\materialx\materialxusd\tests\resources\Images\brick_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BrickPattern/UV0.outputs:out>
                float2 inputs:uvtiling.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_convert_1.outputs:out>
                float outputs:out
            }

            def Shader "node_tiledimage_float_10"
            {
                uniform token info:id = "ND_tiledimage_float"
                asset inputs:file = @D:\work\materialx\materialxusd\tests\resources\Images\brick_mask.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BrickPattern/UV0.outputs:out>
                float2 inputs:uvtiling.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_convert_1.outputs:out>
                float outputs:out
            }

            def Shader "node_tiledimage_float_7"
            {
                uniform token info:id = "ND_tiledimage_float"
                asset inputs:file = @D:\work\materialx\materialxusd\tests\resources\Images\brick_base_gray.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BrickPattern/UV0.outputs:out>
                float2 inputs:uvtiling.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_convert_1.outputs:out>
                float outputs:out
            }

            def Shader "node_tiledimage_float_26"
            {
                uniform token info:id = "ND_tiledimage_float"
                asset inputs:file = @D:\work\materialx\materialxusd\tests\resources\Images\brick_variation_mask.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BrickPattern/UV0.outputs:out>
                float2 inputs:uvtiling.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_convert_1.outputs:out>
                float outputs:out
            }

            def Shader "node_tiledimage_float_24"
            {
                uniform token info:id = "ND_tiledimage_float"
                asset inputs:file = @D:\work\materialx\materialxusd\tests\resources\Images\brick_dirt_mask.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BrickPattern/UV0.outputs:out>
                float2 inputs:uvtiling.connect = </MaterialX/NodeGraphs/NG_BrickPattern/node_convert_1.outputs:out>
                float outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/M_BrickPattern>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

