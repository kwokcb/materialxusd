#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/Examples/StandardSurface/standard_surface_chess_set_converted.mtlx, /Users/bernardkwok/work/materialxusd/tests/data/sphere.usd, /Users/bernardkwok/work/materialxusd/tests/data/san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "M_Bishop_B" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Bishop_B/Bishop_B.outputs:surface>

            def Shader "Bishop_B" (
                prepend references = </MaterialX/Shaders/Bishop_B>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Bishop_B.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Bishop_B/NG_BishopBlack.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Bishop_B.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Bishop_B.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Bishop_B.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Bishop_B.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Bishop_B/NG_BishopBlack.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Bishop_B/NG_BishopBlack.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Bishop_B.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Bishop_B.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Bishop_B.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Bishop_B.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Bishop_B.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Bishop_B.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Bishop_B.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Bishop_B.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Bishop_B.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Bishop_B/NG_BishopBlack.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Bishop_B.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Bishop_B.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Bishop_B/NG_BishopBlack.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Bishop_B/NG_BishopBlack.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Bishop_B.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Bishop_B.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Bishop_B.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Bishop_B.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Bishop_B.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Bishop_B.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Bishop_B.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Bishop_B.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Bishop_B.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Bishop_B.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Bishop_B.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Bishop_B.inputs:transmission_scatter_anisotropy>
            }

            def "NG_BishopBlack" (
                prepend references = </MaterialX/NodeGraphs/NG_BishopBlack>
            )
            {
            }
        }

        def Material "M_Bishop_W" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Bishop_W/Bishop_W.outputs:surface>

            def Shader "Bishop_W" (
                prepend references = </MaterialX/Shaders/Bishop_W>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Bishop_W.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Bishop_W/NG_BishopWhite.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Bishop_W.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Bishop_W.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Bishop_W.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Bishop_W.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Bishop_W/NG_BishopWhite.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Bishop_W/NG_BishopWhite.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Bishop_W.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Bishop_W.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Bishop_W.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Bishop_W.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Bishop_W.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Bishop_W.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Bishop_W.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Bishop_W.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Bishop_W.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Bishop_W/NG_BishopWhite.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Bishop_W.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Bishop_W.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Bishop_W/NG_BishopWhite.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Bishop_W/NG_BishopWhite.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Bishop_W.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Bishop_W.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Bishop_W.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Bishop_W.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Bishop_W.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Bishop_W.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Bishop_W.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Bishop_W.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Bishop_W.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Bishop_W.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Bishop_W.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Bishop_W.inputs:transmission_scatter_anisotropy>
            }

            def "NG_BishopWhite" (
                prepend references = </MaterialX/NodeGraphs/NG_BishopWhite>
            )
            {
            }
        }

        def Material "M_Castle_B" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Castle_B/Castle_B.outputs:surface>

            def Shader "Castle_B" (
                prepend references = </MaterialX/Shaders/Castle_B>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Castle_B.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Castle_B/NG_CastleBlack.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Castle_B.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Castle_B.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Castle_B.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Castle_B.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Castle_B.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Castle_B/NG_CastleBlack.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Castle_B/NG_CastleBlack.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Castle_B.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Castle_B.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Castle_B.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Castle_B.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Castle_B.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Castle_B.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Castle_B.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Castle_B.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Castle_B.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Castle_B/NG_CastleBlack.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Castle_B.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Castle_B.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Castle_B/NG_CastleBlack.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Castle_B/NG_CastleBlack.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Castle_B.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Castle_B.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Castle_B.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Castle_B.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Castle_B.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Castle_B.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Castle_B.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Castle_B.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Castle_B.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Castle_B.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Castle_B.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Castle_B.inputs:transmission_scatter_anisotropy>
            }

            def "NG_CastleBlack" (
                prepend references = </MaterialX/NodeGraphs/NG_CastleBlack>
            )
            {
            }
        }

        def Material "M_Castle_W" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Castle_W/Castle_W.outputs:surface>

            def Shader "Castle_W" (
                prepend references = </MaterialX/Shaders/Castle_W>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Castle_W.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Castle_W/NG_CastleWhite.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Castle_W.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Castle_W.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Castle_W.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Castle_W.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Castle_W.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Castle_W/NG_CastleWhite.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Castle_W/NG_CastleWhite.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Castle_W.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Castle_W.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Castle_W.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Castle_W.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Castle_W.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Castle_W.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Castle_W.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Castle_W.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Castle_W.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Castle_W/NG_CastleWhite.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Castle_W.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Castle_W.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Castle_W/NG_CastleWhite.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Castle_W/NG_CastleWhite.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Castle_W.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Castle_W.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Castle_W.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Castle_W.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Castle_W.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Castle_W.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Castle_W.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Castle_W.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Castle_W.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Castle_W.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Castle_W.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Castle_W.inputs:transmission_scatter_anisotropy>
            }

            def "NG_CastleWhite" (
                prepend references = </MaterialX/NodeGraphs/NG_CastleWhite>
            )
            {
            }
        }

        def Material "M_Chessboard" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Chessboard/Chessboard.outputs:surface>

            def Shader "Chessboard" (
                prepend references = </MaterialX/Shaders/Chessboard>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Chessboard.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Chessboard/NG_ChessBoard.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Chessboard.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Chessboard.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Chessboard.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Chessboard.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Chessboard.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Chessboard/NG_ChessBoard.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Chessboard/NG_ChessBoard.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Chessboard.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Chessboard.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Chessboard.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Chessboard.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Chessboard.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Chessboard.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Chessboard.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Chessboard.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Chessboard.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Chessboard/NG_ChessBoard.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Chessboard.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Chessboard.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Chessboard/NG_ChessBoard.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Chessboard/NG_ChessBoard.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Chessboard.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Chessboard.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Chessboard.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Chessboard.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Chessboard.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Chessboard.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Chessboard.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Chessboard.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Chessboard.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Chessboard.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Chessboard.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Chessboard.inputs:transmission_scatter_anisotropy>
            }

            def "NG_ChessBoard" (
                prepend references = </MaterialX/NodeGraphs/NG_ChessBoard>
            )
            {
            }
        }

        def Material "M_King_B" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_King_B/King_B.outputs:surface>

            def Shader "King_B" (
                prepend references = </MaterialX/Shaders/King_B>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_King_B.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_King_B/NG_KingBlack.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_King_B.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_King_B.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_King_B.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_King_B.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_King_B.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_King_B.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_King_B.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_King_B.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_King_B.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_King_B.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_King_B.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_King_B.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_King_B/NG_KingBlack.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_King_B/NG_KingBlack.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_King_B.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_King_B.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_King_B.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_King_B.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_King_B.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_King_B.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_King_B.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_King_B.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_King_B.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_King_B/NG_KingBlack.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_King_B/NG_KingBlack.outputs:subsurface_output>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_King_B.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_King_B/NG_KingBlack.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_King_B/NG_KingBlack.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_King_B.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_King_B.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_King_B.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_King_B.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_King_B.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_King_B.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_King_B.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_King_B.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_King_B.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_King_B.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_King_B.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_King_B.inputs:transmission_scatter_anisotropy>
            }

            def "NG_KingBlack" (
                prepend references = </MaterialX/NodeGraphs/NG_KingBlack>
            )
            {
            }
        }

        def Material "M_King_W" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_King_W/King_W.outputs:surface>

            def Shader "King_W" (
                prepend references = </MaterialX/Shaders/King_W>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_King_W.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_King_W/NG_KingWhite.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_King_W.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_King_W.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_King_W.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_King_W.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_King_W.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_King_W.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_King_W.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_King_W.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_King_W.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_King_W.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_King_W.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_King_W.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_King_W/NG_KingWhite.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_King_W/NG_KingWhite.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_King_W.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_King_W.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_King_W.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_King_W.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_King_W.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_King_W.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_King_W.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_King_W.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_King_W.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_King_W/NG_KingWhite.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_King_W/NG_KingWhite.outputs:subsurface_output>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_King_W.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_King_W/NG_KingWhite.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_King_W/NG_KingWhite.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_King_W.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_King_W.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_King_W.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_King_W.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_King_W.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_King_W.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_King_W.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_King_W.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_King_W.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_King_W.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_King_W.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_King_W.inputs:transmission_scatter_anisotropy>
            }

            def "NG_KingWhite" (
                prepend references = </MaterialX/NodeGraphs/NG_KingWhite>
            )
            {
            }
        }

        def Material "M_Knight_B" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Knight_B/Knight_B.outputs:surface>

            def Shader "Knight_B" (
                prepend references = </MaterialX/Shaders/Knight_B>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Knight_B.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Knight_B/NG_KnightBlack.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Knight_B.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Knight_B.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Knight_B.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Knight_B.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Knight_B.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Knight_B.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Knight_B/NG_KnightBlack.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Knight_B.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Knight_B.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Knight_B.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Knight_B.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Knight_B.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Knight_B.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Knight_B.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Knight_B.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Knight_B.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Knight_B/NG_KnightBlack.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Knight_B.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Knight_B.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Knight_B/NG_KnightBlack.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Knight_B/NG_KnightBlack.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Knight_B.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Knight_B.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Knight_B.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Knight_B.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Knight_B.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Knight_B.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Knight_B.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Knight_B.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Knight_B.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Knight_B.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Knight_B.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Knight_B.inputs:transmission_scatter_anisotropy>
            }

            def "NG_KnightBlack" (
                prepend references = </MaterialX/NodeGraphs/NG_KnightBlack>
            )
            {
            }
        }

        def Material "M_Knight_W" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Knight_W/Knight_W.outputs:surface>

            def Shader "Knight_W" (
                prepend references = </MaterialX/Shaders/Knight_W>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Knight_W.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Knight_W/NG_KnightWhite.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Knight_W.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Knight_W.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Knight_W.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Knight_W.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Knight_W.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Knight_W.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Knight_W/NG_KnightWhite.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Knight_W.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Knight_W.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Knight_W.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Knight_W.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Knight_W.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Knight_W.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Knight_W.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Knight_W.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Knight_W.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Knight_W/NG_KnightWhite.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Knight_W.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Knight_W.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Knight_W/NG_KnightWhite.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Knight_W/NG_KnightWhite.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Knight_W.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Knight_W.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Knight_W.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Knight_W.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Knight_W.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Knight_W.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Knight_W.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Knight_W.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Knight_W.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Knight_W.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Knight_W.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Knight_W.inputs:transmission_scatter_anisotropy>
            }

            def "NG_KnightWhite" (
                prepend references = </MaterialX/NodeGraphs/NG_KnightWhite>
            )
            {
            }
        }

        def Material "M_Pawn_Body_B" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Pawn_Body_B/Pawn_Body_B.outputs:surface>

            def Shader "Pawn_Body_B" (
                prepend references = </MaterialX/Shaders/Pawn_Body_B>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Pawn_Body_B/NG_PawnBodyBlack.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Pawn_Body_B/NG_PawnBodyBlack.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Pawn_Body_B/NG_PawnBodyBlack.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Pawn_Body_B/NG_PawnBodyBlack.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Pawn_Body_B/NG_PawnBodyBlack.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Pawn_Body_B/NG_PawnBodyBlack.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_B.inputs:transmission_scatter_anisotropy>
            }

            def "NG_PawnBodyBlack" (
                prepend references = </MaterialX/NodeGraphs/NG_PawnBodyBlack>
            )
            {
            }
        }

        def Material "M_Pawn_Body_W" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Pawn_Body_W/Pawn_Body_W.outputs:surface>

            def Shader "Pawn_Body_W" (
                prepend references = </MaterialX/Shaders/Pawn_Body_W>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Pawn_Body_W/NG_PawnBodyWhite.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Pawn_Body_W/NG_PawnBodyWhite.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Pawn_Body_W/NG_PawnBodyWhite.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Pawn_Body_W/NG_PawnBodyWhite.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Pawn_Body_W/NG_PawnBodyWhite.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Pawn_Body_W/NG_PawnBodyWhite.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Pawn_Body_W.inputs:transmission_scatter_anisotropy>
            }

            def "NG_PawnBodyWhite" (
                prepend references = </MaterialX/NodeGraphs/NG_PawnBodyWhite>
            )
            {
            }
        }

        def Material "M_Pawn_Top_B" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color = (1, 1, 1)
            color3f inputs:subsurface_radius = (1, 1, 1)
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (0.2995, 0.5, 0.450276)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Pawn_Top_B/Pawn_Top_B.outputs:surface>

            def Shader "Pawn_Top_B" (
                prepend references = </MaterialX/Shaders/Pawn_Top_B>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Pawn_Top_B/NG_PawnTopBlack.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Pawn_Top_B/NG_PawnTopBlack.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_B.inputs:transmission_scatter_anisotropy>
            }

            def "NG_PawnTopBlack" (
                prepend references = </MaterialX/NodeGraphs/NG_PawnTopBlack>
            )
            {
            }
        }

        def Material "M_Pawn_Top_W" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color = (1, 1, 1)
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color = (1, 1, 1)
            color3f inputs:subsurface_radius = (1, 1, 1)
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission = 1
            color3f inputs:transmission_color = (1, 1, 0.828)
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Pawn_Top_W/Pawn_Top_W.outputs:surface>

            def Shader "Pawn_Top_W" (
                prepend references = </MaterialX/Shaders/Pawn_Top_W>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:base_color>
                float inputs:coat.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:metalness>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Pawn_Top_W/NG_PawnTopWhite.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Pawn_Top_W/NG_PawnTopWhite.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:subsurface>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:subsurface_color>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:subsurface_radius>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Pawn_Top_W.inputs:transmission_scatter_anisotropy>
            }

            def "NG_PawnTopWhite" (
                prepend references = </MaterialX/NodeGraphs/NG_PawnTopWhite>
            )
            {
            }
        }

        def Material "M_Queen_B" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.003
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Queen_B/Queen_B.outputs:surface>

            def Shader "Queen_B" (
                prepend references = </MaterialX/Shaders/Queen_B>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Queen_B.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Queen_B/NG_QueenBlack.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Queen_B.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Queen_B.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Queen_B.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Queen_B.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Queen_B.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Queen_B/NG_QueenBlack.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Queen_B/NG_QueenBlack.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Queen_B.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Queen_B.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Queen_B.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Queen_B.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Queen_B.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Queen_B.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Queen_B.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Queen_B.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Queen_B.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Queen_B/NG_QueenBlack.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Queen_B/NG_QueenBlack.outputs:subsurface_output>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Queen_B.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Queen_B/NG_QueenBlack.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Queen_B/NG_QueenBlack.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Queen_B.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Queen_B.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Queen_B.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Queen_B.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Queen_B.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Queen_B.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Queen_B.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Queen_B.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Queen_B.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Queen_B.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Queen_B.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Queen_B.inputs:transmission_scatter_anisotropy>
            }

            def "NG_QueenBlack" (
                prepend references = </MaterialX/NodeGraphs/NG_QueenBlack>
            )
            {
            }
        }

        def Material "M_Queen_W" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:base
            color3f inputs:base_color
            float inputs:coat
            float inputs:coat_affect_color
            float inputs:coat_affect_roughness
            float inputs:coat_anisotropy
            color3f inputs:coat_color
            float inputs:coat_IOR
            float3 inputs:coat_normal
            float inputs:coat_rotation
            float inputs:coat_roughness
            float inputs:diffuse_roughness
            float inputs:emission
            color3f inputs:emission_color
            float inputs:metalness
            float3 inputs:normal
            color3f inputs:opacity
            float inputs:sheen
            color3f inputs:sheen_color
            float inputs:sheen_roughness
            float inputs:specular
            float inputs:specular_anisotropy
            color3f inputs:specular_color
            float inputs:specular_IOR
            float inputs:specular_rotation
            float inputs:specular_roughness
            float inputs:subsurface
            float inputs:subsurface_anisotropy
            color3f inputs:subsurface_color
            color3f inputs:subsurface_radius
            float inputs:subsurface_scale = 0.001
            float3 inputs:tangent
            float inputs:thin_film_IOR
            float inputs:thin_film_thickness
            bool inputs:thin_walled
            float inputs:transmission
            color3f inputs:transmission_color
            float inputs:transmission_depth
            float inputs:transmission_dispersion
            float inputs:transmission_extra_roughness
            color3f inputs:transmission_scatter
            float inputs:transmission_scatter_anisotropy
            token outputs:mtlx:surface.connect = </MaterialX/Materials/M_Queen_W/Queen_W.outputs:surface>

            def Shader "Queen_W" (
                prepend references = </MaterialX/Shaders/Queen_W>
            )
            {
                float inputs:base.connect = </MaterialX/Materials/M_Queen_W.inputs:base>
                color3f inputs:base_color.connect = </MaterialX/Materials/M_Queen_W/NG_QueenWhite.outputs:base_color_output>
                float inputs:coat.connect = </MaterialX/Materials/M_Queen_W.inputs:coat>
                float inputs:coat_affect_color.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_affect_color>
                float inputs:coat_affect_roughness.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_affect_roughness>
                float inputs:coat_anisotropy.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_anisotropy>
                color3f inputs:coat_color.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_color>
                float inputs:coat_IOR.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_IOR>
                float3 inputs:coat_normal.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_normal>
                float inputs:coat_rotation.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_rotation>
                float inputs:coat_roughness.connect = </MaterialX/Materials/M_Queen_W.inputs:coat_roughness>
                float inputs:diffuse_roughness.connect = </MaterialX/Materials/M_Queen_W.inputs:diffuse_roughness>
                float inputs:emission.connect = </MaterialX/Materials/M_Queen_W.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/M_Queen_W.inputs:emission_color>
                float inputs:metalness.connect = </MaterialX/Materials/M_Queen_W/NG_QueenWhite.outputs:metalness_output>
                float3 inputs:normal.connect = </MaterialX/Materials/M_Queen_W/NG_QueenWhite.outputs:normal_output>
                color3f inputs:opacity.connect = </MaterialX/Materials/M_Queen_W.inputs:opacity>
                float inputs:sheen.connect = </MaterialX/Materials/M_Queen_W.inputs:sheen>
                color3f inputs:sheen_color.connect = </MaterialX/Materials/M_Queen_W.inputs:sheen_color>
                float inputs:sheen_roughness.connect = </MaterialX/Materials/M_Queen_W.inputs:sheen_roughness>
                float inputs:specular.connect = </MaterialX/Materials/M_Queen_W.inputs:specular>
                float inputs:specular_anisotropy.connect = </MaterialX/Materials/M_Queen_W.inputs:specular_anisotropy>
                color3f inputs:specular_color.connect = </MaterialX/Materials/M_Queen_W.inputs:specular_color>
                float inputs:specular_IOR.connect = </MaterialX/Materials/M_Queen_W.inputs:specular_IOR>
                float inputs:specular_rotation.connect = </MaterialX/Materials/M_Queen_W.inputs:specular_rotation>
                float inputs:specular_roughness.connect = </MaterialX/Materials/M_Queen_W/NG_QueenWhite.outputs:roughness_output>
                float inputs:subsurface.connect = </MaterialX/Materials/M_Queen_W/NG_QueenWhite.outputs:subsurface_output>
                float inputs:subsurface_anisotropy.connect = </MaterialX/Materials/M_Queen_W.inputs:subsurface_anisotropy>
                color3f inputs:subsurface_color.connect = </MaterialX/Materials/M_Queen_W/NG_QueenWhite.outputs:base_color_output>
                color3f inputs:subsurface_radius.connect = </MaterialX/Materials/M_Queen_W/NG_QueenWhite.outputs:base_color_output>
                float inputs:subsurface_scale.connect = </MaterialX/Materials/M_Queen_W.inputs:subsurface_scale>
                float3 inputs:tangent.connect = </MaterialX/Materials/M_Queen_W.inputs:tangent>
                float inputs:thin_film_IOR.connect = </MaterialX/Materials/M_Queen_W.inputs:thin_film_IOR>
                float inputs:thin_film_thickness.connect = </MaterialX/Materials/M_Queen_W.inputs:thin_film_thickness>
                bool inputs:thin_walled.connect = </MaterialX/Materials/M_Queen_W.inputs:thin_walled>
                float inputs:transmission.connect = </MaterialX/Materials/M_Queen_W.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/M_Queen_W.inputs:transmission_color>
                float inputs:transmission_depth.connect = </MaterialX/Materials/M_Queen_W.inputs:transmission_depth>
                float inputs:transmission_dispersion.connect = </MaterialX/Materials/M_Queen_W.inputs:transmission_dispersion>
                float inputs:transmission_extra_roughness.connect = </MaterialX/Materials/M_Queen_W.inputs:transmission_extra_roughness>
                color3f inputs:transmission_scatter.connect = </MaterialX/Materials/M_Queen_W.inputs:transmission_scatter>
                float inputs:transmission_scatter_anisotropy.connect = </MaterialX/Materials/M_Queen_W.inputs:transmission_scatter_anisotropy>
            }

            def "NG_QueenWhite" (
                prepend references = </MaterialX/NodeGraphs/NG_QueenWhite>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "Bishop_B"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Bishop_W"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Castle_B"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Castle_W"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Chessboard"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "King_B"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "King_W"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Knight_B"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Knight_W"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Pawn_Body_B"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Pawn_Body_W"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Pawn_Top_B"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Pawn_Top_W"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Queen_B"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }

        def Shader "Queen_W"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "NG_BishopBlack"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_BishopBlack/diffuse2.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_BishopBlack/metallic2.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_BishopBlack/mtlxnormalmap4.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_BishopBlack/roughness2.outputs:out>

            def Shader "diffuse2"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/bishop_black_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopBlack/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic2"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/bishop_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness2"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/bishop_black_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal2"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/bishop_black_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopBlack/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap4"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_BishopBlack/normal2.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_BishopBlack/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_BishopBlack/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_BishopWhite"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_BishopWhite/diffuse3.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_BishopWhite/metallic3.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_BishopWhite/mtlxnormalmap5.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_BishopWhite/roughness3.outputs:out>

            def Shader "diffuse3"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/bishop_white_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopWhite/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic3"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/bishop_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness3"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/bishop_white_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal3"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/bishop_white_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_BishopWhite/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap5"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_BishopWhite/normal3.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_BishopWhite/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_BishopWhite/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_CastleBlack"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_CastleBlack/diffuse6.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_CastleBlack/metallic6.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_CastleBlack/mtlxnormalmap8.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_CastleBlack/roughness6.outputs:out>

            def Shader "diffuse6"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/castle_black_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleBlack/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic6"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/castle_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness6"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/castle_shared_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal6"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/castle_shared_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleBlack/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap8"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_CastleBlack/normal6.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_CastleBlack/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_CastleBlack/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_CastleWhite"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_CastleWhite/diffuse7.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_CastleWhite/metallic7.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_CastleWhite/mtlxnormalmap9.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_CastleWhite/roughness7.outputs:out>

            def Shader "diffuse7"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/castle_white_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleWhite/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic7"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/castle_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness7"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/castle_shared_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal7"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/castle_shared_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_CastleWhite/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap9"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_CastleWhite/normal7.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_CastleWhite/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_CastleWhite/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_ChessBoard"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_ChessBoard/mtlximage13.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_ChessBoard/mtlximage16.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_ChessBoard/mtlxnormalmap12.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_ChessBoard/mtlximage17.outputs:out>

            def Shader "mtlximage13"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/chessboard_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_ChessBoard/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlximage16"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/chessboard_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_ChessBoard/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage17"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/chessboard_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_ChessBoard/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage15"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/chessboard_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_ChessBoard/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap12"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_ChessBoard/mtlximage15.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_ChessBoard/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_ChessBoard/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_KingBlack"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_KingBlack/mtlximage1.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_KingBlack/mtlximage2.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_KingBlack/mtlxnormalmap1.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_KingBlack/mtlximage4.outputs:out>
            float outputs:subsurface_output.connect = </MaterialX/NodeGraphs/NG_KingBlack/mtlximage3.outputs:out>

            def Shader "mtlximage1"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/king_black_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingBlack/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlximage2"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/king_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage4"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/king_black_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage3"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/king_shared_scattering.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage6"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/king_black_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingBlack/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_KingBlack/mtlximage6.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_KingBlack/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_KingBlack/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_KingWhite"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_KingWhite/mtlximage7.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_KingWhite/mtlximage10.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_KingWhite/mtlxnormalmap11.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_KingWhite/mtlximage11.outputs:out>
            float outputs:subsurface_output.connect = </MaterialX/NodeGraphs/NG_KingWhite/mtlximage8.outputs:out>

            def Shader "mtlximage7"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/king_white_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingWhite/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlximage10"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/king_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage11"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/king_white_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage8"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/king_shared_scattering.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage9"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/king_white_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KingWhite/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap11"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_KingWhite/mtlximage9.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_KingWhite/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_KingWhite/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_KnightBlack"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_KnightBlack/diffuse4.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_KnightBlack/mtlxnormalmap6.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_KnightBlack/roughness4.outputs:out>

            def Shader "diffuse4"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/knight_black_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KnightBlack/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "roughness4"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/knight_black_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KnightBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal4"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/knight_black_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KnightBlack/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap6"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_KnightBlack/normal4.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_KnightBlack/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_KnightBlack/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_KnightWhite"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_KnightWhite/diffuse5.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_KnightWhite/mtlxnormalmap7.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_KnightWhite/roughness5.outputs:out>

            def Shader "diffuse5"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/knight_white_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KnightWhite/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "roughness5"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/knight_white_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KnightWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal5"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/knight_white_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_KnightWhite/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap7"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_KnightWhite/normal5.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_KnightWhite/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_KnightWhite/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_PawnBodyBlack"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/diffuse9.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/metallic9.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/mtlxnormalmap13.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/roughness9.outputs:out>

            def Shader "diffuse9"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/pawn_black_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic9"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/pawn_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness9"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/pawn_shared_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal9"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/pawn_shared_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap13"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/normal9.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_PawnBodyBlack/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_PawnBodyWhite"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/diffuse8.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/metallic8.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/mtlxnormalmap10.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/roughness8.outputs:out>

            def Shader "diffuse8"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/pawn_white_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic8"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/pawn_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness8"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/pawn_shared_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal8"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/pawn_shared_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap10"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/normal8.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_PawnBodyWhite/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_PawnTopBlack"
        {
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_PawnTopBlack/mtlxnormalmap14.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_PawnTopBlack/mtlximage19.outputs:out>

            def Shader "mtlximage19"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/pawn_shared_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnTopBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage18"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/pawn_shared_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnTopBlack/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap14"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_PawnTopBlack/mtlximage18.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_PawnTopBlack/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_PawnTopBlack/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_PawnTopWhite"
        {
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_PawnTopWhite/mtlxnormalmap15.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_PawnTopWhite/mtlximage21.outputs:out>

            def Shader "mtlximage21"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/pawn_shared_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnTopWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "mtlximage20"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/pawn_shared_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_PawnTopWhite/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap15"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_PawnTopWhite/mtlximage20.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_PawnTopWhite/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_PawnTopWhite/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_QueenBlack"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_QueenBlack/diffuse.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_QueenBlack/metallic.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_QueenBlack/mtlxnormalmap2.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_QueenBlack/roughness.outputs:out>
            float outputs:subsurface_output.connect = </MaterialX/NodeGraphs/NG_QueenBlack/sss.outputs:out>

            def Shader "diffuse"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/queen_black_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenBlack/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/queen_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/queen_black_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "sss"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/queen_shared_scattering.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenBlack/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/queen_black_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenBlack/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap2"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_QueenBlack/normal.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_QueenBlack/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_QueenBlack/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }

        def NodeGraph "NG_QueenWhite"
        {
            color3f outputs:base_color_output.connect = </MaterialX/NodeGraphs/NG_QueenWhite/diffuse1.outputs:out>
            float outputs:metalness_output.connect = </MaterialX/NodeGraphs/NG_QueenWhite/metallic1.outputs:out>
            float3 outputs:normal_output.connect = </MaterialX/NodeGraphs/NG_QueenWhite/mtlxnormalmap3.outputs:out>
            float outputs:roughness_output.connect = </MaterialX/NodeGraphs/NG_QueenWhite/roughness1.outputs:out>
            float outputs:subsurface_output.connect = </MaterialX/NodeGraphs/NG_QueenWhite/sss1.outputs:out>

            def Shader "diffuse1"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @chess_set/queen_white_base_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenWhite/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "metallic1"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/queen_shared_metallic.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "roughness1"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/queen_white_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "sss1"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @chess_set/queen_shared_scattering.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenWhite/UV0.outputs:out>
                float outputs:out
            }

            def Shader "normal1"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @chess_set/queen_white_normal.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_QueenWhite/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "mtlxnormalmap3"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/NG_QueenWhite/normal1.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/NG_QueenWhite/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/NG_QueenWhite/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }
    }

    def "Collections" (
        prepend apiSchemas = ["CollectionAPI:geom_1", "CollectionAPI:geom_2", "CollectionAPI:geom_3", "CollectionAPI:geom_4", "CollectionAPI:geom_5", "CollectionAPI:geom_6", "CollectionAPI:geom_7", "CollectionAPI:geom_8", "CollectionAPI:geom_9", "CollectionAPI:geom_10", "CollectionAPI:geom_11", "CollectionAPI:geom_12", "CollectionAPI:geom_13", "CollectionAPI:geom_14", "CollectionAPI:geom_15"]
    )
    {
        prepend rel collection:geom_1:includes = </MaterialX/Collections/Chessboard>
        prepend rel collection:geom_2:includes = </MaterialX/Collections/Bishop_B>
        prepend rel collection:geom_3:includes = </MaterialX/Collections/Bishop_W>
        prepend rel collection:geom_4:includes = </MaterialX/Collections/Castle_B>
        prepend rel collection:geom_5:includes = </MaterialX/Collections/Castle_W>
        prepend rel collection:geom_6:includes = </MaterialX/Collections/Knight_B>
        prepend rel collection:geom_7:includes = </MaterialX/Collections/Knight_W>
        prepend rel collection:geom_8:includes = </MaterialX/Collections/King_B>
        prepend rel collection:geom_9:includes = </MaterialX/Collections/King_W>
        prepend rel collection:geom_10:includes = </MaterialX/Collections/Pawn_Body_B>
        prepend rel collection:geom_11:includes = </MaterialX/Collections/Pawn_Top_B>
        prepend rel collection:geom_12:includes = </MaterialX/Collections/Pawn_Body_W>
        prepend rel collection:geom_13:includes = </MaterialX/Collections/Pawn_Top_W>
        prepend rel collection:geom_14:includes = </MaterialX/Collections/Queen_B>
        prepend rel collection:geom_15:includes = </MaterialX/Collections/Queen_W>
    }

    def "Looks"
    {
        def "L_ChessSet" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder properties = ["material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding", "material:binding"]
            rel material:binding = </MaterialX/Looks/L_ChessSet/Materials/Queen_W>

            def "Materials"
            {
                def "Chessboard" (
                    prepend references = </MaterialX/Materials/M_Chessboard>
                )
                {
                }

                def "Bishop_B" (
                    prepend references = </MaterialX/Materials/M_Bishop_B>
                )
                {
                }

                def "Bishop_W" (
                    prepend references = </MaterialX/Materials/M_Bishop_W>
                )
                {
                }

                def "Castle_B" (
                    prepend references = </MaterialX/Materials/M_Castle_B>
                )
                {
                }

                def "Castle_W" (
                    prepend references = </MaterialX/Materials/M_Castle_W>
                )
                {
                }

                def "Knight_B" (
                    prepend references = </MaterialX/Materials/M_Knight_B>
                )
                {
                }

                def "Knight_W" (
                    prepend references = </MaterialX/Materials/M_Knight_W>
                )
                {
                }

                def "King_B" (
                    prepend references = </MaterialX/Materials/M_King_B>
                )
                {
                }

                def "King_W" (
                    prepend references = </MaterialX/Materials/M_King_W>
                )
                {
                }

                def "Pawn_Body_B" (
                    prepend references = </MaterialX/Materials/M_Pawn_Body_B>
                )
                {
                }

                def "Pawn_Top_B" (
                    prepend references = </MaterialX/Materials/M_Pawn_Top_B>
                )
                {
                }

                def "Pawn_Body_W" (
                    prepend references = </MaterialX/Materials/M_Pawn_Body_W>
                )
                {
                }

                def "Pawn_Top_W" (
                    prepend references = </MaterialX/Materials/M_Pawn_Top_W>
                )
                {
                }

                def "Queen_B" (
                    prepend references = </MaterialX/Materials/M_Queen_B>
                )
                {
                }

                def "Queen_W" (
                    prepend references = </MaterialX/Materials/M_Queen_W>
                )
                {
                }
            }
        }
    }
}

def "ModelRoot" (
    prepend variantSets = "LookVariant"
)
{
    variantSet "LookVariant" = {
        "L_ChessSet" (
            prepend references = </MaterialX/Looks/L_ChessSet>
        ) {

        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @/Users/bernardkwok/work/materialxusd/tests/data/sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/M_Knight_B>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @/Users/bernardkwok/work/materialxusd/tests/data/san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @/Users/bernardkwok/work/materialxusd/tests/data/camera_sphere.usda@
    )
    {
    }
}

