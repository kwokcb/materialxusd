OpenShadingLanguage 1.00
# Compiled by oslc 1.13.3.0dev
# options: -q -ID:\Work\materialx\OSL_ILM\bin\shaders -o D:\Work\materialx\bernard_MaterialX_3\build\bin\resources\Materials\Examples\StandardSurface\standard_surface_chess_set\M_Castle_B.oso
shader M_Castle_B	%meta{string,mtlx_category,"surfacematerial"} %meta{string,mtlx_name,"M_Castle_B"} 
param	struct surfaceshader	backsurfaceshader			%read{2147483647,-1} %write{2147483647,-1} %struct{"surfaceshader"} %structfields{bsdf,edf,opacity} %structfieldtypes{"CCf"} %structnfields{3}
param	closure color	backsurfaceshader.bsdf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{0}
param	closure color	backsurfaceshader.edf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{1}
param	float	backsurfaceshader.opacity	1		%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{2}
param	vector	displacementshader1	0 0 0		%read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Nworld_space	"world"		%read{10,10} %write{2147483647,-1}
param	string	geomprop_Tworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Tworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_UV0_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Bworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Bworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	diffuse6_file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Materials/Examples/StandardSurface/chess_set/castle_black_base_color.jpg"		%meta{string,label,"Filename"} %meta{string,widget,"filename"}  %read{1,1} %write{2147483647,-1}
param	string	diffuse6_file_colorspace	""		%meta{string,widget,"colorspace"}  %read{2,2} %write{2147483647,-1}
param	string	diffuse6_layer	""		%meta{string,label,"Layer"}  %read{64,64} %write{2147483647,-1}
param	color	diffuse6_default	0 0 0		%meta{string,label,"Default Color"}  %read{58,60} %write{2147483647,-1}
param	string	diffuse6_uaddressmode	"periodic"		%meta{string,label,"Address Mode U"}  %read{29,64} %write{2147483647,-1}
param	string	diffuse6_vaddressmode	"periodic"		%meta{string,label,"Address Mode V"}  %read{44,64} %write{2147483647,-1}
param	string	diffuse6_filtertype	"linear"		%meta{string,label,"Filter Type"}  %read{64,64} %write{2147483647,-1}
param	string	diffuse6_framerange	""		%meta{string,label,"Frame Range"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	diffuse6_frameoffset	0		%meta{string,label,"Frame Offset"} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	diffuse6_frameendaction	"constant"		%meta{string,label,"Frame End Action"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	metallic6_file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Materials/Examples/StandardSurface/chess_set/castle_shared_metallic.jpg"		%meta{string,label,"Filename"} %meta{string,widget,"filename"}  %read{3,3} %write{2147483647,-1}
param	string	metallic6_file_colorspace	""		%meta{string,widget,"colorspace"}  %read{4,4} %write{2147483647,-1}
param	string	metallic6_layer	""		%meta{string,label,"Layer"}  %read{105,105} %write{2147483647,-1}
param	float	metallic6_default	0		%meta{string,label,"Default Color"} %meta{string,widget,"number"}  %read{99,101} %write{2147483647,-1}
param	string	metallic6_uaddressmode	"periodic"		%meta{string,label,"Address Mode U"}  %read{70,105} %write{2147483647,-1}
param	string	metallic6_vaddressmode	"periodic"		%meta{string,label,"Address Mode V"}  %read{85,105} %write{2147483647,-1}
param	string	metallic6_filtertype	"linear"		%meta{string,label,"Filter Type"}  %read{105,105} %write{2147483647,-1}
param	string	metallic6_framerange	""		%meta{string,label,"Frame Range"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	metallic6_frameoffset	0		%meta{string,label,"Frame Offset"} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	metallic6_frameendaction	"constant"		%meta{string,label,"Frame End Action"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	roughness6_file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Materials/Examples/StandardSurface/chess_set/castle_shared_roughness.jpg"		%meta{string,label,"Filename"} %meta{string,widget,"filename"}  %read{5,5} %write{2147483647,-1}
param	string	roughness6_file_colorspace	""		%meta{string,widget,"colorspace"}  %read{6,6} %write{2147483647,-1}
param	string	roughness6_layer	""		%meta{string,label,"Layer"}  %read{147,147} %write{2147483647,-1}
param	float	roughness6_default	0		%meta{string,label,"Default Color"} %meta{string,widget,"number"}  %read{141,143} %write{2147483647,-1}
param	string	roughness6_uaddressmode	"periodic"		%meta{string,label,"Address Mode U"}  %read{112,147} %write{2147483647,-1}
param	string	roughness6_vaddressmode	"periodic"		%meta{string,label,"Address Mode V"}  %read{127,147} %write{2147483647,-1}
param	string	roughness6_filtertype	"linear"		%meta{string,label,"Filter Type"}  %read{147,147} %write{2147483647,-1}
param	string	roughness6_framerange	""		%meta{string,label,"Frame Range"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	roughness6_frameoffset	0		%meta{string,label,"Frame Offset"} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	roughness6_frameendaction	"constant"		%meta{string,label,"Frame End Action"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	normal6_file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Materials/Examples/StandardSurface/chess_set/castle_shared_normal.jpg"		%meta{string,label,"Filename"} %meta{string,widget,"filename"}  %read{7,7} %write{2147483647,-1}
param	string	normal6_file_colorspace	""		%meta{string,widget,"colorspace"}  %read{8,8} %write{2147483647,-1}
param	string	normal6_layer	""		%meta{string,label,"Layer"}  %read{189,189} %write{2147483647,-1}
param	vector	normal6_default	0 0 0		%meta{string,label,"Default Color"}  %read{183,185} %write{2147483647,-1}
param	string	normal6_uaddressmode	"periodic"		%meta{string,label,"Address Mode U"}  %read{154,189} %write{2147483647,-1}
param	string	normal6_vaddressmode	"periodic"		%meta{string,label,"Address Mode V"}  %read{169,189} %write{2147483647,-1}
param	string	normal6_filtertype	"linear"		%meta{string,label,"Filter Type"}  %read{189,189} %write{2147483647,-1}
param	string	normal6_framerange	""		%meta{string,label,"Frame Range"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	normal6_frameoffset	0		%meta{string,label,"Frame Offset"} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	normal6_frameendaction	"constant"		%meta{string,label,"Frame End Action"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	mtlxnormalmap8_scale	1		%meta{string,widget,"number"}  %read{254,255} %write{2147483647,-1}
param	float	Castle_B_base	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Base"} %meta{string,page,"Base"} %meta{string,help,"Multiplier on the intensity of the diffuse reflection."} %meta{string,widget,"number"}  %read{301,736} %write{2147483647,-1}
param	float	Castle_B_diffuse_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Diffuse Roughness"} %meta{string,page,"Base"} %meta{int,uiadvanced,1} %meta{string,help,"Roughness of the diffuse reflection. Higher values cause the surface to appear flatter and darker."} %meta{string,widget,"number"}  %read{735,735} %write{2147483647,-1}
param	float	Castle_B_specular	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular"} %meta{string,page,"Specular"} %meta{string,help,"Multiplier on the intensity of the specular reflection."} %meta{string,widget,"number"}  %read{302,708} %write{2147483647,-1}
param	color	Castle_B_specular_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Specular Color"} %meta{string,page,"Specular"} %meta{string,help,"Color tint on the specular reflection."}  %read{302,706} %write{2147483647,-1}
param	float	Castle_B_specular_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Index of Refraction"} %meta{string,page,"Specular"} %meta{string,help,"Index of refraction for specular reflection."} %meta{string,widget,"number"}  %read{707,719} %write{2147483647,-1}
param	float	Castle_B_specular_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Anisotropy"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"The directional bias of reflected and transmitted light resulting in materials appearing rougher or glossier in certain directions."} %meta{string,widget,"number"}  %read{630,662} %write{2147483647,-1}
param	float	Castle_B_specular_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Rotation"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"Rotation of the axis of specular anisotropy around the surface normal."} %meta{string,widget,"number"}  %read{305,305} %write{2147483647,-1}
param	float	Castle_B_transmission	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Transmission of light through the surface for materials such as glass or water. The greater the value the more transparent the material."} %meta{string,widget,"number"}  %read{744,746} %write{2147483647,-1}
param	color	Castle_B_transmission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Color"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Color tint on the transmitted light."}  %read{714,718} %write{2147483647,-1}
param	float	Castle_B_transmission_depth	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Depth"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Specifies the distance light travels inside the material before its becomes exactly the transmission color according to Beer's law."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	Castle_B_transmission_scatter	0 0 0		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Scatter"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Scattering coefficient of the interior medium. Suitable for a large body of liquid or one that is fairly thick, such as an ocean, honey, ice, or frosted glass."}  %read{2147483647,-1} %write{2147483647,-1}
param	float	Castle_B_transmission_scatter_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission Anisotropy"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the scattering."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	Castle_B_transmission_dispersion	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Dispersion"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Dispersion amount, describing how much the index of refraction varies across wavelengths."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	Castle_B_transmission_extra_roughness	0		%meta{float,min,-1} %meta{float,slidermin,0} %meta{float,max,1} %meta{string,label,"Transmission Roughness"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Additional roughness on top of specular roughness. Positive values blur refractions more than reflections, and negative values blur refractions less."} %meta{string,widget,"number"}  %read{306,306} %write{2147483647,-1}
param	float	Castle_B_subsurface	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Subsurface"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The blend between diffuse reflection and subsurface scattering. A value of 1.0 indicates full subsurface scattering and a value 0 for diffuse reflection only."} %meta{string,widget,"number"}  %read{738,740} %write{2147483647,-1}
param	float	Castle_B_subsurface_scale	0.00300000003		%meta{float,min,0} %meta{float,slidermax,10} %meta{string,label,"Subsurface Scale"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"Scalar weight for the subsurface radius value."} %meta{string,widget,"number"}  %read{315,315} %write{2147483647,-1}
param	float	Castle_B_subsurface_anisotropy	0		%meta{float,min,-1} %meta{float,max,1} %meta{string,label,"Subsurface Anisotropy"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The direction of subsurface scattering. 0 scatters light evenly, positive values scatter forward and negative values scatter backward."} %meta{string,widget,"number"}  %read{729,729} %write{2147483647,-1}
param	float	Castle_B_sheen	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The weight of a sheen layer that can be used to approximate microfibers or fabrics such as velvet and satin."} %meta{string,widget,"number"}  %read{722,722} %write{2147483647,-1}
param	color	Castle_B_sheen_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Sheen Color"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the sheen layer."}  %read{721,721} %write{2147483647,-1}
param	float	Castle_B_sheen_roughness	0.300000012		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen Roughness"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The roughness of the sheen layer."} %meta{string,widget,"number"}  %read{721,721} %write{2147483647,-1}
param	float	Castle_B_coat	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat"} %meta{string,page,"Coat"} %meta{string,help,"The weight of a reflective clear-coat layer on top of the material. Use for materials such as car paint or an oily layer."} %meta{string,widget,"number"}  %read{303,774} %write{2147483647,-1}
param	color	Castle_B_coat_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Coat Color"} %meta{string,page,"Coat"} %meta{string,help,"The color of the clear-coat layer's transparency."}  %read{322,757} %write{2147483647,-1}
param	float	Castle_B_coat_roughness	0.100000001		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Roughness"} %meta{string,page,"Coat"} %meta{string,help,"The roughness of the clear-coat reflections. The lower the value, the sharper the reflection."} %meta{string,widget,"number"}  %read{281,477} %write{2147483647,-1}
param	float	Castle_B_coat_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Anisotropy"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the clear-coat layer."} %meta{string,widget,"number"}  %read{285,616} %write{2147483647,-1}
param	float	Castle_B_coat_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Rotation"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The rotation of the anisotropic effect of the clear-coat layer."} %meta{string,widget,"number"}  %read{300,300} %write{2147483647,-1}
param	float	Castle_B_coat_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Coat Index of Refraction"} %meta{string,page,"Coat"} %meta{string,help,"The index of refraction of the clear-coat layer."} %meta{string,widget,"number"}  %read{324,691} %write{2147483647,-1}
param	float	Castle_B_coat_affect_color	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Color"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the saturation of diffuse reflection and subsurface scattering below the clear-coat."} %meta{string,widget,"number"}  %read{601,601} %write{2147483647,-1}
param	float	Castle_B_coat_affect_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Roughness"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the roughness of the specular reflection in the layers below the clear-coat."} %meta{string,widget,"number"}  %read{303,303} %write{2147483647,-1}
param	float	Castle_B_thin_film_thickness	0		%meta{float,min,0} %meta{float,slidermax,2000} %meta{string,label,"Thin Film Thickness"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The thickness of the thin film layer on a surface. Use for materials such as multitone car paint or soap bubbles (in nanometers)."} %meta{string,widget,"number"}  %read{695,707} %write{2147483647,-1}
param	float	Castle_B_thin_film_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Thin Film Index of Refraction"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The index of refraction of the medium surrounding the material."} %meta{string,widget,"number"}  %read{695,707} %write{2147483647,-1}
param	float	Castle_B_emission	0		%meta{float,min,0} %meta{float,slidermax,1} %meta{string,label,"Emission"} %meta{string,page,"Emission"} %meta{string,help,"The amount of emitted incandescent light."} %meta{string,widget,"number"}  %read{327,327} %write{2147483647,-1}
param	color	Castle_B_emission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Emission Color"} %meta{string,page,"Emission"} %meta{string,help,"The color of the emitted light."}  %read{327,327} %write{2147483647,-1}
param	color	Castle_B_opacity	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Opacity"} %meta{string,page,"Geometry"} %meta{string,help,"The opacity of the entire material."}  %read{330,330} %write{2147483647,-1}
param	int	Castle_B_thin_walled	0		%meta{string,label,"Thin Walled"} %meta{string,page,"Geometry"} %meta{int,uiadvanced,1} %meta{string,help,"If true the surface is double-sided and represents an infinitely thin shell. Suitable for thin objects such as tree leaves or paper."} %meta{string,widget,"checkBox"}  %read{316,316} %write{2147483647,-1}
oparam	closure color	out			%read{2147483647,-1} %write{799,799}
global	vector	I	%read{760,760} %write{2147483647,-1}
global	normal	N	%read{10,761} %write{2147483647,-1}
global	float	u	%read{16,16} %write{2147483647,-1} %derivs
global	float	v	%read{17,17} %write{2147483647,-1} %derivs
local	color	___670_missingColor	%read{64,64} %write{60,60}
local	float	___670_st.x	%read{64,64} %write{62,62} %mystruct{___670_st} %mystructfield{0} %derivs
local	float	___670_st.y	%read{64,64} %write{63,63} %mystruct{___670_st} %mystructfield{1} %derivs
local	color	___672_missingColor	%read{105,147} %write{101,143}
local	float	___672_st.x	%read{105,147} %write{103,145} %mystruct{___672_st} %mystructfield{0} %derivs
local	float	___672_st.y	%read{105,147} %write{104,146} %mystruct{___672_st} %mystructfield{1} %derivs
local	color	___672_rgb	%read{106,148} %write{105,147}
local	color	___674_missingColor	%read{189,189} %write{185,185}
local	float	___674_st.x	%read{189,189} %write{187,187} %mystruct{___674_st} %mystructfield{0} %derivs
local	float	___674_st.y	%read{189,189} %write{188,188} %mystruct{___674_st} %mystructfield{1} %derivs
local	int	___676_N_extract_0_index_tmp	%read{202,202} %write{200,200}
local	float	___676_N_extract_0_out	%read{209,209} %write{202,202}
local	int	___676_N_extract_1_index_tmp	%read{205,205} %write{203,203}
local	float	___676_N_extract_1_out	%read{210,210} %write{205,205}
local	int	___676_N_extract_2_index_tmp	%read{208,208} %write{206,206}
local	float	___676_N_extract_2_out	%read{211,211} %write{208,208}
local	float	___677_bias_in2_tmp	%read{193,193} %write{192,192}
local	color	___677_bias_out	%read{214,214} %write{193,193}
local	float	___677_linSeg_in2_tmp	%read{195,195} %write{194,194}
local	color	___677_linSeg_out	%read{250,250} %write{195,195}
local	float	___677_colorSeparate_outr	%read{218,218} %write{196,209}
local	float	___677_colorSeparate_outg	%read{228,228} %write{197,210}
local	float	___677_colorSeparate_outb	%read{238,238} %write{198,211}
local	float	___677_max_in2_tmp	%read{213,213} %write{212,212}
local	color	___677_max_out	%read{246,246} %write{214,214}
local	float	___677_isAboveR_value2_tmp	%read{218,218} %write{215,215}
local	float	___677_isAboveR_in1_tmp	%read{221,221} %write{216,216}
local	float	___677_isAboveR_in2_tmp	%read{223,223} %write{217,217}
local	float	___677_isAboveR_out	%read{247,247} %write{221,223}
local	float	___677_isAboveG_value2_tmp	%read{228,228} %write{225,225}
local	float	___677_isAboveG_in1_tmp	%read{231,231} %write{226,226}
local	float	___677_isAboveG_in2_tmp	%read{233,233} %write{227,227}
local	float	___677_isAboveG_out	%read{247,247} %write{231,233}
local	float	___677_isAboveB_value2_tmp	%read{238,238} %write{235,235}
local	float	___677_isAboveB_in1_tmp	%read{241,241} %write{236,236}
local	float	___677_isAboveB_in2_tmp	%read{243,243} %write{237,237}
local	float	___677_isAboveB_out	%read{247,247} %write{241,243}
local	float	___677_scale_in2_tmp	%read{246,246} %write{245,245}
local	color	___677_scale_out	%read{249,249} %write{246,246}
local	color	___677_isAbove_out	%read{250,250} %write{247,247}
local	float	___677_powSeg_in2_tmp	%read{249,249} %write{248,248}
local	color	___677_powSeg_out	%read{250,250} %write{249,249}
local	color	___677_mix_out	%read{251,251} %write{250,250}
local	vector	___678_decodedValue	%read{262,269} %write{259,261}
local	float	___682_roughness_sqr	%read{292,672} %write{284,658}
local	float	___683_aspect	%read{292,669} %write{291,665}
local	vector	___686_nAxis	%read{342,542} %write{338,484}
local	float	___686_s	%read{352,538} %write{339,485}
local	float	___686_c	%read{341,544} %write{340,486}
local	float	___686_oc	%read{343,541} %write{341,487}
local	float	___687_rotationRadians	%read{339,486} %write{336,482}
local	matrix	___687_m	%read{405,592} %write{399,545}
local	float	___687_trans.x	%read{449,595} %write{415,561} %mystruct{___687_trans} %mystructfield{0}
local	float	___687_trans.y	%read{449,595} %write{426,572} %mystruct{___687_trans} %mystructfield{1}
local	float	___687_trans.z	%read{449,595} %write{437,583} %mystruct{___687_trans} %mystructfield{2}
local	float	___687_trans.w	%read{2147483647,-1} %write{448,594} %mystruct{___687_trans} %mystructfield{3}
local	color	___688_r	%read{458,472} %write{457,457}
local	color	___688_r_sqrt	%read{462,463} %write{458,458}
local	color	___688_n_min	%read{465,465} %write{461,461}
local	color	___688_n_max	%read{465,465} %write{464,464}
local	color	___688_np1	%read{468,468} %write{466,466}
local	color	___688_nm1	%read{470,470} %write{467,467}
local	color	___688_k2	%read{475,476} %write{473,475}
local	color	___689_reflection_tint	%read{691,719} %write{685,714}
local	color	___689_transmission_tint	%read{691,719} %write{689,718}
local	color	___691_combine_out	%read{680,680} %write{679,679}
local	float	___703_x	%read{768,768} %write{767,767}
local	float	___704_NdotV	%read{764,764} %write{762,762}
local	color	___704_f	%read{770,770} %write{769,769}
local	closure color	___706_null_closure	%read{681,777} %write{277,277}
local	float	___706_coat_roughness_vector_out.x	%read{294,691} %write{278,297} %mystruct{___706_coat_roughness_vector_out} %mystructfield{0}
local	float	___706_coat_roughness_vector_out.y	%read{296,691} %write{279,298} %mystruct{___706_coat_roughness_vector_out} %mystructfield{1}
local	float	___706_coat_tangent_rotate_degree_in2_tmp	%read{300,300} %write{299,299}
local	float	___706_coat_tangent_rotate_degree_out	%read{336,336} %write{300,300}
local	color	___706_metal_reflectivity_out	%read{456,456} %write{301,301}
local	color	___706_metal_edgecolor_out	%read{465,465} %write{302,302}
local	float	___706_coat_affect_roughness_multiply1_out	%read{477,477} %write{303,303}
local	float	___706_tangent_rotate_degree_in2_tmp	%read{305,305} %write{304,304}
local	float	___706_tangent_rotate_degree_out	%read{482,482} %write{305,305}
local	float	___706_transmission_roughness_add_out	%read{599,599} %write{306,306}
local	float	___706_subsurface_color_nonnegative_in2_tmp	%read{308,308} %write{307,307}
local	color	___706_subsurface_color_nonnegative_out	%read{673,673} %write{309,309}
local	float	___706_coat_clamped_low_tmp	%read{314,314} %write{310,310}
local	float	___706_coat_clamped_high_tmp	%read{313,313} %write{311,311}
local	float	___706_coat_clamped_out	%read{601,601} %write{314,314}
local	color	___706_subsurface_radius_scaled_out	%read{729,729} %write{315,315}
local	float	___706_subsurface_selector_out	%read{731,733} %write{317,317}
local	float	___706_base_color_nonnegative_in2_tmp	%read{319,319} %write{318,318}
local	color	___706_base_color_nonnegative_out	%read{674,674} %write{320,320}
local	color	___706_coat_attenuation_bg_tmp	%read{322,322} %write{321,321}
local	color	___706_coat_attenuation_out	%read{754,754} %write{322,322}
local	float	___706_one_minus_coat_ior_in1_tmp	%read{324,324} %write{323,323}
local	float	___706_one_minus_coat_ior_out	%read{602,602} %write{324,324}
local	float	___706_one_plus_coat_ior_in1_tmp	%read{326,326} %write{325,325}
local	float	___706_one_plus_coat_ior_out	%read{602,602} %write{326,326}
local	color	___706_emission_weight_out	%read{756,756} %write{327,327}
local	color	___706_opacity_luminance_out	%read{605,605} %write{328,331}
local	vector	___706_coat_tangent_rotate_out	%read{606,606} %write{332,449}
local	color	___706_artistic_ior_ior	%read{466,695} %write{450,465}
local	color	___706_artistic_ior_extinction	%read{695,695} %write{451,476}
local	float	___706_coat_affect_roughness_multiply2_out	%read{608,611} %write{477,477}
local	vector	___706_tangent_rotate_out	%read{609,609} %write{478,595}
local	float	___706_transmission_roughness_clamped_low_tmp	%read{600,600} %write{596,596}
local	float	___706_transmission_roughness_clamped_high_tmp	%read{599,599} %write{597,597}
local	float	___706_transmission_roughness_clamped_out	%read{611,611} %write{600,600}
local	float	___706_coat_gamma_multiply_out	%read{613,613} %write{601,601}
local	float	___706_coat_ior_to_F0_sqrt_out	%read{614,614} %write{602,602}
local	int	___706_opacity_luminance_float_index_tmp	%read{605,605} %write{603,603}
local	float	___706_opacity_luminance_float_out	%read{783,783} %write{605,605}
local	vector	___706_coat_tangent_rotate_normalize_out	%read{619,619} %write{606,606}
local	float	___706_coat_affected_roughness_fg_tmp	%read{608,608} %write{607,607}
local	float	___706_coat_affected_roughness_out	%read{626,626} %write{608,608}
local	vector	___706_tangent_rotate_normalize_out	%read{648,648} %write{609,609}
local	float	___706_coat_affected_transmission_roughness_fg_tmp	%read{611,611} %write{610,610}
local	float	___706_coat_affected_transmission_roughness_out	%read{655,655} %write{611,611}
local	float	___706_coat_gamma_in2_tmp	%read{613,613} %write{612,612}
local	float	___706_coat_gamma_out	%read{673,674} %write{613,613}
local	float	___706_coat_ior_to_F0_out	%read{676,676} %write{614,614}
local	float	___706_coat_tangent_value2_tmp	%read{616,616} %write{615,615}
local	vector	___706_coat_tangent_out	%read{691,691} %write{619,621}
local	float	___706_main_roughness_out.x	%read{639,707} %write{623,642} %mystruct{___706_main_roughness_out} %mystructfield{0}
local	float	___706_main_roughness_out.y	%read{641,707} %write{624,643} %mystruct{___706_main_roughness_out} %mystructfield{1}
local	float	___706_main_tangent_value2_tmp	%read{645,645} %write{644,644}
local	vector	___706_main_tangent_out	%read{695,719} %write{648,650}
local	float	___706_transmission_roughness_out.x	%read{668,719} %write{652,671} %mystruct{___706_transmission_roughness_out} %mystructfield{0}
local	float	___706_transmission_roughness_out.y	%read{670,719} %write{653,672} %mystruct{___706_transmission_roughness_out} %mystructfield{1}
local	color	___706_coat_affected_subsurface_color_out	%read{724,728} %write{673,673}
local	color	___706_coat_affected_diffuse_color_out	%read{735,735} %write{674,674}
local	float	___706_one_minus_coat_ior_to_F0_in1_tmp	%read{676,676} %write{675,675}
local	float	___706_one_minus_coat_ior_to_F0_out	%read{679,679} %write{676,676}
local	color	___706_emission_color0_out	%read{769,769} %write{677,680}
local	closure color	___706_coat_bsdf_out	%read{755,755} %write{681,692}
local	float	___706_metal_bsdf_weight_tmp	%read{696,696} %write{693,693}
local	string	___706_metal_bsdf_distribution_tmp	%read{695,695} %write{694,694}
local	closure color	___706_metal_bsdf_out	%read{752,752} %write{696,696}
local	closure color	___706_specular_bsdf_out	%read{748,748} %write{697,708}
local	closure color	___706_transmission_bsdf_out	%read{746,746} %write{709,720}
local	closure color	___706_sheen_bsdf_out	%read{742,742} %write{722,722}
local	float	___706_translucent_bsdf_weight_tmp	%read{725,725} %write{723,723}
local	closure color	___706_translucent_bsdf_out	%read{733,733} %write{725,725}
local	closure color	___706_subsurface_bsdf_out	%read{732,732} %write{726,729}
local	closure color	___706_selected_subsurface_bsdf_out	%read{740,740} %write{734,734}
local	closure color	___706_diffuse_bsdf_out	%read{739,739} %write{736,736}
local	closure color	___706_subsurface_mix_out	%read{742,742} %write{741,741}
local	closure color	___706_sheen_layer_out	%read{745,745} %write{742,742}
local	closure color	___706_transmission_mix_out	%read{748,748} %write{747,747}
local	closure color	___706_specular_layer_out	%read{751,751} %write{748,748}
local	closure color	___706_metalness_mix_out	%read{754,754} %write{753,753}
local	closure color	___706_thin_film_layer_attenuated_out	%read{755,755} %write{754,754}
local	closure color	___706_coat_layer_out	%read{780,780} %write{755,755}
local	closure color	___706_emission_edf_out	%read{757,773} %write{756,756}
local	closure color	___706_coat_tinted_emission_edf_out	%read{770,770} %write{757,757}
local	closure color	___706_coat_emission_edf_out	%read{774,774} %write{758,770}
local	closure color	___706_blended_coat_emission_edf_out	%read{781,781} %write{775,775}
local	closure color	___706_shader_constructor_out.bsdf	%read{786,786} %write{776,780} %mystruct{___706_shader_constructor_out} %mystructfield{0}
local	closure color	___706_shader_constructor_out.edf	%read{787,787} %write{777,781} %mystruct{___706_shader_constructor_out} %mystructfield{1}
local	float	___706_shader_constructor_out.opacity	%read{785,788} %write{778,785} %mystruct{___706_shader_constructor_out} %mystructfield{2}
local	float	___707_opacity_weight	%read{794,796} %write{792,792}
local	closure color	null_closure	%read{273,274} %write{0,0}
local	string	diffuse6_file_.filename	%read{26,64} %write{1,1} %mystruct{diffuse6_file_} %mystructfield{0}
local	string	diffuse6_file_.colorspace	%read{64,64} %write{2,2} %mystruct{diffuse6_file_} %mystructfield{1}
local	string	metallic6_file_.filename	%read{67,105} %write{3,3} %mystruct{metallic6_file_} %mystructfield{0}
local	string	metallic6_file_.colorspace	%read{2147483647,-1} %write{4,4} %mystruct{metallic6_file_} %mystructfield{1}
local	string	roughness6_file_.filename	%read{109,147} %write{5,5} %mystruct{roughness6_file_} %mystructfield{0}
local	string	roughness6_file_.colorspace	%read{2147483647,-1} %write{6,6} %mystruct{roughness6_file_} %mystructfield{1}
local	string	normal6_file_.filename	%read{151,189} %write{7,7} %mystruct{normal6_file_} %mystructfield{0}
local	string	normal6_file_.colorspace	%read{2147483647,-1} %write{8,8} %mystruct{normal6_file_} %mystructfield{1}
local	vector	geomprop_Nworld_out1	%read{270,691} %write{10,10}
local	vector	geomprop_Tworld_out1	%read{263,650} %write{15,15}
local	float	geomprop_UV0_out1.x	%read{32,187} %write{16,16} %mystruct{geomprop_UV0_out1} %mystructfield{0} %derivs
local	float	geomprop_UV0_out1.y	%read{47,188} %write{17,17} %mystruct{geomprop_UV0_out1} %mystructfield{1} %derivs
local	vector	geomprop_Bworld_out1	%read{266,266} %write{23,23}
local	color	diffuse6_out	%read{193,208} %write{24,64}
local	float	metallic6_out	%read{750,752} %write{65,106}
local	float	roughness6_out	%read{306,608} %write{107,148}
local	vector	normal6_out	%read{257,260} %write{149,189}
local	color	diffuse6_out_cm_out	%read{301,320} %write{190,251}
local	vector	mtlxnormalmap8_out	%read{484,735} %write{252,272}
local	closure color	Castle_B_out.bsdf	%read{793,793} %write{273,786} %mystruct{Castle_B_out} %mystructfield{0}
local	closure color	Castle_B_out.edf	%read{793,793} %write{274,787} %mystruct{Castle_B_out} %mystructfield{1}
local	float	Castle_B_out.opacity	%read{791,791} %write{275,788} %mystruct{Castle_B_out} %mystructfield{2}
local	closure color	M_Castle_B_out	%read{799,799} %write{798,798}
const	int	$const1	0		%read{0,603} %write{2147483647,-1}
const	string	$const2	"transform"		%read{9,550} %write{2147483647,-1}
const	string	$const3	"common"		%read{10,10} %write{2147483647,-1}
temp	vector	$tmp1	%read{15,15} %write{14,14}
const	int	$const4	2		%read{11,589} %write{2147483647,-1}
temp	float	$tmp2	%read{14,14} %write{11,11}
const	float	$const5	0		%read{14,792} %write{2147483647,-1}
temp	float	$tmp3	%read{13,13} %write{12,12}
temp	float	$tmp4	%read{14,14} %write{13,13}
temp	vector	$tmp5	%read{23,23} %write{22,22}
temp	vector	$tmp6	%read{22,22} %write{21,21}
temp	float	$tmp7	%read{21,21} %write{18,18}
temp	float	$tmp8	%read{20,20} %write{19,19}
temp	float	$tmp9	%read{21,21} %write{20,20}
const	color	$const6	0 0 0		%read{24,769} %write{2147483647,-1}
const	string	$const7	"mx_image_color3"		%read{25,25} %write{2147483647,-1}
const	string	$const8	""		%read{26,151} %write{2147483647,-1}
temp	int	$tmp10	%read{27,27} %write{26,26}
temp	int	$tmp11	%read{28,42} %write{27,41}
const	string	$const9	"constant"		%read{29,169} %write{2147483647,-1}
temp	int	$tmp12	%read{30,30} %write{29,29}
temp	int	$tmp13	%read{31,40} %write{30,39}
temp	int	$tmp14	%read{33,33} %write{32,32}
temp	int	$tmp15	%read{34,38} %write{33,37}
const	float	$const10	1		%read{35,796} %write{2147483647,-1}
temp	int	$tmp16	%read{36,36} %write{35,35}
temp	int	$tmp17	%read{37,37} %write{36,36}
temp	int	$tmp18	%read{39,39} %write{38,38}
temp	int	$tmp19	%read{41,41} %write{40,40}
temp	int	$tmp20	%read{43,57} %write{42,56}
temp	int	$tmp21	%read{45,45} %write{44,44}
temp	int	$tmp22	%read{46,55} %write{45,54}
temp	int	$tmp23	%read{48,48} %write{47,47}
temp	int	$tmp24	%read{49,53} %write{48,52}
temp	int	$tmp25	%read{51,51} %write{50,50}
temp	int	$tmp26	%read{52,52} %write{51,51}
temp	int	$tmp27	%read{54,54} %write{53,53}
temp	int	$tmp28	%read{56,56} %write{55,55}
const	string	$const11	"mx_transform_uv"		%read{61,186} %write{2147483647,-1}
const	string	$const12	"subimage"		%read{64,189} %write{2147483647,-1}
const	string	$const13	"interp"		%read{64,189} %write{2147483647,-1}
const	string	$const14	"missingcolor"		%read{64,189} %write{2147483647,-1}
const	string	$const15	"swrap"		%read{64,189} %write{2147483647,-1}
const	string	$const16	"twrap"		%read{64,189} %write{2147483647,-1}
const	string	$const17	"colorspace"		%read{64,64} %write{2147483647,-1}
const	string	$const18	"mx_image_float"		%read{66,108} %write{2147483647,-1}
temp	int	$tmp29	%read{68,68} %write{67,67}
temp	int	$tmp30	%read{69,83} %write{68,82}
temp	int	$tmp31	%read{71,71} %write{70,70}
temp	int	$tmp32	%read{72,81} %write{71,80}
temp	int	$tmp33	%read{74,74} %write{73,73}
temp	int	$tmp34	%read{75,79} %write{74,78}
temp	int	$tmp35	%read{77,77} %write{76,76}
temp	int	$tmp36	%read{78,78} %write{77,77}
temp	int	$tmp37	%read{80,80} %write{79,79}
temp	int	$tmp38	%read{82,82} %write{81,81}
temp	int	$tmp39	%read{84,98} %write{83,97}
temp	int	$tmp40	%read{86,86} %write{85,85}
temp	int	$tmp41	%read{87,96} %write{86,95}
temp	int	$tmp42	%read{89,89} %write{88,88}
temp	int	$tmp43	%read{90,94} %write{89,93}
temp	int	$tmp44	%read{92,92} %write{91,91}
temp	int	$tmp45	%read{93,93} %write{92,92}
temp	int	$tmp46	%read{95,95} %write{94,94}
temp	int	$tmp47	%read{97,97} %write{96,96}
temp	int	$tmp48	%read{110,110} %write{109,109}
temp	int	$tmp49	%read{111,125} %write{110,124}
temp	int	$tmp50	%read{113,113} %write{112,112}
temp	int	$tmp51	%read{114,123} %write{113,122}
temp	int	$tmp52	%read{116,116} %write{115,115}
temp	int	$tmp53	%read{117,121} %write{116,120}
temp	int	$tmp54	%read{119,119} %write{118,118}
temp	int	$tmp55	%read{120,120} %write{119,119}
temp	int	$tmp56	%read{122,122} %write{121,121}
temp	int	$tmp57	%read{124,124} %write{123,123}
temp	int	$tmp58	%read{126,140} %write{125,139}
temp	int	$tmp59	%read{128,128} %write{127,127}
temp	int	$tmp60	%read{129,138} %write{128,137}
temp	int	$tmp61	%read{131,131} %write{130,130}
temp	int	$tmp62	%read{132,136} %write{131,135}
temp	int	$tmp63	%read{134,134} %write{133,133}
temp	int	$tmp64	%read{135,135} %write{134,134}
temp	int	$tmp65	%read{137,137} %write{136,136}
temp	int	$tmp66	%read{139,139} %write{138,138}
const	vector	$const19	0 0 0		%read{149,478} %write{2147483647,-1}
const	string	$const20	"mx_image_vector3"		%read{150,150} %write{2147483647,-1}
temp	int	$tmp67	%read{152,152} %write{151,151}
temp	int	$tmp68	%read{153,167} %write{152,166}
temp	int	$tmp69	%read{155,155} %write{154,154}
temp	int	$tmp70	%read{156,165} %write{155,164}
temp	int	$tmp71	%read{158,158} %write{157,157}
temp	int	$tmp72	%read{159,163} %write{158,162}
temp	int	$tmp73	%read{161,161} %write{160,160}
temp	int	$tmp74	%read{162,162} %write{161,161}
temp	int	$tmp75	%read{164,164} %write{163,163}
temp	int	$tmp76	%read{166,166} %write{165,165}
temp	int	$tmp77	%read{168,182} %write{167,181}
temp	int	$tmp78	%read{170,170} %write{169,169}
temp	int	$tmp79	%read{171,180} %write{170,179}
temp	int	$tmp80	%read{173,173} %write{172,172}
temp	int	$tmp81	%read{174,178} %write{173,177}
temp	int	$tmp82	%read{176,176} %write{175,175}
temp	int	$tmp83	%read{177,177} %write{176,176}
temp	int	$tmp84	%read{179,179} %write{178,178}
temp	int	$tmp85	%read{181,181} %write{180,180}
const	string	$const21	"NG_srgb_texture_to_lin_rec709_color3"		%read{191,191} %write{2147483647,-1}
const	float	$const22	0.055		%read{192,192} %write{2147483647,-1}
const	float	$const23	12.92		%read{194,194} %write{2147483647,-1}
const	string	$const24	"NG_separate3_color3"		%read{199,199} %write{2147483647,-1}
const	string	$const25	"mx_extract"		%read{201,604} %write{2147483647,-1}
const	int	$const26	1		%read{203,586} %write{2147483647,-1}
temp	color	$tmp86	%read{214,214} %write{213,213}
const	float	$const27	0.04045		%read{215,235} %write{2147483647,-1}
temp	int	$tmp87	%read{220,220} %write{218,218}
const	string	$const28	"mx_ternary"		%read{219,646} %write{2147483647,-1}
temp	int	$tmp88	%read{230,230} %write{228,228}
temp	int	$tmp89	%read{240,240} %write{238,238}
const	float	$const29	1.055		%read{245,245} %write{2147483647,-1}
const	float	$const30	2.4		%read{248,248} %write{2147483647,-1}
const	string	$const31	"mx_normalmap_float"		%read{253,253} %write{2147483647,-1}
temp	float	$tmp90.x	%read{264,264} %write{254,254}
temp	float	$tmp90.y	%read{267,267} %write{255,255}
const	string	$const32	"mx_normalmap_vector2"		%read{256,256} %write{2147483647,-1}
temp	int	$tmp92	%read{258,258} %write{257,257}
const	vector	$const33	0 0 1		%read{259,259} %write{2147483647,-1}
const	float	$const34	2		%read{260,260} %write{2147483647,-1}
temp	vector	$tmp93	%read{261,261} %write{260,260}
temp	float	$tmp94	%read{263,263} %write{262,262}
temp	vector	$tmp95	%read{264,264} %write{263,263}
temp	vector	$tmp96	%read{268,268} %write{264,264}
temp	float	$tmp97	%read{266,266} %write{265,265}
temp	vector	$tmp98	%read{267,267} %write{266,266}
temp	vector	$tmp99	%read{268,268} %write{267,267}
temp	vector	$tmp100	%read{271,271} %write{268,268}
temp	float	$tmp101	%read{270,270} %write{269,269}
temp	vector	$tmp102	%read{271,271} %write{270,270}
temp	vector	$tmp103	%read{272,272} %write{271,271}
const	string	$const35	"NG_standard_surface_surfaceshader_100"		%read{276,276} %write{2147483647,-1}
const	string	$const36	"mx_roughness_anisotropy"		%read{280,654} %write{2147483647,-1}
temp	float	$tmp104	%read{283,283} %write{281,281}
const	float	$const37	1e-08		%read{284,658} %write{2147483647,-1}
const	string	$const38	"clamp"		%read{282,790} %write{2147483647,-1}
temp	float	$tmp105	%read{284,284} %write{283,283}
temp	int	$tmp106	%read{286,286} %write{285,285}
temp	float	$tmp107	%read{290,290} %write{289,289}
const	float	$const39	0.98		%read{288,662} %write{2147483647,-1}
temp	float	$tmp108	%read{289,289} %write{288,288}
temp	float	$tmp109	%read{291,291} %write{290,290}
temp	float	$tmp110	%read{293,293} %write{292,292}
const	float	$const40	360		%read{299,304} %write{2147483647,-1}
temp	color	$tmp111	%read{309,309} %write{308,308}
temp	float	$tmp112	%read{314,314} %write{313,313}
temp	float	$tmp113	%read{317,317} %write{316,316}
temp	color	$tmp114	%read{320,320} %write{319,319}
const	color	$const41	1 1 1		%read{321,690} %write{2147483647,-1}
const	color	$const42	0.272229 0.674082 0.053689		%read{330,330} %write{2147483647,-1}
const	string	$const43	"mx_luminance_color3"		%read{329,329} %write{2147483647,-1}
temp	float	$tmp116	%read{331,331} %write{330,330}
const	string	$const44	"mx_rotate_vector3"		%read{333,479} %write{2147483647,-1}
const	string	$const45	"radians"		%read{334,480} %write{2147483647,-1}
const	float	$const46	3.1415927		%read{335,481} %write{2147483647,-1}
const	float	$const47	180		%read{335,481} %write{2147483647,-1}
temp	float	$tmp117	%read{336,336} %write{335,335}
const	string	$const48	"rotationMatrix"		%read{337,483} %write{2147483647,-1}
temp	float	$tmp118	%read{343,343} %write{342,342}
temp	float	$tmp119	%read{345,345} %write{343,343}
temp	float	$tmp120	%read{345,345} %write{344,344}
temp	float	$tmp121	%read{346,346} %write{345,345}
temp	float	$tmp122	%read{399,399} %write{346,346}
temp	float	$tmp123	%read{348,348} %write{347,347}
temp	float	$tmp124	%read{350,350} %write{348,348}
temp	float	$tmp125	%read{350,350} %write{349,349}
temp	float	$tmp126	%read{353,353} %write{350,350}
temp	float	$tmp127	%read{352,352} %write{351,351}
temp	float	$tmp128	%read{353,353} %write{352,352}
temp	float	$tmp129	%read{399,399} %write{353,353}
temp	float	$tmp130	%read{355,355} %write{354,354}
temp	float	$tmp131	%read{357,357} %write{355,355}
temp	float	$tmp132	%read{357,357} %write{356,356}
temp	float	$tmp133	%read{360,360} %write{357,357}
temp	float	$tmp134	%read{359,359} %write{358,358}
temp	float	$tmp135	%read{360,360} %write{359,359}
temp	float	$tmp136	%read{399,399} %write{360,360}
temp	float	$tmp137	%read{362,362} %write{361,361}
temp	float	$tmp138	%read{364,364} %write{362,362}
temp	float	$tmp139	%read{364,364} %write{363,363}
temp	float	$tmp140	%read{367,367} %write{364,364}
temp	float	$tmp141	%read{366,366} %write{365,365}
temp	float	$tmp142	%read{367,367} %write{366,366}
temp	float	$tmp143	%read{399,399} %write{367,367}
temp	float	$tmp144	%read{369,369} %write{368,368}
temp	float	$tmp145	%read{371,371} %write{369,369}
temp	float	$tmp146	%read{371,371} %write{370,370}
temp	float	$tmp147	%read{372,372} %write{371,371}
temp	float	$tmp148	%read{399,399} %write{372,372}
temp	float	$tmp149	%read{374,374} %write{373,373}
temp	float	$tmp150	%read{376,376} %write{374,374}
temp	float	$tmp151	%read{376,376} %write{375,375}
temp	float	$tmp152	%read{379,379} %write{376,376}
temp	float	$tmp153	%read{378,378} %write{377,377}
temp	float	$tmp154	%read{379,379} %write{378,378}
temp	float	$tmp155	%read{399,399} %write{379,379}
temp	float	$tmp156	%read{381,381} %write{380,380}
temp	float	$tmp157	%read{383,383} %write{381,381}
temp	float	$tmp158	%read{383,383} %write{382,382}
temp	float	$tmp159	%read{386,386} %write{383,383}
temp	float	$tmp160	%read{385,385} %write{384,384}
temp	float	$tmp161	%read{386,386} %write{385,385}
temp	float	$tmp162	%read{399,399} %write{386,386}
temp	float	$tmp163	%read{388,388} %write{387,387}
temp	float	$tmp164	%read{390,390} %write{388,388}
temp	float	$tmp165	%read{390,390} %write{389,389}
temp	float	$tmp166	%read{393,393} %write{390,390}
temp	float	$tmp167	%read{392,392} %write{391,391}
temp	float	$tmp168	%read{393,393} %write{392,392}
temp	float	$tmp169	%read{399,399} %write{393,393}
temp	float	$tmp170	%read{395,395} %write{394,394}
temp	float	$tmp171	%read{397,397} %write{395,395}
temp	float	$tmp172	%read{397,397} %write{396,396}
temp	float	$tmp173	%read{398,398} %write{397,397}
temp	float	$tmp174	%read{399,399} %write{398,398}
temp	float	$tmp175.x	%read{406,439} %write{400,400}
temp	float	$tmp175.y	%read{408,441} %write{401,401}
temp	float	$tmp175.z	%read{411,444} %write{402,402}
temp	float	$tmp175.w	%read{414,447} %write{403,403}
temp	float	$tmp176	%read{406,406} %write{405,405}
temp	float	$tmp177	%read{409,409} %write{406,406}
temp	float	$tmp178	%read{408,408} %write{407,407}
temp	float	$tmp179	%read{409,409} %write{408,408}
temp	float	$tmp180	%read{412,412} %write{409,409}
temp	float	$tmp181	%read{411,411} %write{410,410}
temp	float	$tmp182	%read{412,412} %write{411,411}
temp	float	$tmp183	%read{415,415} %write{412,412}
const	int	$const49	3		%read{413,592} %write{2147483647,-1}
temp	float	$tmp184	%read{414,414} %write{413,413}
temp	float	$tmp185	%read{415,415} %write{414,414}
temp	float	$tmp186	%read{417,417} %write{416,416}
temp	float	$tmp187	%read{420,420} %write{417,417}
temp	float	$tmp188	%read{419,419} %write{418,418}
temp	float	$tmp189	%read{420,420} %write{419,419}
temp	float	$tmp190	%read{423,423} %write{420,420}
temp	float	$tmp191	%read{422,422} %write{421,421}
temp	float	$tmp192	%read{423,423} %write{422,422}
temp	float	$tmp193	%read{426,426} %write{423,423}
temp	float	$tmp194	%read{425,425} %write{424,424}
temp	float	$tmp195	%read{426,426} %write{425,425}
temp	float	$tmp196	%read{428,428} %write{427,427}
temp	float	$tmp197	%read{431,431} %write{428,428}
temp	float	$tmp198	%read{430,430} %write{429,429}
temp	float	$tmp199	%read{431,431} %write{430,430}
temp	float	$tmp200	%read{434,434} %write{431,431}
temp	float	$tmp201	%read{433,433} %write{432,432}
temp	float	$tmp202	%read{434,434} %write{433,433}
temp	float	$tmp203	%read{437,437} %write{434,434}
temp	float	$tmp204	%read{436,436} %write{435,435}
temp	float	$tmp205	%read{437,437} %write{436,436}
temp	float	$tmp206	%read{439,439} %write{438,438}
temp	float	$tmp207	%read{442,442} %write{439,439}
temp	float	$tmp208	%read{441,441} %write{440,440}
temp	float	$tmp209	%read{442,442} %write{441,441}
temp	float	$tmp210	%read{445,445} %write{442,442}
temp	float	$tmp211	%read{444,444} %write{443,443}
temp	float	$tmp212	%read{445,445} %write{444,444}
temp	float	$tmp213	%read{448,448} %write{445,445}
temp	float	$tmp214	%read{447,447} %write{446,446}
temp	float	$tmp215	%read{448,448} %write{447,447}
const	string	$const50	"mx_artistic_ior"		%read{452,452} %write{2147483647,-1}
temp	color	$tmp216	%read{457,457} %write{453,453}
const	float	$const51	0.99		%read{454,454} %write{2147483647,-1}
temp	color	$tmp217	%read{456,456} %write{454,454}
temp	color	$tmp218	%read{457,457} %write{456,456}
temp	color	$tmp219	%read{461,461} %write{459,459}
temp	color	$tmp220	%read{461,461} %write{460,460}
temp	color	$tmp221	%read{464,464} %write{462,462}
temp	color	$tmp222	%read{464,464} %write{463,463}
temp	color	$tmp223	%read{469,469} %write{468,468}
temp	color	$tmp224	%read{471,471} %write{469,469}
temp	color	$tmp225	%read{471,471} %write{470,470}
temp	color	$tmp226	%read{473,473} %write{471,471}
temp	color	$tmp227	%read{473,473} %write{472,472}
temp	color	$tmp228	%read{475,475} %write{474,474}
temp	float	$tmp229	%read{482,482} %write{481,481}
temp	float	$tmp230	%read{489,489} %write{488,488}
temp	float	$tmp231	%read{491,491} %write{489,489}
temp	float	$tmp232	%read{491,491} %write{490,490}
temp	float	$tmp233	%read{492,492} %write{491,491}
temp	float	$tmp234	%read{545,545} %write{492,492}
temp	float	$tmp235	%read{494,494} %write{493,493}
temp	float	$tmp236	%read{496,496} %write{494,494}
temp	float	$tmp237	%read{496,496} %write{495,495}
temp	float	$tmp238	%read{499,499} %write{496,496}
temp	float	$tmp239	%read{498,498} %write{497,497}
temp	float	$tmp240	%read{499,499} %write{498,498}
temp	float	$tmp241	%read{545,545} %write{499,499}
temp	float	$tmp242	%read{501,501} %write{500,500}
temp	float	$tmp243	%read{503,503} %write{501,501}
temp	float	$tmp244	%read{503,503} %write{502,502}
temp	float	$tmp245	%read{506,506} %write{503,503}
temp	float	$tmp246	%read{505,505} %write{504,504}
temp	float	$tmp247	%read{506,506} %write{505,505}
temp	float	$tmp248	%read{545,545} %write{506,506}
temp	float	$tmp249	%read{508,508} %write{507,507}
temp	float	$tmp250	%read{510,510} %write{508,508}
temp	float	$tmp251	%read{510,510} %write{509,509}
temp	float	$tmp252	%read{513,513} %write{510,510}
temp	float	$tmp253	%read{512,512} %write{511,511}
temp	float	$tmp254	%read{513,513} %write{512,512}
temp	float	$tmp255	%read{545,545} %write{513,513}
temp	float	$tmp256	%read{515,515} %write{514,514}
temp	float	$tmp257	%read{517,517} %write{515,515}
temp	float	$tmp258	%read{517,517} %write{516,516}
temp	float	$tmp259	%read{518,518} %write{517,517}
temp	float	$tmp260	%read{545,545} %write{518,518}
temp	float	$tmp261	%read{520,520} %write{519,519}
temp	float	$tmp262	%read{522,522} %write{520,520}
temp	float	$tmp263	%read{522,522} %write{521,521}
temp	float	$tmp264	%read{525,525} %write{522,522}
temp	float	$tmp265	%read{524,524} %write{523,523}
temp	float	$tmp266	%read{525,525} %write{524,524}
temp	float	$tmp267	%read{545,545} %write{525,525}
temp	float	$tmp268	%read{527,527} %write{526,526}
temp	float	$tmp269	%read{529,529} %write{527,527}
temp	float	$tmp270	%read{529,529} %write{528,528}
temp	float	$tmp271	%read{532,532} %write{529,529}
temp	float	$tmp272	%read{531,531} %write{530,530}
temp	float	$tmp273	%read{532,532} %write{531,531}
temp	float	$tmp274	%read{545,545} %write{532,532}
temp	float	$tmp275	%read{534,534} %write{533,533}
temp	float	$tmp276	%read{536,536} %write{534,534}
temp	float	$tmp277	%read{536,536} %write{535,535}
temp	float	$tmp278	%read{539,539} %write{536,536}
temp	float	$tmp279	%read{538,538} %write{537,537}
temp	float	$tmp280	%read{539,539} %write{538,538}
temp	float	$tmp281	%read{545,545} %write{539,539}
temp	float	$tmp282	%read{541,541} %write{540,540}
temp	float	$tmp283	%read{543,543} %write{541,541}
temp	float	$tmp284	%read{543,543} %write{542,542}
temp	float	$tmp285	%read{544,544} %write{543,543}
temp	float	$tmp286	%read{545,545} %write{544,544}
temp	float	$tmp287.x	%read{552,585} %write{546,546}
temp	float	$tmp287.y	%read{554,587} %write{547,547}
temp	float	$tmp287.z	%read{557,590} %write{548,548}
temp	float	$tmp287.w	%read{560,593} %write{549,549}
temp	float	$tmp288	%read{552,552} %write{551,551}
temp	float	$tmp289	%read{555,555} %write{552,552}
temp	float	$tmp290	%read{554,554} %write{553,553}
temp	float	$tmp291	%read{555,555} %write{554,554}
temp	float	$tmp292	%read{558,558} %write{555,555}
temp	float	$tmp293	%read{557,557} %write{556,556}
temp	float	$tmp294	%read{558,558} %write{557,557}
temp	float	$tmp295	%read{561,561} %write{558,558}
temp	float	$tmp296	%read{560,560} %write{559,559}
temp	float	$tmp297	%read{561,561} %write{560,560}
temp	float	$tmp298	%read{563,563} %write{562,562}
temp	float	$tmp299	%read{566,566} %write{563,563}
temp	float	$tmp300	%read{565,565} %write{564,564}
temp	float	$tmp301	%read{566,566} %write{565,565}
temp	float	$tmp302	%read{569,569} %write{566,566}
temp	float	$tmp303	%read{568,568} %write{567,567}
temp	float	$tmp304	%read{569,569} %write{568,568}
temp	float	$tmp305	%read{572,572} %write{569,569}
temp	float	$tmp306	%read{571,571} %write{570,570}
temp	float	$tmp307	%read{572,572} %write{571,571}
temp	float	$tmp308	%read{574,574} %write{573,573}
temp	float	$tmp309	%read{577,577} %write{574,574}
temp	float	$tmp310	%read{576,576} %write{575,575}
temp	float	$tmp311	%read{577,577} %write{576,576}
temp	float	$tmp312	%read{580,580} %write{577,577}
temp	float	$tmp313	%read{579,579} %write{578,578}
temp	float	$tmp314	%read{580,580} %write{579,579}
temp	float	$tmp315	%read{583,583} %write{580,580}
temp	float	$tmp316	%read{582,582} %write{581,581}
temp	float	$tmp317	%read{583,583} %write{582,582}
temp	float	$tmp318	%read{585,585} %write{584,584}
temp	float	$tmp319	%read{588,588} %write{585,585}
temp	float	$tmp320	%read{587,587} %write{586,586}
temp	float	$tmp321	%read{588,588} %write{587,587}
temp	float	$tmp322	%read{591,591} %write{588,588}
temp	float	$tmp323	%read{590,590} %write{589,589}
temp	float	$tmp324	%read{591,591} %write{590,590}
temp	float	$tmp325	%read{594,594} %write{591,591}
temp	float	$tmp326	%read{593,593} %write{592,592}
temp	float	$tmp327	%read{594,594} %write{593,593}
temp	float	$tmp328	%read{600,600} %write{599,599}
temp	int	$tmp329	%read{618,618} %write{616,616}
temp	float	$tmp330	%read{628,628} %write{626,626}
temp	float	$tmp331	%read{629,629} %write{628,628}
temp	int	$tmp332	%read{631,631} %write{630,630}
temp	float	$tmp333	%read{635,635} %write{634,634}
temp	float	$tmp334	%read{634,634} %write{633,633}
temp	float	$tmp335	%read{636,636} %write{635,635}
temp	float	$tmp336	%read{638,638} %write{637,637}
temp	int	$tmp337	%read{647,647} %write{645,645}
temp	float	$tmp338	%read{657,657} %write{655,655}
temp	float	$tmp339	%read{658,658} %write{657,657}
temp	int	$tmp340	%read{660,660} %write{659,659}
temp	float	$tmp341	%read{664,664} %write{663,663}
temp	float	$tmp342	%read{663,663} %write{662,662}
temp	float	$tmp343	%read{665,665} %write{664,664}
temp	float	$tmp344	%read{667,667} %write{666,666}
const	string	$const52	"NG_convert_float_color3"		%read{678,678} %write{2147483647,-1}
const	float	$const53	1.5		%read{691,719} %write{2147483647,-1}
const	string	$const54	"ggx"		%read{691,719} %write{2147483647,-1}
const	string	$const55	"R"		%read{683,715} %write{2147483647,-1}
const	string	$const56	"mx_dielectric_bsdf"		%read{682,710} %write{2147483647,-1}
const	string	$const57	"T"		%read{683,715} %write{2147483647,-1}
temp	int	$tmp346	%read{684,684} %write{683,683}
temp	int	$tmp347	%read{688,688} %write{687,687}
temp	closure color	$tmp348	%read{692,692} %write{691,691}
const	string	$const58	"thinfilm_thickness"		%read{691,719} %write{2147483647,-1}
const	string	$const59	"thinfilm_ior"		%read{691,719} %write{2147483647,-1}
const	string	$const60	"dielectric_bsdf"		%read{691,719} %write{2147483647,-1}
temp	closure color	$tmp349	%read{696,696} %write{695,695}
const	string	$const61	"conductor_bsdf"		%read{695,695} %write{2147483647,-1}
temp	int	$tmp350	%read{700,700} %write{699,699}
temp	int	$tmp351	%read{704,704} %write{703,703}
temp	closure color	$tmp352	%read{708,708} %write{707,707}
temp	int	$tmp353	%read{712,712} %write{711,711}
temp	int	$tmp354	%read{716,716} %write{715,715}
temp	closure color	$tmp355	%read{720,720} %write{719,719}
temp	closure color	$tmp356	%read{722,722} %write{721,721}
const	string	$const62	"sheen_bsdf"		%read{721,721} %write{2147483647,-1}
temp	closure color	$tmp357	%read{725,725} %write{724,724}
const	string	$const63	"translucent_bsdf"		%read{724,724} %write{2147483647,-1}
const	string	$const64	"mx_subsurface_bsdf"		%read{727,727} %write{2147483647,-1}
temp	color	$tmp358	%read{729,729} %write{728,728}
const	string	$const65	"subsurface_bssrdf"		%read{729,729} %write{2147483647,-1}
const	string	$const66	"mix"		%read{730,771} %write{2147483647,-1}
temp	float	$tmp359	%read{732,732} %write{731,731}
temp	closure color	$tmp360	%read{734,734} %write{732,732}
temp	closure color	$tmp361	%read{734,734} %write{733,733}
temp	closure color	$tmp362	%read{736,736} %write{735,735}
const	string	$const67	"oren_nayar_diffuse_bsdf"		%read{735,735} %write{2147483647,-1}
temp	float	$tmp363	%read{739,739} %write{738,738}
temp	closure color	$tmp364	%read{741,741} %write{739,739}
temp	closure color	$tmp365	%read{741,741} %write{740,740}
const	string	$const68	"layer"		%read{742,755} %write{2147483647,-1}
temp	float	$tmp366	%read{745,745} %write{744,744}
temp	closure color	$tmp367	%read{747,747} %write{745,745}
temp	closure color	$tmp368	%read{747,747} %write{746,746}
temp	float	$tmp369	%read{751,751} %write{750,750}
temp	closure color	$tmp370	%read{753,753} %write{751,751}
temp	closure color	$tmp371	%read{753,753} %write{752,752}
const	string	$const69	"uniform_edf"		%read{756,756} %write{2147483647,-1}
const	float	$const70	5		%read{768,768} %write{2147483647,-1}
const	string	$const71	"mx_generalized_schlick_edf"		%read{759,759} %write{2147483647,-1}
temp	float	$tmp373	%read{762,762} %write{761,761}
temp	vector	$tmp374	%read{761,761} %write{760,760}
const	string	$const72	"mx_fresnel_schlick"		%read{763,763} %write{2147483647,-1}
temp	float	$tmp375	%read{766,766} %write{764,764}
temp	float	$tmp376	%read{767,767} %write{766,766}
temp	float	$tmp377	%read{769,769} %write{768,768}
temp	float	$tmp378	%read{773,773} %write{772,772}
temp	closure color	$tmp379	%read{775,775} %write{773,773}
temp	closure color	$tmp380	%read{775,775} %write{774,774}
const	string	$const73	"mx_surface"		%read{779,779} %write{2147483647,-1}
temp	float	$tmp381	%read{784,784} %write{783,783}
const	string	$const74	"mx_surfacematerial"		%read{789,789} %write{2147483647,-1}
temp	float	$tmp382	%read{792,792} %write{791,791}
temp	closure color	$tmp383	%read{794,794} %write{793,793}
temp	closure color	$tmp384	%read{798,798} %write{794,794}
temp	closure color	$tmp385	%read{797,797} %write{795,795}
const	string	$const75	"transparent"		%read{795,795} %write{2147483647,-1}
temp	float	$tmp386	%read{797,797} %write{796,796}
temp	closure color	$tmp387	%read{798,798} %write{797,797}
code ___main___
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:954
#     textureresource diffuse6_file_ = {diffuse6_file, diffuse6_file_colorspace};
	assign		null_closure $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{954} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:955
#     textureresource metallic6_file_ = {metallic6_file, metallic6_file_colorspace};
	assign		diffuse6_file_.filename diffuse6_file 	%line{955} %argrw{"wr"}
	assign		diffuse6_file_.colorspace diffuse6_file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:956
#     textureresource roughness6_file_ = {roughness6_file, roughness6_file_colorspace};
	assign		metallic6_file_.filename metallic6_file 	%line{956} %argrw{"wr"}
	assign		metallic6_file_.colorspace metallic6_file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:957
#     textureresource normal6_file_ = {normal6_file, normal6_file_colorspace};
	assign		roughness6_file_.filename roughness6_file 	%line{957} %argrw{"wr"}
	assign		roughness6_file_.colorspace roughness6_file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:958
#     vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
	assign		normal6_file_.filename normal6_file 	%line{958} %argrw{"wr"}
	assign		normal6_file_.colorspace normal6_file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:959
#     vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
	functioncall	$const2 11 	%line{959} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	geomprop_Nworld_out1 $const3 geomprop_Nworld_space N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:960
#     vector2 geomprop_UV0_out1 = vector2(u,v);
	compref		$tmp2 N $const4 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{960} %argrw{"wrr"}
	compref		$tmp3 N $const1 	%argrw{"wrr"}
	neg		$tmp4 $tmp3 	%argrw{"wr"}
	vector		$tmp1 $tmp2 $const5 $tmp4 	%argrw{"wrrr"}
	normalize	geomprop_Tworld_out1 $tmp1 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:961
#     vector geomprop_Bworld_out1 = normalize(cross(N, vector(N[2], 0, -N[0])));
	assign		geomprop_UV0_out1.x u 	%line{961} %argrw{"wr"}
	assign		geomprop_UV0_out1.y v 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:962
#     color diffuse6_out = color(0.0);
	compref		$tmp7 N $const4 	%line{962} %argrw{"wrr"}
	compref		$tmp8 N $const1 	%argrw{"wrr"}
	neg		$tmp9 $tmp8 	%argrw{"wr"}
	vector		$tmp6 $tmp7 $const5 $tmp9 	%argrw{"wrrr"}
	cross		$tmp5 N $tmp6 	%argrw{"wrr"}
	normalize	geomprop_Bworld_out1 $tmp5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:963
#     mx_image_color3(diffuse6_file_, diffuse6_layer, diffuse6_default, geomprop_UV0_out1, diffuse6_uaddressmode, diffuse6_vaddressmode, diffuse6_filtertype, diffuse6_framerange, diffuse6_frameoffset, diffuse6_frameendaction, diffuse6_out);
	assign		diffuse6_out $const6 	%line{963} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:964
#     float metallic6_out = 0.0;
	functioncall	$const7 65 	%line{964} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp10 diffuse6_file_.filename $const8 	%line{25} %argrw{"wrr"}
	neq		$tmp11 $tmp10 $const1 	%argrw{"wrr"}
	if		$tmp11 29 42 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp12 diffuse6_uaddressmode $const9 	%line{26} %argrw{"wrr"}
	neq		$tmp13 $tmp12 $const1 	%argrw{"wrr"}
	if		$tmp13 40 40 	%argrw{"r"}
	lt		$tmp14 geomprop_UV0_out1.x $const5 	%argrw{"wrr"}
	neq		$tmp15 $tmp14 $const1 	%argrw{"wrr"}
	if		$tmp15 35 38 	%argrw{"r"}
	gt		$tmp16 geomprop_UV0_out1.x $const10 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const1 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	neq		$tmp18 $tmp15 $const1 	%argrw{"wrr"}
	assign		$tmp13 $tmp18 	%argrw{"wr"}
	neq		$tmp19 $tmp13 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp11 $tmp19 	%line{25} %argrw{"wr"}
	neq		$tmp20 $tmp11 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp20 44 57 	%line{26} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:27
#     {
	eq		$tmp21 diffuse6_vaddressmode $const9 	%line{27} %argrw{"wrr"}
	neq		$tmp22 $tmp21 $const1 	%argrw{"wrr"}
	if		$tmp22 55 55 	%argrw{"r"}
	lt		$tmp23 geomprop_UV0_out1.y $const5 	%argrw{"wrr"}
	neq		$tmp24 $tmp23 $const1 	%argrw{"wrr"}
	if		$tmp24 50 53 	%argrw{"r"}
	gt		$tmp25 geomprop_UV0_out1.y $const10 	%argrw{"wrr"}
	neq		$tmp26 $tmp25 $const1 	%argrw{"wrr"}
	assign		$tmp24 $tmp26 	%argrw{"wr"}
	neq		$tmp27 $tmp24 $const1 	%argrw{"wrr"}
	assign		$tmp22 $tmp27 	%argrw{"wr"}
	neq		$tmp28 $tmp22 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp20 $tmp28 	%line{26} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp20 60 60 	%line{25} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:29
#         return;
	assign		diffuse6_out diffuse6_default 	%line{29} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:30
#     }
	return	%line{30}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:33
#     vector2 st = mx_transform_uv(texcoord);
	assign		___670_missingColor diffuse6_default 	%line{33} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:34
#     out = texture(file.filename, st.x, st.y,
	functioncall	$const11 64 	%line{34} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:20
# }
	assign		___670_st.x geomprop_UV0_out1.x 	%line{20} %argrw{"wr"}
	assign		___670_st.y geomprop_UV0_out1.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:35
#                   "subimage", layer, "interp", filtertype,
	texture		diffuse6_out diffuse6_file_.filename ___670_st.x ___670_st.y $const12 diffuse6_layer $const13 diffuse6_filtertype $const14 ___670_missingColor $const15 diffuse6_uaddressmode $const16 diffuse6_vaddressmode $const17 diffuse6_file_.colorspace 	%line{35} %argrw{"wrrrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:965
#     mx_image_float(metallic6_file_, metallic6_layer, metallic6_default, geomprop_UV0_out1, metallic6_uaddressmode, metallic6_vaddressmode, metallic6_filtertype, metallic6_framerange, metallic6_frameoffset, metallic6_frameendaction, metallic6_out);
	assign		metallic6_out $const5 	%line{965} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:966
#     float roughness6_out = 0.0;
	functioncall	$const18 107 	%line{966} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp29 metallic6_file_.filename $const8 	%line{45} %argrw{"wrr"}
	neq		$tmp30 $tmp29 $const1 	%argrw{"wrr"}
	if		$tmp30 70 83 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp31 metallic6_uaddressmode $const9 	%line{46} %argrw{"wrr"}
	neq		$tmp32 $tmp31 $const1 	%argrw{"wrr"}
	if		$tmp32 81 81 	%argrw{"r"}
	lt		$tmp33 geomprop_UV0_out1.x $const5 	%argrw{"wrr"}
	neq		$tmp34 $tmp33 $const1 	%argrw{"wrr"}
	if		$tmp34 76 79 	%argrw{"r"}
	gt		$tmp35 geomprop_UV0_out1.x $const10 	%argrw{"wrr"}
	neq		$tmp36 $tmp35 $const1 	%argrw{"wrr"}
	assign		$tmp34 $tmp36 	%argrw{"wr"}
	neq		$tmp37 $tmp34 $const1 	%argrw{"wrr"}
	assign		$tmp32 $tmp37 	%argrw{"wr"}
	neq		$tmp38 $tmp32 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp30 $tmp38 	%line{45} %argrw{"wr"}
	neq		$tmp39 $tmp30 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp39 85 98 	%line{46} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:47
#     {
	eq		$tmp40 metallic6_vaddressmode $const9 	%line{47} %argrw{"wrr"}
	neq		$tmp41 $tmp40 $const1 	%argrw{"wrr"}
	if		$tmp41 96 96 	%argrw{"r"}
	lt		$tmp42 geomprop_UV0_out1.y $const5 	%argrw{"wrr"}
	neq		$tmp43 $tmp42 $const1 	%argrw{"wrr"}
	if		$tmp43 91 94 	%argrw{"r"}
	gt		$tmp44 geomprop_UV0_out1.y $const10 	%argrw{"wrr"}
	neq		$tmp45 $tmp44 $const1 	%argrw{"wrr"}
	assign		$tmp43 $tmp45 	%argrw{"wr"}
	neq		$tmp46 $tmp43 $const1 	%argrw{"wrr"}
	assign		$tmp41 $tmp46 	%argrw{"wr"}
	neq		$tmp47 $tmp41 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp39 $tmp47 	%line{46} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp39 101 101 	%line{45} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:49
#         return;
	assign		metallic6_out metallic6_default 	%line{49} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:50
#     }
	return	%line{50}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:53
#     vector2 st = mx_transform_uv(texcoord);
	assign		___672_missingColor metallic6_default 	%line{53} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:54
#     color rgb = texture(file.filename, st.x, st.y,
	functioncall	$const11 105 	%line{54} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:20
# }
	assign		___672_st.x geomprop_UV0_out1.x 	%line{20} %argrw{"wr"}
	assign		___672_st.y geomprop_UV0_out1.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:55
#                         "subimage", layer, "interp", filtertype,
	texture		___672_rgb metallic6_file_.filename ___672_st.x ___672_st.y $const12 metallic6_layer $const13 metallic6_filtertype $const14 ___672_missingColor $const15 metallic6_uaddressmode $const16 metallic6_vaddressmode 	%line{55} %argrw{"wrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:59
# }
	compref		metallic6_out ___672_rgb $const1 	%line{59} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:967
#     mx_image_float(roughness6_file_, roughness6_layer, roughness6_default, geomprop_UV0_out1, roughness6_uaddressmode, roughness6_vaddressmode, roughness6_filtertype, roughness6_framerange, roughness6_frameoffset, roughness6_frameendaction, roughness6_out);
	assign		roughness6_out $const5 	%line{967} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:968
#     vector normal6_out = vector(0.0);
	functioncall	$const18 149 	%line{968} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp48 roughness6_file_.filename $const8 	%line{45} %argrw{"wrr"}
	neq		$tmp49 $tmp48 $const1 	%argrw{"wrr"}
	if		$tmp49 112 125 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp50 roughness6_uaddressmode $const9 	%line{46} %argrw{"wrr"}
	neq		$tmp51 $tmp50 $const1 	%argrw{"wrr"}
	if		$tmp51 123 123 	%argrw{"r"}
	lt		$tmp52 geomprop_UV0_out1.x $const5 	%argrw{"wrr"}
	neq		$tmp53 $tmp52 $const1 	%argrw{"wrr"}
	if		$tmp53 118 121 	%argrw{"r"}
	gt		$tmp54 geomprop_UV0_out1.x $const10 	%argrw{"wrr"}
	neq		$tmp55 $tmp54 $const1 	%argrw{"wrr"}
	assign		$tmp53 $tmp55 	%argrw{"wr"}
	neq		$tmp56 $tmp53 $const1 	%argrw{"wrr"}
	assign		$tmp51 $tmp56 	%argrw{"wr"}
	neq		$tmp57 $tmp51 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp49 $tmp57 	%line{45} %argrw{"wr"}
	neq		$tmp58 $tmp49 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp58 127 140 	%line{46} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:47
#     {
	eq		$tmp59 roughness6_vaddressmode $const9 	%line{47} %argrw{"wrr"}
	neq		$tmp60 $tmp59 $const1 	%argrw{"wrr"}
	if		$tmp60 138 138 	%argrw{"r"}
	lt		$tmp61 geomprop_UV0_out1.y $const5 	%argrw{"wrr"}
	neq		$tmp62 $tmp61 $const1 	%argrw{"wrr"}
	if		$tmp62 133 136 	%argrw{"r"}
	gt		$tmp63 geomprop_UV0_out1.y $const10 	%argrw{"wrr"}
	neq		$tmp64 $tmp63 $const1 	%argrw{"wrr"}
	assign		$tmp62 $tmp64 	%argrw{"wr"}
	neq		$tmp65 $tmp62 $const1 	%argrw{"wrr"}
	assign		$tmp60 $tmp65 	%argrw{"wr"}
	neq		$tmp66 $tmp60 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp58 $tmp66 	%line{46} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp58 143 143 	%line{45} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:49
#         return;
	assign		roughness6_out roughness6_default 	%line{49} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:50
#     }
	return	%line{50}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:53
#     vector2 st = mx_transform_uv(texcoord);
	assign		___672_missingColor roughness6_default 	%line{53} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:54
#     color rgb = texture(file.filename, st.x, st.y,
	functioncall	$const11 147 	%line{54} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:20
# }
	assign		___672_st.x geomprop_UV0_out1.x 	%line{20} %argrw{"wr"}
	assign		___672_st.y geomprop_UV0_out1.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:55
#                         "subimage", layer, "interp", filtertype,
	texture		___672_rgb roughness6_file_.filename ___672_st.x ___672_st.y $const12 roughness6_layer $const13 roughness6_filtertype $const14 ___672_missingColor $const15 roughness6_uaddressmode $const16 roughness6_vaddressmode 	%line{55} %argrw{"wrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:59
# }
	compref		roughness6_out ___672_rgb $const1 	%line{59} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:969
#     mx_image_vector3(normal6_file_, normal6_layer, normal6_default, geomprop_UV0_out1, normal6_uaddressmode, normal6_vaddressmode, normal6_filtertype, normal6_framerange, normal6_frameoffset, normal6_frameendaction, normal6_out);
	assign		normal6_out $const19 	%line{969} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:970
#     color diffuse6_out_cm_out = color(0.0);
	functioncall	$const20 190 	%line{970} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:65
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp67 normal6_file_.filename $const8 	%line{65} %argrw{"wrr"}
	neq		$tmp68 $tmp67 $const1 	%argrw{"wrr"}
	if		$tmp68 154 167 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:66
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp69 normal6_uaddressmode $const9 	%line{66} %argrw{"wrr"}
	neq		$tmp70 $tmp69 $const1 	%argrw{"wrr"}
	if		$tmp70 165 165 	%argrw{"r"}
	lt		$tmp71 geomprop_UV0_out1.x $const5 	%argrw{"wrr"}
	neq		$tmp72 $tmp71 $const1 	%argrw{"wrr"}
	if		$tmp72 160 163 	%argrw{"r"}
	gt		$tmp73 geomprop_UV0_out1.x $const10 	%argrw{"wrr"}
	neq		$tmp74 $tmp73 $const1 	%argrw{"wrr"}
	assign		$tmp72 $tmp74 	%argrw{"wr"}
	neq		$tmp75 $tmp72 $const1 	%argrw{"wrr"}
	assign		$tmp70 $tmp75 	%argrw{"wr"}
	neq		$tmp76 $tmp70 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:65
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp68 $tmp76 	%line{65} %argrw{"wr"}
	neq		$tmp77 $tmp68 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:66
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp77 169 182 	%line{66} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:67
#     {
	eq		$tmp78 normal6_vaddressmode $const9 	%line{67} %argrw{"wrr"}
	neq		$tmp79 $tmp78 $const1 	%argrw{"wrr"}
	if		$tmp79 180 180 	%argrw{"r"}
	lt		$tmp80 geomprop_UV0_out1.y $const5 	%argrw{"wrr"}
	neq		$tmp81 $tmp80 $const1 	%argrw{"wrr"}
	if		$tmp81 175 178 	%argrw{"r"}
	gt		$tmp82 geomprop_UV0_out1.y $const10 	%argrw{"wrr"}
	neq		$tmp83 $tmp82 $const1 	%argrw{"wrr"}
	assign		$tmp81 $tmp83 	%argrw{"wr"}
	neq		$tmp84 $tmp81 $const1 	%argrw{"wrr"}
	assign		$tmp79 $tmp84 	%argrw{"wr"}
	neq		$tmp85 $tmp79 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:66
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp77 $tmp85 	%line{66} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:65
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp77 185 185 	%line{65} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:69
#         return;
	assign		normal6_out normal6_default 	%line{69} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:70
#     }
	return	%line{70}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:73
#     vector2 st = mx_transform_uv(texcoord);
	assign		___674_missingColor normal6_default 	%line{73} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:74
#     out = texture(file.filename, st.x, st.y,
	functioncall	$const11 189 	%line{74} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:20
# }
	assign		___674_st.x geomprop_UV0_out1.x 	%line{20} %argrw{"wr"}
	assign		___674_st.y geomprop_UV0_out1.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:75
#                   "subimage", layer, "interp", filtertype,
	texture		normal6_out normal6_file_.filename ___674_st.x ___674_st.y $const12 normal6_layer $const13 normal6_filtertype $const14 ___674_missingColor $const15 normal6_uaddressmode $const16 normal6_vaddressmode 	%line{75} %argrw{"wrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:971
#     NG_srgb_texture_to_lin_rec709_color3(diffuse6_out, diffuse6_out_cm_out);
	assign		diffuse6_out_cm_out $const6 	%line{971} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:972
#     vector mtlxnormalmap8_out = vector(0.0);
	functioncall	$const21 252 	%line{972} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:96
#     color bias_out = in + bias_in2_tmp;
	assign		___677_bias_in2_tmp $const22 	%line{96} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:97
#     float linSeg_in2_tmp = 12.920000;
	add		___677_bias_out diffuse6_out ___677_bias_in2_tmp 	%line{97} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:98
#     color linSeg_out = in / linSeg_in2_tmp;
	assign		___677_linSeg_in2_tmp $const23 	%line{98} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:99
#     float colorSeparate_outr = 0.0;
	div		___677_linSeg_out diffuse6_out ___677_linSeg_in2_tmp 	%line{99} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:100
#     float colorSeparate_outg = 0.0;
	assign		___677_colorSeparate_outr $const5 	%line{100} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:101
#     float colorSeparate_outb = 0.0;
	assign		___677_colorSeparate_outg $const5 	%line{101} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:102
#     NG_separate3_color3(in, colorSeparate_outr, colorSeparate_outg, colorSeparate_outb);
	assign		___677_colorSeparate_outb $const5 	%line{102} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:103
#     float max_in2_tmp = 0.000000;
	functioncall	$const24 212 	%line{103} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:83
#     float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
	assign		___676_N_extract_0_index_tmp $const1 	%line{83} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:84
#     int N_extract_1_index_tmp = 1;
	functioncall	$const25 203 	%line{84} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___676_N_extract_0_out diffuse6_out ___676_N_extract_0_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:85
#     float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
	assign		___676_N_extract_1_index_tmp $const26 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{85} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:86
#     int N_extract_2_index_tmp = 2;
	functioncall	$const25 206 	%line{86} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___676_N_extract_1_out diffuse6_out ___676_N_extract_1_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:87
#     float N_extract_2_out = mx_extract(in, N_extract_2_index_tmp);
	assign		___676_N_extract_2_index_tmp $const4 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{87} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:88
#     outr = N_extract_0_out;
	functioncall	$const25 209 	%line{88} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___676_N_extract_2_out diffuse6_out ___676_N_extract_2_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:89
#     outg = N_extract_1_out;
	assign		___677_colorSeparate_outr ___676_N_extract_0_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{89} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:90
#     outb = N_extract_2_out;
	assign		___677_colorSeparate_outg ___676_N_extract_1_out 	%line{90} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:91
# }
	assign		___677_colorSeparate_outb ___676_N_extract_2_out 	%line{91} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:104
#     color max_out = max(bias_out, max_in2_tmp);
	assign		___677_max_in2_tmp $const5 	%line{104} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:105
#     float isAboveR_value2_tmp = 0.040450;
	assign		$tmp86 ___677_max_in2_tmp 	%line{105} %argrw{"wr"}
	max		___677_max_out ___677_bias_out $tmp86 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:106
#     float isAboveR_in1_tmp = 1.000000;
	assign		___677_isAboveR_value2_tmp $const27 	%line{106} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:107
#     float isAboveR_in2_tmp = 0.000000;
	assign		___677_isAboveR_in1_tmp $const10 	%line{107} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:108
#     float isAboveR_out = mx_ternary(colorSeparate_outr > isAboveR_value2_tmp, isAboveR_in1_tmp, isAboveR_in2_tmp);
	assign		___677_isAboveR_in2_tmp $const5 	%line{108} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:109
#     float isAboveG_value2_tmp = 0.040450;
	gt		$tmp87 ___677_colorSeparate_outr ___677_isAboveR_value2_tmp 	%line{109} %argrw{"wrr"}
	functioncall	$const28 225 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp87 223 225 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___677_isAboveR_out ___677_isAboveR_in1_tmp 	%argrw{"wr"}
	return
	assign		___677_isAboveR_out ___677_isAboveR_in2_tmp 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:110
#     float isAboveG_in1_tmp = 1.000000;
	assign		___677_isAboveG_value2_tmp $const27 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{110} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:111
#     float isAboveG_in2_tmp = 0.000000;
	assign		___677_isAboveG_in1_tmp $const10 	%line{111} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:112
#     float isAboveG_out = mx_ternary(colorSeparate_outg > isAboveG_value2_tmp, isAboveG_in1_tmp, isAboveG_in2_tmp);
	assign		___677_isAboveG_in2_tmp $const5 	%line{112} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:113
#     float isAboveB_value2_tmp = 0.040450;
	gt		$tmp88 ___677_colorSeparate_outg ___677_isAboveG_value2_tmp 	%line{113} %argrw{"wrr"}
	functioncall	$const28 235 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp88 233 235 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___677_isAboveG_out ___677_isAboveG_in1_tmp 	%argrw{"wr"}
	return
	assign		___677_isAboveG_out ___677_isAboveG_in2_tmp 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:114
#     float isAboveB_in1_tmp = 1.000000;
	assign		___677_isAboveB_value2_tmp $const27 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{114} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:115
#     float isAboveB_in2_tmp = 0.000000;
	assign		___677_isAboveB_in1_tmp $const10 	%line{115} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:116
#     float isAboveB_out = mx_ternary(colorSeparate_outb > isAboveB_value2_tmp, isAboveB_in1_tmp, isAboveB_in2_tmp);
	assign		___677_isAboveB_in2_tmp $const5 	%line{116} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:117
#     float scale_in2_tmp = 1.055000;
	gt		$tmp89 ___677_colorSeparate_outb ___677_isAboveB_value2_tmp 	%line{117} %argrw{"wrr"}
	functioncall	$const28 245 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp89 243 245 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___677_isAboveB_out ___677_isAboveB_in1_tmp 	%argrw{"wr"}
	return
	assign		___677_isAboveB_out ___677_isAboveB_in2_tmp 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:118
#     color scale_out = max_out / scale_in2_tmp;
	assign		___677_scale_in2_tmp $const29 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{118} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:119
#     color isAbove_out = color( isAboveR_out,isAboveG_out,isAboveB_out );
	div		___677_scale_out ___677_max_out ___677_scale_in2_tmp 	%line{119} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:120
#     float powSeg_in2_tmp = 2.400000;
	color		___677_isAbove_out ___677_isAboveR_out ___677_isAboveG_out ___677_isAboveB_out 	%line{120} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:121
#     color powSeg_out = pow(scale_out, powSeg_in2_tmp);
	assign		___677_powSeg_in2_tmp $const30 	%line{121} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:122
#     color mix_out = mix(linSeg_out, powSeg_out, isAbove_out);
	pow		___677_powSeg_out ___677_scale_out ___677_powSeg_in2_tmp 	%line{122} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:123
#     out = mix_out;
	mix		___677_mix_out ___677_linSeg_out ___677_powSeg_out ___677_isAbove_out 	%line{123} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:124
# }
	assign		diffuse6_out_cm_out ___677_mix_out 	%line{124} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:973
#     mx_normalmap_float(normal6_out, mtlxnormalmap8_scale, geomprop_Nworld_out1, geomprop_Tworld_out1, geomprop_Bworld_out1, mtlxnormalmap8_out);
	assign		mtlxnormalmap8_out $const19 	%line{973} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:974
#     surfaceshader Castle_B_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const31 273 	%line{974} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:144
# }
	assign		$tmp90.x mtlxnormalmap8_scale 	%line{144} %argrw{"wr"}
	assign		$tmp90.y mtlxnormalmap8_scale 	%argrw{"wr"}
	functioncall	$const32 273 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:130
#     {
	eq		$tmp92 normal6_out $const19 	%line{130} %argrw{"wrr"}
	if		$tmp92 260 262 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:132
#     }
	assign		___678_decodedValue $const33 	%line{132} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:136
#     }
	mul		$tmp93 normal6_out $const34 	%line{136} %argrw{"wrr"}
	sub		___678_decodedValue $tmp93 $const10 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:139
# }
	compref		$tmp94 ___678_decodedValue $const1 	%line{139} %argrw{"wrr"}
	mul		$tmp95 geomprop_Tworld_out1 $tmp94 	%argrw{"wrr"}
	mul		$tmp96 $tmp95 $tmp90.x 	%argrw{"wrr"}
	compref		$tmp97 ___678_decodedValue $const26 	%argrw{"wrr"}
	mul		$tmp98 geomprop_Bworld_out1 $tmp97 	%argrw{"wrr"}
	mul		$tmp99 $tmp98 $tmp90.y 	%argrw{"wrr"}
	add		$tmp100 $tmp96 $tmp99 	%argrw{"wrr"}
	compref		$tmp101 ___678_decodedValue $const4 	%argrw{"wrr"}
	mul		$tmp102 geomprop_Nworld_out1 $tmp101 	%argrw{"wrr"}
	add		$tmp103 $tmp100 $tmp102 	%argrw{"wrr"}
	normalize	mtlxnormalmap8_out $tmp103 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:975
#     NG_standard_surface_surfaceshader_100(Castle_B_base, diffuse6_out_cm_out, Castle_B_diffuse_roughness, metallic6_out, Castle_B_specular, Castle_B_specular_color, roughness6_out, Castle_B_specular_IOR, Castle_B_specular_anisotropy, Castle_B_specular_rotation, Castle_B_transmission, Castle_B_transmission_color, Castle_B_transmission_depth, Castle_B_transmission_scatter, Castle_B_transmission_scatter_anisotropy, Castle_B_transmission_dispersion, Castle_B_transmission_extra_roughness, Castle_B_subsurface, diffuse6_out_cm_out, diffuse6_out_cm_out, Castle_B_subsurface_scale, Castle_B_subsurface_anisotropy, Castle_B_sheen, Castle_B_sheen_color, Castle_B_sheen_roughness, Castle_B_coat, Castle_B_coat_color, Castle_B_coat_roughness, Castle_B_coat_anisotropy, Castle_B_coat_rotation, Castle_B_coat_IOR, geomprop_Nworld_out1, Castle_B_coat_affect_color, Castle_B_coat_affect_roughness, Castle_B_thin_film_thickness, Castle_B_thin_film_IOR, Castle_B_emission, Castle_B_emission_color, Castle_B_opacity, Castle_B_thin_walled, mtlxnormalmap8_out, geomprop_Tworld_out1, Castle_B_out);
	assign		Castle_B_out.bsdf null_closure 	%line{975} %argrw{"wr"}
	assign		Castle_B_out.edf null_closure 	%argrw{"wr"}
	assign		Castle_B_out.opacity $const10 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:976
#     MATERIAL M_Castle_B_out = mx_surfacematerial(Castle_B_out, backsurfaceshader, displacementshader1);
	functioncall	$const35 789 	%line{976} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:324
#     vector2 coat_roughness_vector_out = vector2(0.0, 0.0);
	assign		___706_null_closure $const1 	%line{324} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:325
#     mx_roughness_anisotropy(coat_roughness, coat_anisotropy, coat_roughness_vector_out);
	assign		___706_coat_roughness_vector_out.x $const5 	%line{325} %argrw{"wr"}
	assign		___706_coat_roughness_vector_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:326
#     float coat_tangent_rotate_degree_in2_tmp = 360.000000;
	functioncall	$const36 299 	%line{326} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:149
#     if (anisotropy > 0.0)
	mul		$tmp104 Castle_B_coat_roughness Castle_B_coat_roughness 	%line{149} %argrw{"wrr"}
	functioncall	$const38 285 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp105 $tmp104 $const10 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___682_roughness_sqr $tmp105 $const37 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:150
#     {
	gt		$tmp106 Castle_B_coat_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{150} %argrw{"wrr"}
	if		$tmp106 297 299 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:152
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const38 290 	%line{152} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp108 Castle_B_coat_anisotropy $const39 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp107 $tmp108 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:152
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp109 $const10 $tmp107 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{152} %argrw{"wrr"}
	sqrt		___683_aspect $tmp109 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:153
#         result.y = roughness_sqr * aspect;
	div		$tmp110 ___682_roughness_sqr ___683_aspect 	%line{153} %argrw{"wrr"}
	min		___706_coat_roughness_vector_out.x $tmp110 $const10 	%argrw{"wrr"}
	assign		___706_coat_roughness_vector_out.x ___706_coat_roughness_vector_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:154
#     }
	mul		___706_coat_roughness_vector_out.y ___682_roughness_sqr ___683_aspect 	%line{154} %argrw{"wrr"}
	assign		___706_coat_roughness_vector_out.y ___706_coat_roughness_vector_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:158
#         result.y = roughness_sqr;
	assign		___706_coat_roughness_vector_out.x ___682_roughness_sqr 	%line{158} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:159
#     }
	assign		___706_coat_roughness_vector_out.y ___682_roughness_sqr 	%line{159} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:327
#     float coat_tangent_rotate_degree_out = coat_rotation * coat_tangent_rotate_degree_in2_tmp;
	assign		___706_coat_tangent_rotate_degree_in2_tmp $const40 	%line{327} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:328
#     color metal_reflectivity_out = base_color * base;
	mul		___706_coat_tangent_rotate_degree_out Castle_B_coat_rotation ___706_coat_tangent_rotate_degree_in2_tmp 	%line{328} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:329
#     color metal_edgecolor_out = specular_color * specular;
	mul		___706_metal_reflectivity_out diffuse6_out_cm_out Castle_B_base 	%line{329} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:330
#     float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
	mul		___706_metal_edgecolor_out Castle_B_specular_color Castle_B_specular 	%line{330} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:331
#     float tangent_rotate_degree_in2_tmp = 360.000000;
	mul		___706_coat_affect_roughness_multiply1_out Castle_B_coat_affect_roughness Castle_B_coat 	%line{331} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:332
#     float tangent_rotate_degree_out = specular_rotation * tangent_rotate_degree_in2_tmp;
	assign		___706_tangent_rotate_degree_in2_tmp $const40 	%line{332} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:333
#     float transmission_roughness_add_out = specular_roughness + transmission_extra_roughness;
	mul		___706_tangent_rotate_degree_out Castle_B_specular_rotation ___706_tangent_rotate_degree_in2_tmp 	%line{333} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:334
#     float subsurface_color_nonnegative_in2_tmp = 0.000000;
	add		___706_transmission_roughness_add_out roughness6_out Castle_B_transmission_extra_roughness 	%line{334} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:335
#     color subsurface_color_nonnegative_out = max(subsurface_color, subsurface_color_nonnegative_in2_tmp);
	assign		___706_subsurface_color_nonnegative_in2_tmp $const5 	%line{335} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:336
#     float coat_clamped_low_tmp = 0.000000;
	assign		$tmp111 ___706_subsurface_color_nonnegative_in2_tmp 	%line{336} %argrw{"wr"}
	max		___706_subsurface_color_nonnegative_out diffuse6_out_cm_out $tmp111 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:337
#     float coat_clamped_high_tmp = 1.000000;
	assign		___706_coat_clamped_low_tmp $const5 	%line{337} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:338
#     float coat_clamped_out = clamp(coat, coat_clamped_low_tmp, coat_clamped_high_tmp);
	assign		___706_coat_clamped_high_tmp $const10 	%line{338} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:339
#     color subsurface_radius_scaled_out = subsurface_radius * subsurface_scale;
	functioncall	$const38 315 	%line{339} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp112 Castle_B_coat ___706_coat_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___706_coat_clamped_out $tmp112 ___706_coat_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:340
#     float subsurface_selector_out = float(thin_walled);
	mul		___706_subsurface_radius_scaled_out diffuse6_out_cm_out Castle_B_subsurface_scale 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{340} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:341
#     float base_color_nonnegative_in2_tmp = 0.000000;
	assign		$tmp113 Castle_B_thin_walled 	%line{341} %argrw{"wr"}
	assign		___706_subsurface_selector_out $tmp113 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:342
#     color base_color_nonnegative_out = max(base_color, base_color_nonnegative_in2_tmp);
	assign		___706_base_color_nonnegative_in2_tmp $const5 	%line{342} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:343
#     color coat_attenuation_bg_tmp = color(1.000000, 1.000000, 1.000000);
	assign		$tmp114 ___706_base_color_nonnegative_in2_tmp 	%line{343} %argrw{"wr"}
	max		___706_base_color_nonnegative_out diffuse6_out_cm_out $tmp114 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:344
#     color coat_attenuation_out = mix(coat_attenuation_bg_tmp, coat_color, coat);
	assign		___706_coat_attenuation_bg_tmp $const41 	%line{344} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:345
#     float one_minus_coat_ior_in1_tmp = 1.000000;
	mix		___706_coat_attenuation_out ___706_coat_attenuation_bg_tmp Castle_B_coat_color Castle_B_coat 	%line{345} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:346
#     float one_minus_coat_ior_out = one_minus_coat_ior_in1_tmp - coat_IOR;
	assign		___706_one_minus_coat_ior_in1_tmp $const10 	%line{346} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:347
#     float one_plus_coat_ior_in1_tmp = 1.000000;
	sub		___706_one_minus_coat_ior_out ___706_one_minus_coat_ior_in1_tmp Castle_B_coat_IOR 	%line{347} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:348
#     float one_plus_coat_ior_out = one_plus_coat_ior_in1_tmp + coat_IOR;
	assign		___706_one_plus_coat_ior_in1_tmp $const10 	%line{348} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:349
#     color emission_weight_out = emission_color * emission1;
	add		___706_one_plus_coat_ior_out ___706_one_plus_coat_ior_in1_tmp Castle_B_coat_IOR 	%line{349} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:350
#     color opacity_luminance_out = color(0.0);
	mul		___706_emission_weight_out Castle_B_emission_color Castle_B_emission 	%line{350} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:351
#     mx_luminance_color3(opacity, color(0.272229, 0.674082, 0.053689), opacity_luminance_out);
	assign		___706_opacity_luminance_out $const6 	%line{351} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:352
#     vector coat_tangent_rotate_out = vector(0.0);
	functioncall	$const43 332 	%line{352} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:165
# }
	dot		$tmp116 Castle_B_opacity $const42 	%line{165} %argrw{"wrr"}
	assign		___706_opacity_luminance_out $tmp116 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:353
#     mx_rotate_vector3(tangent, coat_tangent_rotate_degree_out, coat_normal, coat_tangent_rotate_out);
	assign		___706_coat_tangent_rotate_out $const19 	%line{353} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:354
#     color artistic_ior_ior = color(0.0);
	functioncall	$const44 450 	%line{354} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:183
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const45 337 	%line{183} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp117 $const46 $const47 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___687_rotationRadians ___706_coat_tangent_rotate_degree_out $tmp117 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:184
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const48 400 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{184} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:170
#     float s = sin(angle);
	normalize	___686_nAxis geomprop_Nworld_out1 	%line{170} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:171
#     float c = cos(angle);
	sin		___686_s ___687_rotationRadians 	%line{171} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:172
#     float oc = 1.0 - c;
	cos		___686_c ___687_rotationRadians 	%line{172} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:173
# 
	sub		___686_oc $const10 ___686_c 	%line{173} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:175
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp118 ___686_nAxis $const1 	%line{175} %argrw{"wrr"}
	mul		$tmp119 ___686_oc $tmp118 	%argrw{"wrr"}
	compref		$tmp120 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp121 $tmp119 $tmp120 	%argrw{"wrr"}
	add		$tmp122 $tmp121 ___686_c 	%argrw{"wrr"}
	compref		$tmp123 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp124 ___686_oc $tmp123 	%argrw{"wrr"}
	compref		$tmp125 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp126 $tmp124 $tmp125 	%argrw{"wrr"}
	compref		$tmp127 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp128 $tmp127 ___686_s 	%argrw{"wrr"}
	sub		$tmp129 $tmp126 $tmp128 	%argrw{"wrr"}
	compref		$tmp130 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp131 ___686_oc $tmp130 	%argrw{"wrr"}
	compref		$tmp132 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp133 $tmp131 $tmp132 	%argrw{"wrr"}
	compref		$tmp134 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp135 $tmp134 ___686_s 	%argrw{"wrr"}
	add		$tmp136 $tmp133 $tmp135 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:176
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp137 ___686_nAxis $const1 	%line{176} %argrw{"wrr"}
	mul		$tmp138 ___686_oc $tmp137 	%argrw{"wrr"}
	compref		$tmp139 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp140 $tmp138 $tmp139 	%argrw{"wrr"}
	compref		$tmp141 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp142 $tmp141 ___686_s 	%argrw{"wrr"}
	add		$tmp143 $tmp140 $tmp142 	%argrw{"wrr"}
	compref		$tmp144 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp145 ___686_oc $tmp144 	%argrw{"wrr"}
	compref		$tmp146 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp147 $tmp145 $tmp146 	%argrw{"wrr"}
	add		$tmp148 $tmp147 ___686_c 	%argrw{"wrr"}
	compref		$tmp149 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp150 ___686_oc $tmp149 	%argrw{"wrr"}
	compref		$tmp151 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp152 $tmp150 $tmp151 	%argrw{"wrr"}
	compref		$tmp153 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp154 $tmp153 ___686_s 	%argrw{"wrr"}
	sub		$tmp155 $tmp152 $tmp154 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:177
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp156 ___686_nAxis $const4 	%line{177} %argrw{"wrr"}
	mul		$tmp157 ___686_oc $tmp156 	%argrw{"wrr"}
	compref		$tmp158 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp159 $tmp157 $tmp158 	%argrw{"wrr"}
	compref		$tmp160 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp161 $tmp160 ___686_s 	%argrw{"wrr"}
	sub		$tmp162 $tmp159 $tmp161 	%argrw{"wrr"}
	compref		$tmp163 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp164 ___686_oc $tmp163 	%argrw{"wrr"}
	compref		$tmp165 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp166 $tmp164 $tmp165 	%argrw{"wrr"}
	compref		$tmp167 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp168 $tmp167 ___686_s 	%argrw{"wrr"}
	add		$tmp169 $tmp166 $tmp168 	%argrw{"wrr"}
	compref		$tmp170 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp171 ___686_oc $tmp170 	%argrw{"wrr"}
	compref		$tmp172 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp173 $tmp171 $tmp172 	%argrw{"wrr"}
	add		$tmp174 $tmp173 ___686_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:175
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___687_m $tmp122 $tmp129 $tmp136 $const5 $tmp143 $tmp148 $tmp155 $const5 $tmp162 $tmp169 $tmp174 $const5 $const5 $const5 $const5 $const10 	%line{175} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:185
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp175.x geomprop_Tworld_out1 $const1 	%line{185} %argrw{"wrr"}
	compref		$tmp175.y geomprop_Tworld_out1 $const26 	%argrw{"wrr"}
	compref		$tmp175.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp175.w $const10 	%argrw{"wr"}
	functioncall	$const2 449 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp176 ___687_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp177 $tmp176 $tmp175.x 	%argrw{"wrr"}
	mxcompref	$tmp178 ___687_m $const26 $const1 	%argrw{"wrrr"}
	mul		$tmp179 $tmp178 $tmp175.y 	%argrw{"wrr"}
	add		$tmp180 $tmp177 $tmp179 	%argrw{"wrr"}
	mxcompref	$tmp181 ___687_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp182 $tmp181 $tmp175.z 	%argrw{"wrr"}
	add		$tmp183 $tmp180 $tmp182 	%argrw{"wrr"}
	mxcompref	$tmp184 ___687_m $const49 $const1 	%argrw{"wrrr"}
	mul		$tmp185 $tmp184 $tmp175.w 	%argrw{"wrr"}
	add		___687_trans.x $tmp183 $tmp185 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp186 ___687_m $const1 $const26 	%line{416} %argrw{"wrrr"}
	mul		$tmp187 $tmp186 $tmp175.x 	%argrw{"wrr"}
	mxcompref	$tmp188 ___687_m $const26 $const26 	%argrw{"wrrr"}
	mul		$tmp189 $tmp188 $tmp175.y 	%argrw{"wrr"}
	add		$tmp190 $tmp187 $tmp189 	%argrw{"wrr"}
	mxcompref	$tmp191 ___687_m $const4 $const26 	%argrw{"wrrr"}
	mul		$tmp192 $tmp191 $tmp175.z 	%argrw{"wrr"}
	add		$tmp193 $tmp190 $tmp192 	%argrw{"wrr"}
	mxcompref	$tmp194 ___687_m $const49 $const26 	%argrw{"wrrr"}
	mul		$tmp195 $tmp194 $tmp175.w 	%argrw{"wrr"}
	add		___687_trans.y $tmp193 $tmp195 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp196 ___687_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp197 $tmp196 $tmp175.x 	%argrw{"wrr"}
	mxcompref	$tmp198 ___687_m $const26 $const4 	%argrw{"wrrr"}
	mul		$tmp199 $tmp198 $tmp175.y 	%argrw{"wrr"}
	add		$tmp200 $tmp197 $tmp199 	%argrw{"wrr"}
	mxcompref	$tmp201 ___687_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp202 $tmp201 $tmp175.z 	%argrw{"wrr"}
	add		$tmp203 $tmp200 $tmp202 	%argrw{"wrr"}
	mxcompref	$tmp204 ___687_m $const49 $const4 	%argrw{"wrrr"}
	mul		$tmp205 $tmp204 $tmp175.w 	%argrw{"wrr"}
	add		___687_trans.z $tmp203 $tmp205 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp206 ___687_m $const1 $const49 	%line{418} %argrw{"wrrr"}
	mul		$tmp207 $tmp206 $tmp175.x 	%argrw{"wrr"}
	mxcompref	$tmp208 ___687_m $const26 $const49 	%argrw{"wrrr"}
	mul		$tmp209 $tmp208 $tmp175.y 	%argrw{"wrr"}
	add		$tmp210 $tmp207 $tmp209 	%argrw{"wrr"}
	mxcompref	$tmp211 ___687_m $const4 $const49 	%argrw{"wrrr"}
	mul		$tmp212 $tmp211 $tmp175.z 	%argrw{"wrr"}
	add		$tmp213 $tmp210 $tmp212 	%argrw{"wrr"}
	mxcompref	$tmp214 ___687_m $const49 $const49 	%argrw{"wrrr"}
	mul		$tmp215 $tmp214 $tmp175.w 	%argrw{"wrr"}
	add		___687_trans.w $tmp213 $tmp215 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:186
# }
	vector		___706_coat_tangent_rotate_out ___687_trans.x ___687_trans.y ___687_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{186} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:355
#     color artistic_ior_extinction = color(0.0);
	assign		___706_artistic_ior_ior $const6 	%line{355} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:356
#     mx_artistic_ior(metal_reflectivity_out, metal_edgecolor_out, artistic_ior_ior, artistic_ior_extinction);
	assign		___706_artistic_ior_extinction $const6 	%line{356} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:357
#     float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
	functioncall	$const50 477 	%line{357} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:194
#     color r_sqrt = sqrt(r);
	assign		$tmp216 $const5 	%line{194} %argrw{"wr"}
	assign		$tmp217 $const51 	%argrw{"wr"}
	functioncall	$const38 458 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:140
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp218 ___706_metal_reflectivity_out $tmp217 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{140} %argrw{"wrr"}
	max		___688_r $tmp218 $tmp216 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:195
#     color n_min = (1.0 - r) / (1.0 + r);
	sqrt		___688_r_sqrt ___688_r 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{195} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:196
#     color n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
	sub		$tmp219 $const10 ___688_r 	%line{196} %argrw{"wrr"}
	add		$tmp220 $const10 ___688_r 	%argrw{"wrr"}
	div		___688_n_min $tmp219 $tmp220 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:197
#     ior = mix(n_max, n_min, edge_color);
	add		$tmp221 $const10 ___688_r_sqrt 	%line{197} %argrw{"wrr"}
	sub		$tmp222 $const10 ___688_r_sqrt 	%argrw{"wrr"}
	div		___688_n_max $tmp221 $tmp222 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:198
# 
	mix		___706_artistic_ior_ior ___688_n_max ___688_n_min ___706_metal_edgecolor_out 	%line{198} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:200
#     color nm1 = ior - 1.0;
	add		___688_np1 ___706_artistic_ior_ior $const10 	%line{200} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:201
#     color k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
	sub		___688_nm1 ___706_artistic_ior_ior $const10 	%line{201} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:202
#     k2 = max(k2, 0.0);
	mul		$tmp223 ___688_np1 ___688_np1 	%line{202} %argrw{"wrr"}
	mul		$tmp224 $tmp223 ___688_r 	%argrw{"wrr"}
	mul		$tmp225 ___688_nm1 ___688_nm1 	%argrw{"wrr"}
	sub		$tmp226 $tmp224 $tmp225 	%argrw{"wrr"}
	sub		$tmp227 $const10 ___688_r 	%argrw{"wrr"}
	div		___688_k2 $tmp226 $tmp227 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:203
#     extinction = sqrt(k2);
	assign		$tmp228 $const5 	%line{203} %argrw{"wr"}
	max		___688_k2 ___688_k2 $tmp228 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:204
# }
	sqrt		___706_artistic_ior_extinction ___688_k2 	%line{204} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:358
#     vector tangent_rotate_out = vector(0.0);
	mul		___706_coat_affect_roughness_multiply2_out ___706_coat_affect_roughness_multiply1_out Castle_B_coat_roughness 	%line{358} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:359
#     mx_rotate_vector3(tangent, tangent_rotate_degree_out, normal1, tangent_rotate_out);
	assign		___706_tangent_rotate_out $const19 	%line{359} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:360
#     float transmission_roughness_clamped_low_tmp = 0.000000;
	functioncall	$const44 596 	%line{360} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:183
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const45 483 	%line{183} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp229 $const46 $const47 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___687_rotationRadians ___706_tangent_rotate_degree_out $tmp229 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:184
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const48 546 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{184} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:170
#     float s = sin(angle);
	normalize	___686_nAxis mtlxnormalmap8_out 	%line{170} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:171
#     float c = cos(angle);
	sin		___686_s ___687_rotationRadians 	%line{171} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:172
#     float oc = 1.0 - c;
	cos		___686_c ___687_rotationRadians 	%line{172} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:173
# 
	sub		___686_oc $const10 ___686_c 	%line{173} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:175
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp230 ___686_nAxis $const1 	%line{175} %argrw{"wrr"}
	mul		$tmp231 ___686_oc $tmp230 	%argrw{"wrr"}
	compref		$tmp232 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp233 $tmp231 $tmp232 	%argrw{"wrr"}
	add		$tmp234 $tmp233 ___686_c 	%argrw{"wrr"}
	compref		$tmp235 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp236 ___686_oc $tmp235 	%argrw{"wrr"}
	compref		$tmp237 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp238 $tmp236 $tmp237 	%argrw{"wrr"}
	compref		$tmp239 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp240 $tmp239 ___686_s 	%argrw{"wrr"}
	sub		$tmp241 $tmp238 $tmp240 	%argrw{"wrr"}
	compref		$tmp242 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp243 ___686_oc $tmp242 	%argrw{"wrr"}
	compref		$tmp244 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp245 $tmp243 $tmp244 	%argrw{"wrr"}
	compref		$tmp246 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp247 $tmp246 ___686_s 	%argrw{"wrr"}
	add		$tmp248 $tmp245 $tmp247 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:176
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp249 ___686_nAxis $const1 	%line{176} %argrw{"wrr"}
	mul		$tmp250 ___686_oc $tmp249 	%argrw{"wrr"}
	compref		$tmp251 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp252 $tmp250 $tmp251 	%argrw{"wrr"}
	compref		$tmp253 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp254 $tmp253 ___686_s 	%argrw{"wrr"}
	add		$tmp255 $tmp252 $tmp254 	%argrw{"wrr"}
	compref		$tmp256 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp257 ___686_oc $tmp256 	%argrw{"wrr"}
	compref		$tmp258 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp259 $tmp257 $tmp258 	%argrw{"wrr"}
	add		$tmp260 $tmp259 ___686_c 	%argrw{"wrr"}
	compref		$tmp261 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp262 ___686_oc $tmp261 	%argrw{"wrr"}
	compref		$tmp263 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp264 $tmp262 $tmp263 	%argrw{"wrr"}
	compref		$tmp265 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp266 $tmp265 ___686_s 	%argrw{"wrr"}
	sub		$tmp267 $tmp264 $tmp266 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:177
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp268 ___686_nAxis $const4 	%line{177} %argrw{"wrr"}
	mul		$tmp269 ___686_oc $tmp268 	%argrw{"wrr"}
	compref		$tmp270 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp271 $tmp269 $tmp270 	%argrw{"wrr"}
	compref		$tmp272 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp273 $tmp272 ___686_s 	%argrw{"wrr"}
	sub		$tmp274 $tmp271 $tmp273 	%argrw{"wrr"}
	compref		$tmp275 ___686_nAxis $const26 	%argrw{"wrr"}
	mul		$tmp276 ___686_oc $tmp275 	%argrw{"wrr"}
	compref		$tmp277 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp278 $tmp276 $tmp277 	%argrw{"wrr"}
	compref		$tmp279 ___686_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp280 $tmp279 ___686_s 	%argrw{"wrr"}
	add		$tmp281 $tmp278 $tmp280 	%argrw{"wrr"}
	compref		$tmp282 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp283 ___686_oc $tmp282 	%argrw{"wrr"}
	compref		$tmp284 ___686_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp285 $tmp283 $tmp284 	%argrw{"wrr"}
	add		$tmp286 $tmp285 ___686_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:175
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___687_m $tmp234 $tmp241 $tmp248 $const5 $tmp255 $tmp260 $tmp267 $const5 $tmp274 $tmp281 $tmp286 $const5 $const5 $const5 $const5 $const10 	%line{175} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:185
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp287.x geomprop_Tworld_out1 $const1 	%line{185} %argrw{"wrr"}
	compref		$tmp287.y geomprop_Tworld_out1 $const26 	%argrw{"wrr"}
	compref		$tmp287.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp287.w $const10 	%argrw{"wr"}
	functioncall	$const2 595 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp288 ___687_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp289 $tmp288 $tmp287.x 	%argrw{"wrr"}
	mxcompref	$tmp290 ___687_m $const26 $const1 	%argrw{"wrrr"}
	mul		$tmp291 $tmp290 $tmp287.y 	%argrw{"wrr"}
	add		$tmp292 $tmp289 $tmp291 	%argrw{"wrr"}
	mxcompref	$tmp293 ___687_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp294 $tmp293 $tmp287.z 	%argrw{"wrr"}
	add		$tmp295 $tmp292 $tmp294 	%argrw{"wrr"}
	mxcompref	$tmp296 ___687_m $const49 $const1 	%argrw{"wrrr"}
	mul		$tmp297 $tmp296 $tmp287.w 	%argrw{"wrr"}
	add		___687_trans.x $tmp295 $tmp297 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp298 ___687_m $const1 $const26 	%line{416} %argrw{"wrrr"}
	mul		$tmp299 $tmp298 $tmp287.x 	%argrw{"wrr"}
	mxcompref	$tmp300 ___687_m $const26 $const26 	%argrw{"wrrr"}
	mul		$tmp301 $tmp300 $tmp287.y 	%argrw{"wrr"}
	add		$tmp302 $tmp299 $tmp301 	%argrw{"wrr"}
	mxcompref	$tmp303 ___687_m $const4 $const26 	%argrw{"wrrr"}
	mul		$tmp304 $tmp303 $tmp287.z 	%argrw{"wrr"}
	add		$tmp305 $tmp302 $tmp304 	%argrw{"wrr"}
	mxcompref	$tmp306 ___687_m $const49 $const26 	%argrw{"wrrr"}
	mul		$tmp307 $tmp306 $tmp287.w 	%argrw{"wrr"}
	add		___687_trans.y $tmp305 $tmp307 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp308 ___687_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp309 $tmp308 $tmp287.x 	%argrw{"wrr"}
	mxcompref	$tmp310 ___687_m $const26 $const4 	%argrw{"wrrr"}
	mul		$tmp311 $tmp310 $tmp287.y 	%argrw{"wrr"}
	add		$tmp312 $tmp309 $tmp311 	%argrw{"wrr"}
	mxcompref	$tmp313 ___687_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp314 $tmp313 $tmp287.z 	%argrw{"wrr"}
	add		$tmp315 $tmp312 $tmp314 	%argrw{"wrr"}
	mxcompref	$tmp316 ___687_m $const49 $const4 	%argrw{"wrrr"}
	mul		$tmp317 $tmp316 $tmp287.w 	%argrw{"wrr"}
	add		___687_trans.z $tmp315 $tmp317 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp318 ___687_m $const1 $const49 	%line{418} %argrw{"wrrr"}
	mul		$tmp319 $tmp318 $tmp287.x 	%argrw{"wrr"}
	mxcompref	$tmp320 ___687_m $const26 $const49 	%argrw{"wrrr"}
	mul		$tmp321 $tmp320 $tmp287.y 	%argrw{"wrr"}
	add		$tmp322 $tmp319 $tmp321 	%argrw{"wrr"}
	mxcompref	$tmp323 ___687_m $const4 $const49 	%argrw{"wrrr"}
	mul		$tmp324 $tmp323 $tmp287.z 	%argrw{"wrr"}
	add		$tmp325 $tmp322 $tmp324 	%argrw{"wrr"}
	mxcompref	$tmp326 ___687_m $const49 $const49 	%argrw{"wrrr"}
	mul		$tmp327 $tmp326 $tmp287.w 	%argrw{"wrr"}
	add		___687_trans.w $tmp325 $tmp327 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:186
# }
	vector		___706_tangent_rotate_out ___687_trans.x ___687_trans.y ___687_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{186} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:361
#     float transmission_roughness_clamped_high_tmp = 1.000000;
	assign		___706_transmission_roughness_clamped_low_tmp $const5 	%line{361} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:362
#     float transmission_roughness_clamped_out = clamp(transmission_roughness_add_out, transmission_roughness_clamped_low_tmp, transmission_roughness_clamped_high_tmp);
	assign		___706_transmission_roughness_clamped_high_tmp $const10 	%line{362} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:363
#     float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
	functioncall	$const38 601 	%line{363} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp328 ___706_transmission_roughness_add_out ___706_transmission_roughness_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___706_transmission_roughness_clamped_out $tmp328 ___706_transmission_roughness_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:364
#     float coat_ior_to_F0_sqrt_out = one_minus_coat_ior_out / one_plus_coat_ior_out;
	mul		___706_coat_gamma_multiply_out ___706_coat_clamped_out Castle_B_coat_affect_color 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{364} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:365
#     int opacity_luminance_float_index_tmp = 0;
	div		___706_coat_ior_to_F0_sqrt_out ___706_one_minus_coat_ior_out ___706_one_plus_coat_ior_out 	%line{365} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:366
#     float opacity_luminance_float_out = mx_extract(opacity_luminance_out, opacity_luminance_float_index_tmp);
	assign		___706_opacity_luminance_float_index_tmp $const1 	%line{366} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:367
#     vector coat_tangent_rotate_normalize_out = normalize(coat_tangent_rotate_out);
	functioncall	$const25 606 	%line{367} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___706_opacity_luminance_float_out ___706_opacity_luminance_out ___706_opacity_luminance_float_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:368
#     float coat_affected_roughness_fg_tmp = 1.000000;
	normalize	___706_coat_tangent_rotate_normalize_out ___706_coat_tangent_rotate_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{368} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:369
#     float coat_affected_roughness_out = mix(specular_roughness, coat_affected_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___706_coat_affected_roughness_fg_tmp $const10 	%line{369} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:370
#     vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
	mix		___706_coat_affected_roughness_out roughness6_out ___706_coat_affected_roughness_fg_tmp ___706_coat_affect_roughness_multiply2_out 	%line{370} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:371
#     float coat_affected_transmission_roughness_fg_tmp = 1.000000;
	normalize	___706_tangent_rotate_normalize_out ___706_tangent_rotate_out 	%line{371} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:372
#     float coat_affected_transmission_roughness_out = mix(transmission_roughness_clamped_out, coat_affected_transmission_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___706_coat_affected_transmission_roughness_fg_tmp $const10 	%line{372} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:373
#     float coat_gamma_in2_tmp = 1.000000;
	mix		___706_coat_affected_transmission_roughness_out ___706_transmission_roughness_clamped_out ___706_coat_affected_transmission_roughness_fg_tmp ___706_coat_affect_roughness_multiply2_out 	%line{373} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:374
#     float coat_gamma_out = coat_gamma_multiply_out + coat_gamma_in2_tmp;
	assign		___706_coat_gamma_in2_tmp $const10 	%line{374} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:375
#     float coat_ior_to_F0_out = coat_ior_to_F0_sqrt_out * coat_ior_to_F0_sqrt_out;
	add		___706_coat_gamma_out ___706_coat_gamma_multiply_out ___706_coat_gamma_in2_tmp 	%line{375} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:376
#     float coat_tangent_value2_tmp = 0.000000;
	mul		___706_coat_ior_to_F0_out ___706_coat_ior_to_F0_sqrt_out ___706_coat_ior_to_F0_sqrt_out 	%line{376} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:377
#     vector coat_tangent_out = mx_ternary(coat_anisotropy > coat_tangent_value2_tmp, coat_tangent_rotate_normalize_out, tangent);
	assign		___706_coat_tangent_value2_tmp $const5 	%line{377} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:378
#     vector2 main_roughness_out = vector2(0.0, 0.0);
	gt		$tmp329 Castle_B_coat_anisotropy ___706_coat_tangent_value2_tmp 	%line{378} %argrw{"wrr"}
	functioncall	$const28 623 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp329 621 623 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___706_coat_tangent_out ___706_coat_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___706_coat_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:379
#     mx_roughness_anisotropy(coat_affected_roughness_out, specular_anisotropy, main_roughness_out);
	assign		___706_main_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{379} %argrw{"wr"}
	assign		___706_main_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:380
#     float main_tangent_value2_tmp = 0.000000;
	functioncall	$const36 644 	%line{380} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:149
#     if (anisotropy > 0.0)
	mul		$tmp330 ___706_coat_affected_roughness_out ___706_coat_affected_roughness_out 	%line{149} %argrw{"wrr"}
	functioncall	$const38 630 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp331 $tmp330 $const10 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___682_roughness_sqr $tmp331 $const37 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:150
#     {
	gt		$tmp332 Castle_B_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{150} %argrw{"wrr"}
	if		$tmp332 642 644 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:152
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const38 635 	%line{152} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp334 Castle_B_specular_anisotropy $const39 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp333 $tmp334 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:152
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp335 $const10 $tmp333 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{152} %argrw{"wrr"}
	sqrt		___683_aspect $tmp335 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:153
#         result.y = roughness_sqr * aspect;
	div		$tmp336 ___682_roughness_sqr ___683_aspect 	%line{153} %argrw{"wrr"}
	min		___706_main_roughness_out.x $tmp336 $const10 	%argrw{"wrr"}
	assign		___706_main_roughness_out.x ___706_main_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:154
#     }
	mul		___706_main_roughness_out.y ___682_roughness_sqr ___683_aspect 	%line{154} %argrw{"wrr"}
	assign		___706_main_roughness_out.y ___706_main_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:158
#         result.y = roughness_sqr;
	assign		___706_main_roughness_out.x ___682_roughness_sqr 	%line{158} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:159
#     }
	assign		___706_main_roughness_out.y ___682_roughness_sqr 	%line{159} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:381
#     vector main_tangent_out = mx_ternary(specular_anisotropy > main_tangent_value2_tmp, tangent_rotate_normalize_out, tangent);
	assign		___706_main_tangent_value2_tmp $const5 	%line{381} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:382
#     vector2 transmission_roughness_out = vector2(0.0, 0.0);
	gt		$tmp337 Castle_B_specular_anisotropy ___706_main_tangent_value2_tmp 	%line{382} %argrw{"wrr"}
	functioncall	$const28 652 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp337 650 652 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___706_main_tangent_out ___706_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___706_main_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:383
#     mx_roughness_anisotropy(coat_affected_transmission_roughness_out, specular_anisotropy, transmission_roughness_out);
	assign		___706_transmission_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{383} %argrw{"wr"}
	assign		___706_transmission_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:384
#     color coat_affected_subsurface_color_out = pow(subsurface_color_nonnegative_out, coat_gamma_out);
	functioncall	$const36 673 	%line{384} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:149
#     if (anisotropy > 0.0)
	mul		$tmp338 ___706_coat_affected_transmission_roughness_out ___706_coat_affected_transmission_roughness_out 	%line{149} %argrw{"wrr"}
	functioncall	$const38 659 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp339 $tmp338 $const10 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___682_roughness_sqr $tmp339 $const37 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:150
#     {
	gt		$tmp340 Castle_B_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{150} %argrw{"wrr"}
	if		$tmp340 671 673 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:152
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const38 664 	%line{152} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp342 Castle_B_specular_anisotropy $const39 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp341 $tmp342 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:152
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp343 $const10 $tmp341 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{152} %argrw{"wrr"}
	sqrt		___683_aspect $tmp343 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:153
#         result.y = roughness_sqr * aspect;
	div		$tmp344 ___682_roughness_sqr ___683_aspect 	%line{153} %argrw{"wrr"}
	min		___706_transmission_roughness_out.x $tmp344 $const10 	%argrw{"wrr"}
	assign		___706_transmission_roughness_out.x ___706_transmission_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:154
#     }
	mul		___706_transmission_roughness_out.y ___682_roughness_sqr ___683_aspect 	%line{154} %argrw{"wrr"}
	assign		___706_transmission_roughness_out.y ___706_transmission_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:158
#         result.y = roughness_sqr;
	assign		___706_transmission_roughness_out.x ___682_roughness_sqr 	%line{158} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:159
#     }
	assign		___706_transmission_roughness_out.y ___682_roughness_sqr 	%line{159} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:385
#     color coat_affected_diffuse_color_out = pow(base_color_nonnegative_out, coat_gamma_out);
	pow		___706_coat_affected_subsurface_color_out ___706_subsurface_color_nonnegative_out ___706_coat_gamma_out 	%line{385} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:386
#     float one_minus_coat_ior_to_F0_in1_tmp = 1.000000;
	pow		___706_coat_affected_diffuse_color_out ___706_base_color_nonnegative_out ___706_coat_gamma_out 	%line{386} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:387
#     float one_minus_coat_ior_to_F0_out = one_minus_coat_ior_to_F0_in1_tmp - coat_ior_to_F0_out;
	assign		___706_one_minus_coat_ior_to_F0_in1_tmp $const10 	%line{387} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:388
#     color emission_color0_out = color(0.0);
	sub		___706_one_minus_coat_ior_to_F0_out ___706_one_minus_coat_ior_to_F0_in1_tmp ___706_coat_ior_to_F0_out 	%line{388} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:389
#     NG_convert_float_color3(one_minus_coat_ior_to_F0_out, emission_color0_out);
	assign		___706_emission_color0_out $const6 	%line{389} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:390
#     BSDF coat_bsdf_out = null_closure;
	functioncall	$const52 681 	%line{390} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:225
#     out = combine_out;
	color		___691_combine_out ___706_one_minus_coat_ior_to_F0_out ___706_one_minus_coat_ior_to_F0_out ___706_one_minus_coat_ior_to_F0_out 	%line{225} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:226
# }
	assign		___706_emission_color0_out ___691_combine_out 	%line{226} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:391
#     mx_dielectric_bsdf(coat, color(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, 0.000000, 1.500000, coat_normal, coat_tangent_out, "ggx", "R", coat_bsdf_out);
	assign		___706_coat_bsdf_out ___706_null_closure 	%line{391} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:392
#     float metal_bsdf_weight_tmp = 1.000000;
	functioncall	$const56 693 	%line{392} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:209
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp346 $const55 $const57 	%line{209} %argrw{"wrr"}
	if		$tmp346 686 687 	%argrw{"r"}
	assign		___689_reflection_tint $const6 	%argrw{"wr"}
	assign		___689_reflection_tint $const41 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:210
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp347 $const55 $const55 	%line{210} %argrw{"wrr"}
	if		$tmp347 690 691 	%argrw{"r"}
	assign		___689_transmission_tint $const6 	%argrw{"wr"}
	assign		___689_transmission_tint $const41 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:211
# }
	closure		$tmp348 $const60 geomprop_Nworld_out1 ___706_coat_tangent_out ___689_reflection_tint ___689_transmission_tint ___706_coat_roughness_vector_out.x ___706_coat_roughness_vector_out.y Castle_B_coat_IOR $const54 $const58 $const5 $const59 $const53 	%line{211} %argrw{"wrrrrrrrrrrrrr"}
	mul		___706_coat_bsdf_out $tmp348 Castle_B_coat 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:393
#     string metal_bsdf_distribution_tmp = "ggx";
	assign		___706_metal_bsdf_weight_tmp $const10 	%line{393} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:394
#     BSDF metal_bsdf_out = metal_bsdf_weight_tmp * conductor_bsdf(normal1, main_tangent_out, main_roughness_out.x, main_roughness_out.y, artistic_ior_ior, artistic_ior_extinction, metal_bsdf_distribution_tmp, "thinfilm_thickness", thin_film_thickness, "thinfilm_ior", thin_film_IOR);
	assign		___706_metal_bsdf_distribution_tmp $const54 	%line{394} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:395
#     BSDF specular_bsdf_out = null_closure;
	closure		$tmp349 $const61 mtlxnormalmap8_out ___706_main_tangent_out ___706_main_roughness_out.x ___706_main_roughness_out.y ___706_artistic_ior_ior ___706_artistic_ior_extinction ___706_metal_bsdf_distribution_tmp $const58 Castle_B_thin_film_thickness $const59 Castle_B_thin_film_IOR 	%line{395} %argrw{"wrrrrrrrrrrrr"}
	mul		___706_metal_bsdf_out $tmp349 ___706_metal_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:396
#     mx_dielectric_bsdf(specular, specular_color, specular_IOR, main_roughness_out, thin_film_thickness, thin_film_IOR, normal1, main_tangent_out, "ggx", "R", specular_bsdf_out);
	assign		___706_specular_bsdf_out ___706_null_closure 	%line{396} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:397
#     BSDF transmission_bsdf_out = null_closure;
	functioncall	$const56 709 	%line{397} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:209
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp350 $const55 $const57 	%line{209} %argrw{"wrr"}
	if		$tmp350 702 703 	%argrw{"r"}
	assign		___689_reflection_tint $const6 	%argrw{"wr"}
	assign		___689_reflection_tint Castle_B_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:210
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp351 $const55 $const55 	%line{210} %argrw{"wrr"}
	if		$tmp351 706 707 	%argrw{"r"}
	assign		___689_transmission_tint $const6 	%argrw{"wr"}
	assign		___689_transmission_tint Castle_B_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:211
# }
	closure		$tmp352 $const60 mtlxnormalmap8_out ___706_main_tangent_out ___689_reflection_tint ___689_transmission_tint ___706_main_roughness_out.x ___706_main_roughness_out.y Castle_B_specular_IOR $const54 $const58 Castle_B_thin_film_thickness $const59 Castle_B_thin_film_IOR 	%line{211} %argrw{"wrrrrrrrrrrrrr"}
	mul		___706_specular_bsdf_out $tmp352 Castle_B_specular 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:398
#     mx_dielectric_bsdf(1.000000, transmission_color, specular_IOR, transmission_roughness_out, 0.000000, 1.500000, normal1, main_tangent_out, "ggx", "T", transmission_bsdf_out);
	assign		___706_transmission_bsdf_out ___706_null_closure 	%line{398} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:399
#     BSDF sheen_bsdf_out = sheen1 * sheen_bsdf(normal1, sheen_color, sheen_roughness);
	functioncall	$const56 721 	%line{399} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:209
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp353 $const57 $const57 	%line{209} %argrw{"wrr"}
	if		$tmp353 714 715 	%argrw{"r"}
	assign		___689_reflection_tint $const6 	%argrw{"wr"}
	assign		___689_reflection_tint Castle_B_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:210
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp354 $const57 $const55 	%line{210} %argrw{"wrr"}
	if		$tmp354 718 719 	%argrw{"r"}
	assign		___689_transmission_tint $const6 	%argrw{"wr"}
	assign		___689_transmission_tint Castle_B_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:211
# }
	closure		$tmp355 $const60 mtlxnormalmap8_out ___706_main_tangent_out ___689_reflection_tint ___689_transmission_tint ___706_transmission_roughness_out.x ___706_transmission_roughness_out.y Castle_B_specular_IOR $const54 $const58 $const5 $const59 $const53 	%line{211} %argrw{"wrrrrrrrrrrrrr"}
	mul		___706_transmission_bsdf_out $tmp355 $const10 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:400
#     float translucent_bsdf_weight_tmp = 1.000000;
	closure		$tmp356 $const62 mtlxnormalmap8_out Castle_B_sheen_color Castle_B_sheen_roughness 	%line{400} %argrw{"wrrrr"}
	mul		___706_sheen_bsdf_out $tmp356 Castle_B_sheen 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:401
#     BSDF translucent_bsdf_out = translucent_bsdf_weight_tmp * translucent_bsdf(normal1, coat_affected_subsurface_color_out);
	assign		___706_translucent_bsdf_weight_tmp $const10 	%line{401} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:402
#     BSDF subsurface_bsdf_out = null_closure;
	closure		$tmp357 $const63 mtlxnormalmap8_out ___706_coat_affected_subsurface_color_out 	%line{402} %argrw{"wrrr"}
	mul		___706_translucent_bsdf_out $tmp357 ___706_translucent_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:403
#     mx_subsurface_bsdf(1.000000, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal1, subsurface_bsdf_out);
	assign		___706_subsurface_bsdf_out ___706_null_closure 	%line{403} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:404
#     BSDF selected_subsurface_bsdf_out = mix(subsurface_bsdf_out, translucent_bsdf_out, subsurface_selector_out);
	functioncall	$const64 730 	%line{404} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:219
# #endif
	mul		$tmp358 $const10 ___706_coat_affected_subsurface_color_out 	%line{219} %argrw{"wrr"}
	closure		___706_subsurface_bsdf_out $const65 mtlxnormalmap8_out $tmp358 $const10 ___706_subsurface_radius_scaled_out Castle_B_subsurface_anisotropy 	%argrw{"wrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:405
#     BSDF diffuse_bsdf_out = base * oren_nayar_diffuse_bsdf(normal1, coat_affected_diffuse_color_out, diffuse_roughness);
	functioncall	$const66 735 	%line{405} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp359 $const10 ___706_subsurface_selector_out 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp360 ___706_subsurface_bsdf_out $tmp359 	%argrw{"wrr"}
	mul		$tmp361 ___706_translucent_bsdf_out ___706_subsurface_selector_out 	%argrw{"wrr"}
	add		___706_selected_subsurface_bsdf_out $tmp360 $tmp361 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:406
#     BSDF subsurface_mix_out = mix(diffuse_bsdf_out, selected_subsurface_bsdf_out, subsurface1);
	closure		$tmp362 $const67 mtlxnormalmap8_out ___706_coat_affected_diffuse_color_out Castle_B_diffuse_roughness 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{406} %argrw{"wrrrr"}
	mul		___706_diffuse_bsdf_out $tmp362 Castle_B_base 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:407
#     BSDF sheen_layer_out = layer(sheen_bsdf_out, subsurface_mix_out);
	functioncall	$const66 742 	%line{407} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp363 $const10 Castle_B_subsurface 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp364 ___706_diffuse_bsdf_out $tmp363 	%argrw{"wrr"}
	mul		$tmp365 ___706_selected_subsurface_bsdf_out Castle_B_subsurface 	%argrw{"wrr"}
	add		___706_subsurface_mix_out $tmp364 $tmp365 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:408
#     BSDF transmission_mix_out = mix(sheen_layer_out, transmission_bsdf_out, transmission);
	closure		___706_sheen_layer_out $const68 ___706_sheen_bsdf_out ___706_subsurface_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{408} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:409
#     BSDF specular_layer_out = layer(specular_bsdf_out, transmission_mix_out);
	functioncall	$const66 748 	%line{409} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp366 $const10 Castle_B_transmission 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp367 ___706_sheen_layer_out $tmp366 	%argrw{"wrr"}
	mul		$tmp368 ___706_transmission_bsdf_out Castle_B_transmission 	%argrw{"wrr"}
	add		___706_transmission_mix_out $tmp367 $tmp368 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:410
#     BSDF metalness_mix_out = mix(specular_layer_out, metal_bsdf_out, metalness);
	closure		___706_specular_layer_out $const68 ___706_specular_bsdf_out ___706_transmission_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{410} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:411
#     BSDF thin_film_layer_attenuated_out = (coat_attenuation_out * metalness_mix_out);
	functioncall	$const66 754 	%line{411} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp369 $const10 metallic6_out 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp370 ___706_specular_layer_out $tmp369 	%argrw{"wrr"}
	mul		$tmp371 ___706_metal_bsdf_out metallic6_out 	%argrw{"wrr"}
	add		___706_metalness_mix_out $tmp370 $tmp371 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:412
#     BSDF coat_layer_out = layer(coat_bsdf_out, thin_film_layer_attenuated_out);
	mul		___706_thin_film_layer_attenuated_out ___706_metalness_mix_out ___706_coat_attenuation_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{412} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:413
#     EDF emission_edf_out = uniform_edf(emission_weight_out);
	closure		___706_coat_layer_out $const68 ___706_coat_bsdf_out ___706_thin_film_layer_attenuated_out 	%line{413} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:414
#     EDF coat_tinted_emission_edf_out = (coat_color * emission_edf_out);
	closure		___706_emission_edf_out $const69 ___706_emission_weight_out 	%line{414} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:415
#     EDF coat_emission_edf_out = null_closure;
	mul		___706_coat_tinted_emission_edf_out ___706_emission_edf_out Castle_B_coat_color 	%line{415} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:416
#     mx_generalized_schlick_edf(emission_color0_out, color(0.000000, 0.000000, 0.000000), 5.000000, coat_tinted_emission_edf_out, coat_emission_edf_out);
	assign		___706_coat_emission_edf_out ___706_null_closure 	%line{416} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:417
#     EDF blended_coat_emission_edf_out = mix(emission_edf_out, coat_emission_edf_out, coat);
	functioncall	$const71 771 	%line{417} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:310
#     color f = mx_fresnel_schlick(NdotV, color0, color90, exponent);
	neg		$tmp374 I 	%line{310} %argrw{"wr"}
	dot		$tmp373 N $tmp374 	%argrw{"wrr"}
	fabs		___704_NdotV $tmp373 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:311
#     result = base * f;
	functioncall	$const72 770 	%line{311} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:304
#     return mix(f0, f90, pow(x, exponent));
	sub		$tmp375 $const10 ___704_NdotV 	%line{304} %argrw{"wrr"}
	functioncall	$const38 768 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp376 $tmp375 $const10 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___703_x $tmp376 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:305
# }
	pow		$tmp377 ___703_x $const70 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{305} %argrw{"wrr"}
	mix		___704_f ___706_emission_color0_out $const6 $tmp377 	%argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:312
# }
	mul		___706_coat_emission_edf_out ___706_coat_tinted_emission_edf_out ___704_f 	%line{312} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:418
#     surfaceshader shader_constructor_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const66 776 	%line{418} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp378 $const10 Castle_B_coat 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp379 ___706_emission_edf_out $tmp378 	%argrw{"wrr"}
	mul		$tmp380 ___706_coat_emission_edf_out Castle_B_coat 	%argrw{"wrr"}
	add		___706_blended_coat_emission_edf_out $tmp379 $tmp380 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:419
#     mx_surface(coat_layer_out, blended_coat_emission_edf_out, opacity_luminance_float_out, 0, shader_constructor_out);
	assign		___706_shader_constructor_out.bsdf ___706_null_closure 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{419} %argrw{"wr"}
	assign		___706_shader_constructor_out.edf ___706_null_closure 	%argrw{"wr"}
	assign		___706_shader_constructor_out.opacity $const10 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:420
#     out = shader_constructor_out;
	functioncall	$const73 786 	%line{420} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:317
#     result.edf     = edf;
	assign		___706_shader_constructor_out.bsdf ___706_coat_layer_out 	%line{317} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:318
#     result.opacity = clamp(opacity, 0.0, 1.0);
	assign		___706_shader_constructor_out.edf ___706_blended_coat_emission_edf_out 	%line{318} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:319
# }
	functioncall	$const38 785 	%line{319} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp381 ___706_opacity_luminance_float_out $const10 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___706_shader_constructor_out.opacity $tmp381 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:319
# }
	assign		___706_shader_constructor_out.opacity ___706_shader_constructor_out.opacity 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{319} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:421
# }
	assign		Castle_B_out.bsdf ___706_shader_constructor_out.bsdf 	%line{421} %argrw{"wr"}
	assign		Castle_B_out.edf ___706_shader_constructor_out.edf 	%argrw{"wr"}
	assign		Castle_B_out.opacity ___706_shader_constructor_out.opacity 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:977
#     out = M_Castle_B_out;
	functioncall	$const74 799 	%line{977} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:426
#     return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
	functioncall	$const38 793 	%line{426} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp382 Castle_B_out.opacity $const10 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___707_opacity_weight $tmp382 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:427
# }
	add		$tmp383 Castle_B_out.bsdf Castle_B_out.edf 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl"} %line{427} %argrw{"wrr"}
	mul		$tmp384 $tmp383 ___707_opacity_weight 	%argrw{"wrr"}
	closure		$tmp385 $const75 	%argrw{"wr"}
	sub		$tmp386 $const10 ___707_opacity_weight 	%argrw{"wrr"}
	mul		$tmp387 $tmp385 $tmp386 	%argrw{"wrr"}
	add		M_Castle_B_out $tmp384 $tmp387 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Castle_B.osl:978
# }
	assign		out M_Castle_B_out 	%line{978} %argrw{"wr"}
	end
