OpenShadingLanguage 1.00
# Compiled by oslc 1.13.3.0dev
# options: -q -ID:\Work\materialx\OSL_ILM\bin\shaders -o D:\Work\materialx\bernard_MaterialX_3\build\bin\resources\Materials\Examples\StandardSurface\standard_surface_chess_set\M_Pawn_Top_W.oso
shader M_Pawn_Top_W	%meta{string,mtlx_category,"surfacematerial"} %meta{string,mtlx_name,"M_Pawn_Top_W"} 
param	struct surfaceshader	backsurfaceshader			%read{2147483647,-1} %write{2147483647,-1} %struct{"surfaceshader"} %structfields{bsdf,edf,opacity} %structfieldtypes{"CCf"} %structnfields{3}
param	closure color	backsurfaceshader.bsdf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{0}
param	closure color	backsurfaceshader.edf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{1}
param	float	backsurfaceshader.opacity	1		%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{2}
param	vector	displacementshader1	0 0 0		%read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Nworld_space	"world"		%read{6,6} %write{2147483647,-1}
param	string	geomprop_Tworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Tworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_UV0_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Bworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Bworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	mtlximage21_file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Materials/Examples/StandardSurface/chess_set/pawn_shared_roughness.jpg"		%meta{string,label,"Filename"} %meta{string,widget,"filename"}  %read{1,1} %write{2147483647,-1}
param	string	mtlximage21_file_colorspace	""		%meta{string,widget,"colorspace"}  %read{2,2} %write{2147483647,-1}
param	string	mtlximage21_layer	""		%meta{string,label,"Layer"}  %read{60,60} %write{2147483647,-1}
param	float	mtlximage21_default	0		%meta{string,label,"Default Color"} %meta{string,widget,"number"}  %read{54,56} %write{2147483647,-1}
param	string	mtlximage21_uaddressmode	"periodic"		%meta{string,label,"Address Mode U"}  %read{25,60} %write{2147483647,-1}
param	string	mtlximage21_vaddressmode	"periodic"		%meta{string,label,"Address Mode V"}  %read{40,60} %write{2147483647,-1}
param	string	mtlximage21_filtertype	"linear"		%meta{string,label,"Filter Type"}  %read{60,60} %write{2147483647,-1}
param	string	mtlximage21_framerange	""		%meta{string,label,"Frame Range"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	mtlximage21_frameoffset	0		%meta{string,label,"Frame Offset"} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	mtlximage21_frameendaction	"constant"		%meta{string,label,"Frame End Action"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	mtlximage20_file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Materials/Examples/StandardSurface/chess_set/pawn_shared_normal.jpg"		%meta{string,label,"Filename"} %meta{string,widget,"filename"}  %read{3,3} %write{2147483647,-1}
param	string	mtlximage20_file_colorspace	""		%meta{string,widget,"colorspace"}  %read{4,4} %write{2147483647,-1}
param	string	mtlximage20_layer	""		%meta{string,label,"Layer"}  %read{102,102} %write{2147483647,-1}
param	vector	mtlximage20_default	0 0 0		%meta{string,label,"Default Color"}  %read{96,98} %write{2147483647,-1}
param	string	mtlximage20_uaddressmode	"periodic"		%meta{string,label,"Address Mode U"}  %read{67,102} %write{2147483647,-1}
param	string	mtlximage20_vaddressmode	"periodic"		%meta{string,label,"Address Mode V"}  %read{82,102} %write{2147483647,-1}
param	string	mtlximage20_filtertype	"linear"		%meta{string,label,"Filter Type"}  %read{102,102} %write{2147483647,-1}
param	string	mtlximage20_framerange	""		%meta{string,label,"Frame Range"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	mtlximage20_frameoffset	0		%meta{string,label,"Frame Offset"} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	mtlximage20_frameendaction	"constant"		%meta{string,label,"Frame End Action"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	mtlxnormalmap15_scale	1		%meta{string,widget,"number"}  %read{105,106} %write{2147483647,-1}
param	float	Pawn_Top_W_base	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Base"} %meta{string,page,"Base"} %meta{string,help,"Multiplier on the intensity of the diffuse reflection."} %meta{string,widget,"number"}  %read{152,587} %write{2147483647,-1}
param	color	Pawn_Top_W_base_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Base Color"} %meta{string,page,"Base"} %meta{string,help,"Color of the diffuse reflection."}  %read{152,171} %write{2147483647,-1}
param	float	Pawn_Top_W_diffuse_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Diffuse Roughness"} %meta{string,page,"Base"} %meta{int,uiadvanced,1} %meta{string,help,"Roughness of the diffuse reflection. Higher values cause the surface to appear flatter and darker."} %meta{string,widget,"number"}  %read{586,586} %write{2147483647,-1}
param	float	Pawn_Top_W_metalness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Metalness"} %meta{string,page,"Base"} %meta{string,help,"Specifies how metallic the material appears. At its maximum, the surface behaves like a metal, using fully specular reflection and complex fresnel."} %meta{string,widget,"number"}  %read{601,603} %write{2147483647,-1}
param	float	Pawn_Top_W_specular	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular"} %meta{string,page,"Specular"} %meta{string,help,"Multiplier on the intensity of the specular reflection."} %meta{string,widget,"number"}  %read{153,559} %write{2147483647,-1}
param	color	Pawn_Top_W_specular_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Specular Color"} %meta{string,page,"Specular"} %meta{string,help,"Color tint on the specular reflection."}  %read{153,557} %write{2147483647,-1}
param	float	Pawn_Top_W_specular_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Index of Refraction"} %meta{string,page,"Specular"} %meta{string,help,"Index of refraction for specular reflection."} %meta{string,widget,"number"}  %read{558,570} %write{2147483647,-1}
param	float	Pawn_Top_W_specular_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Anisotropy"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"The directional bias of reflected and transmitted light resulting in materials appearing rougher or glossier in certain directions."} %meta{string,widget,"number"}  %read{481,513} %write{2147483647,-1}
param	float	Pawn_Top_W_specular_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Rotation"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"Rotation of the axis of specular anisotropy around the surface normal."} %meta{string,widget,"number"}  %read{156,156} %write{2147483647,-1}
param	float	Pawn_Top_W_transmission	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Transmission of light through the surface for materials such as glass or water. The greater the value the more transparent the material."} %meta{string,widget,"number"}  %read{595,597} %write{2147483647,-1}
param	color	Pawn_Top_W_transmission_color	1 1 0.828000009		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Color"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Color tint on the transmitted light."}  %read{565,569} %write{2147483647,-1}
param	float	Pawn_Top_W_transmission_depth	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Depth"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Specifies the distance light travels inside the material before its becomes exactly the transmission color according to Beer's law."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	Pawn_Top_W_transmission_scatter	0 0 0		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Scatter"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Scattering coefficient of the interior medium. Suitable for a large body of liquid or one that is fairly thick, such as an ocean, honey, ice, or frosted glass."}  %read{2147483647,-1} %write{2147483647,-1}
param	float	Pawn_Top_W_transmission_scatter_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission Anisotropy"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the scattering."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	Pawn_Top_W_transmission_dispersion	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Dispersion"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Dispersion amount, describing how much the index of refraction varies across wavelengths."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	Pawn_Top_W_transmission_extra_roughness	0		%meta{float,min,-1} %meta{float,slidermin,0} %meta{float,max,1} %meta{string,label,"Transmission Roughness"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Additional roughness on top of specular roughness. Positive values blur refractions more than reflections, and negative values blur refractions less."} %meta{string,widget,"number"}  %read{157,157} %write{2147483647,-1}
param	float	Pawn_Top_W_subsurface	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Subsurface"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The blend between diffuse reflection and subsurface scattering. A value of 1.0 indicates full subsurface scattering and a value 0 for diffuse reflection only."} %meta{string,widget,"number"}  %read{589,591} %write{2147483647,-1}
param	color	Pawn_Top_W_subsurface_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Color"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the subsurface scattering effect."}  %read{160,160} %write{2147483647,-1}
param	color	Pawn_Top_W_subsurface_radius	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Radius"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The mean free path. The distance which light can travel before being scattered inside the surface."}  %read{166,166} %write{2147483647,-1}
param	float	Pawn_Top_W_subsurface_scale	0.00300000003		%meta{float,min,0} %meta{float,slidermax,10} %meta{string,label,"Subsurface Scale"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"Scalar weight for the subsurface radius value."} %meta{string,widget,"number"}  %read{166,166} %write{2147483647,-1}
param	float	Pawn_Top_W_subsurface_anisotropy	0		%meta{float,min,-1} %meta{float,max,1} %meta{string,label,"Subsurface Anisotropy"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The direction of subsurface scattering. 0 scatters light evenly, positive values scatter forward and negative values scatter backward."} %meta{string,widget,"number"}  %read{580,580} %write{2147483647,-1}
param	float	Pawn_Top_W_sheen	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The weight of a sheen layer that can be used to approximate microfibers or fabrics such as velvet and satin."} %meta{string,widget,"number"}  %read{573,573} %write{2147483647,-1}
param	color	Pawn_Top_W_sheen_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Sheen Color"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the sheen layer."}  %read{572,572} %write{2147483647,-1}
param	float	Pawn_Top_W_sheen_roughness	0.300000012		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen Roughness"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The roughness of the sheen layer."} %meta{string,widget,"number"}  %read{572,572} %write{2147483647,-1}
param	float	Pawn_Top_W_coat	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat"} %meta{string,page,"Coat"} %meta{string,help,"The weight of a reflective clear-coat layer on top of the material. Use for materials such as car paint or an oily layer."} %meta{string,widget,"number"}  %read{154,625} %write{2147483647,-1}
param	color	Pawn_Top_W_coat_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Coat Color"} %meta{string,page,"Coat"} %meta{string,help,"The color of the clear-coat layer's transparency."}  %read{173,608} %write{2147483647,-1}
param	float	Pawn_Top_W_coat_roughness	0.100000001		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Roughness"} %meta{string,page,"Coat"} %meta{string,help,"The roughness of the clear-coat reflections. The lower the value, the sharper the reflection."} %meta{string,widget,"number"}  %read{132,328} %write{2147483647,-1}
param	float	Pawn_Top_W_coat_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Anisotropy"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the clear-coat layer."} %meta{string,widget,"number"}  %read{136,467} %write{2147483647,-1}
param	float	Pawn_Top_W_coat_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Rotation"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The rotation of the anisotropic effect of the clear-coat layer."} %meta{string,widget,"number"}  %read{151,151} %write{2147483647,-1}
param	float	Pawn_Top_W_coat_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Coat Index of Refraction"} %meta{string,page,"Coat"} %meta{string,help,"The index of refraction of the clear-coat layer."} %meta{string,widget,"number"}  %read{175,542} %write{2147483647,-1}
param	float	Pawn_Top_W_coat_affect_color	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Color"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the saturation of diffuse reflection and subsurface scattering below the clear-coat."} %meta{string,widget,"number"}  %read{452,452} %write{2147483647,-1}
param	float	Pawn_Top_W_coat_affect_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Roughness"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the roughness of the specular reflection in the layers below the clear-coat."} %meta{string,widget,"number"}  %read{154,154} %write{2147483647,-1}
param	float	Pawn_Top_W_thin_film_thickness	0		%meta{float,min,0} %meta{float,slidermax,2000} %meta{string,label,"Thin Film Thickness"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The thickness of the thin film layer on a surface. Use for materials such as multitone car paint or soap bubbles (in nanometers)."} %meta{string,widget,"number"}  %read{546,558} %write{2147483647,-1}
param	float	Pawn_Top_W_thin_film_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Thin Film Index of Refraction"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The index of refraction of the medium surrounding the material."} %meta{string,widget,"number"}  %read{546,558} %write{2147483647,-1}
param	float	Pawn_Top_W_emission	0		%meta{float,min,0} %meta{float,slidermax,1} %meta{string,label,"Emission"} %meta{string,page,"Emission"} %meta{string,help,"The amount of emitted incandescent light."} %meta{string,widget,"number"}  %read{178,178} %write{2147483647,-1}
param	color	Pawn_Top_W_emission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Emission Color"} %meta{string,page,"Emission"} %meta{string,help,"The color of the emitted light."}  %read{178,178} %write{2147483647,-1}
param	color	Pawn_Top_W_opacity	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Opacity"} %meta{string,page,"Geometry"} %meta{string,help,"The opacity of the entire material."}  %read{181,181} %write{2147483647,-1}
param	int	Pawn_Top_W_thin_walled	0		%meta{string,label,"Thin Walled"} %meta{string,page,"Geometry"} %meta{int,uiadvanced,1} %meta{string,help,"If true the surface is double-sided and represents an infinitely thin shell. Suitable for thin objects such as tree leaves or paper."} %meta{string,widget,"checkBox"}  %read{167,167} %write{2147483647,-1}
oparam	closure color	out			%read{2147483647,-1} %write{650,650}
global	vector	I	%read{611,611} %write{2147483647,-1}
global	normal	N	%read{6,612} %write{2147483647,-1}
global	float	u	%read{12,12} %write{2147483647,-1} %derivs
global	float	v	%read{13,13} %write{2147483647,-1} %derivs
local	color	___670_missingColor	%read{60,60} %write{56,56}
local	float	___670_st.x	%read{60,60} %write{58,58} %mystruct{___670_st} %mystructfield{0} %derivs
local	float	___670_st.y	%read{60,60} %write{59,59} %mystruct{___670_st} %mystructfield{1} %derivs
local	color	___670_rgb	%read{61,61} %write{60,60}
local	color	___672_missingColor	%read{102,102} %write{98,98}
local	float	___672_st.x	%read{102,102} %write{100,100} %mystruct{___672_st} %mystructfield{0} %derivs
local	float	___672_st.y	%read{102,102} %write{101,101} %mystruct{___672_st} %mystructfield{1} %derivs
local	vector	___674_decodedValue	%read{113,120} %write{110,112}
local	float	___678_roughness_sqr	%read{143,523} %write{135,509}
local	float	___679_aspect	%read{143,520} %write{142,516}
local	vector	___682_nAxis	%read{193,393} %write{189,335}
local	float	___682_s	%read{203,389} %write{190,336}
local	float	___682_c	%read{192,395} %write{191,337}
local	float	___682_oc	%read{194,392} %write{192,338}
local	float	___683_rotationRadians	%read{190,337} %write{187,333}
local	matrix	___683_m	%read{256,443} %write{250,396}
local	float	___683_trans.x	%read{300,446} %write{266,412} %mystruct{___683_trans} %mystructfield{0}
local	float	___683_trans.y	%read{300,446} %write{277,423} %mystruct{___683_trans} %mystructfield{1}
local	float	___683_trans.z	%read{300,446} %write{288,434} %mystruct{___683_trans} %mystructfield{2}
local	float	___683_trans.w	%read{2147483647,-1} %write{299,445} %mystruct{___683_trans} %mystructfield{3}
local	color	___684_r	%read{309,323} %write{308,308}
local	color	___684_r_sqrt	%read{313,314} %write{309,309}
local	color	___684_n_min	%read{316,316} %write{312,312}
local	color	___684_n_max	%read{316,316} %write{315,315}
local	color	___684_np1	%read{319,319} %write{317,317}
local	color	___684_nm1	%read{321,321} %write{318,318}
local	color	___684_k2	%read{326,327} %write{324,326}
local	color	___685_reflection_tint	%read{542,570} %write{536,565}
local	color	___685_transmission_tint	%read{542,570} %write{540,569}
local	color	___687_combine_out	%read{531,531} %write{530,530}
local	float	___699_x	%read{619,619} %write{618,618}
local	float	___700_NdotV	%read{615,615} %write{613,613}
local	color	___700_f	%read{621,621} %write{620,620}
local	closure color	___702_null_closure	%read{532,628} %write{128,128}
local	float	___702_coat_roughness_vector_out.x	%read{145,542} %write{129,148} %mystruct{___702_coat_roughness_vector_out} %mystructfield{0}
local	float	___702_coat_roughness_vector_out.y	%read{147,542} %write{130,149} %mystruct{___702_coat_roughness_vector_out} %mystructfield{1}
local	float	___702_coat_tangent_rotate_degree_in2_tmp	%read{151,151} %write{150,150}
local	float	___702_coat_tangent_rotate_degree_out	%read{187,187} %write{151,151}
local	color	___702_metal_reflectivity_out	%read{307,307} %write{152,152}
local	color	___702_metal_edgecolor_out	%read{316,316} %write{153,153}
local	float	___702_coat_affect_roughness_multiply1_out	%read{328,328} %write{154,154}
local	float	___702_tangent_rotate_degree_in2_tmp	%read{156,156} %write{155,155}
local	float	___702_tangent_rotate_degree_out	%read{333,333} %write{156,156}
local	float	___702_transmission_roughness_add_out	%read{450,450} %write{157,157}
local	float	___702_subsurface_color_nonnegative_in2_tmp	%read{159,159} %write{158,158}
local	color	___702_subsurface_color_nonnegative_out	%read{524,524} %write{160,160}
local	float	___702_coat_clamped_low_tmp	%read{165,165} %write{161,161}
local	float	___702_coat_clamped_high_tmp	%read{164,164} %write{162,162}
local	float	___702_coat_clamped_out	%read{452,452} %write{165,165}
local	color	___702_subsurface_radius_scaled_out	%read{580,580} %write{166,166}
local	float	___702_subsurface_selector_out	%read{582,584} %write{168,168}
local	float	___702_base_color_nonnegative_in2_tmp	%read{170,170} %write{169,169}
local	color	___702_base_color_nonnegative_out	%read{525,525} %write{171,171}
local	color	___702_coat_attenuation_bg_tmp	%read{173,173} %write{172,172}
local	color	___702_coat_attenuation_out	%read{605,605} %write{173,173}
local	float	___702_one_minus_coat_ior_in1_tmp	%read{175,175} %write{174,174}
local	float	___702_one_minus_coat_ior_out	%read{453,453} %write{175,175}
local	float	___702_one_plus_coat_ior_in1_tmp	%read{177,177} %write{176,176}
local	float	___702_one_plus_coat_ior_out	%read{453,453} %write{177,177}
local	color	___702_emission_weight_out	%read{607,607} %write{178,178}
local	color	___702_opacity_luminance_out	%read{456,456} %write{179,182}
local	vector	___702_coat_tangent_rotate_out	%read{457,457} %write{183,300}
local	color	___702_artistic_ior_ior	%read{317,546} %write{301,316}
local	color	___702_artistic_ior_extinction	%read{546,546} %write{302,327}
local	float	___702_coat_affect_roughness_multiply2_out	%read{459,462} %write{328,328}
local	vector	___702_tangent_rotate_out	%read{460,460} %write{329,446}
local	float	___702_transmission_roughness_clamped_low_tmp	%read{451,451} %write{447,447}
local	float	___702_transmission_roughness_clamped_high_tmp	%read{450,450} %write{448,448}
local	float	___702_transmission_roughness_clamped_out	%read{462,462} %write{451,451}
local	float	___702_coat_gamma_multiply_out	%read{464,464} %write{452,452}
local	float	___702_coat_ior_to_F0_sqrt_out	%read{465,465} %write{453,453}
local	int	___702_opacity_luminance_float_index_tmp	%read{456,456} %write{454,454}
local	float	___702_opacity_luminance_float_out	%read{634,634} %write{456,456}
local	vector	___702_coat_tangent_rotate_normalize_out	%read{470,470} %write{457,457}
local	float	___702_coat_affected_roughness_fg_tmp	%read{459,459} %write{458,458}
local	float	___702_coat_affected_roughness_out	%read{477,477} %write{459,459}
local	vector	___702_tangent_rotate_normalize_out	%read{499,499} %write{460,460}
local	float	___702_coat_affected_transmission_roughness_fg_tmp	%read{462,462} %write{461,461}
local	float	___702_coat_affected_transmission_roughness_out	%read{506,506} %write{462,462}
local	float	___702_coat_gamma_in2_tmp	%read{464,464} %write{463,463}
local	float	___702_coat_gamma_out	%read{524,525} %write{464,464}
local	float	___702_coat_ior_to_F0_out	%read{527,527} %write{465,465}
local	float	___702_coat_tangent_value2_tmp	%read{467,467} %write{466,466}
local	vector	___702_coat_tangent_out	%read{542,542} %write{470,472}
local	float	___702_main_roughness_out.x	%read{490,558} %write{474,493} %mystruct{___702_main_roughness_out} %mystructfield{0}
local	float	___702_main_roughness_out.y	%read{492,558} %write{475,494} %mystruct{___702_main_roughness_out} %mystructfield{1}
local	float	___702_main_tangent_value2_tmp	%read{496,496} %write{495,495}
local	vector	___702_main_tangent_out	%read{546,570} %write{499,501}
local	float	___702_transmission_roughness_out.x	%read{519,570} %write{503,522} %mystruct{___702_transmission_roughness_out} %mystructfield{0}
local	float	___702_transmission_roughness_out.y	%read{521,570} %write{504,523} %mystruct{___702_transmission_roughness_out} %mystructfield{1}
local	color	___702_coat_affected_subsurface_color_out	%read{575,579} %write{524,524}
local	color	___702_coat_affected_diffuse_color_out	%read{586,586} %write{525,525}
local	float	___702_one_minus_coat_ior_to_F0_in1_tmp	%read{527,527} %write{526,526}
local	float	___702_one_minus_coat_ior_to_F0_out	%read{530,530} %write{527,527}
local	color	___702_emission_color0_out	%read{620,620} %write{528,531}
local	closure color	___702_coat_bsdf_out	%read{606,606} %write{532,543}
local	float	___702_metal_bsdf_weight_tmp	%read{547,547} %write{544,544}
local	string	___702_metal_bsdf_distribution_tmp	%read{546,546} %write{545,545}
local	closure color	___702_metal_bsdf_out	%read{603,603} %write{547,547}
local	closure color	___702_specular_bsdf_out	%read{599,599} %write{548,559}
local	closure color	___702_transmission_bsdf_out	%read{597,597} %write{560,571}
local	closure color	___702_sheen_bsdf_out	%read{593,593} %write{573,573}
local	float	___702_translucent_bsdf_weight_tmp	%read{576,576} %write{574,574}
local	closure color	___702_translucent_bsdf_out	%read{584,584} %write{576,576}
local	closure color	___702_subsurface_bsdf_out	%read{583,583} %write{577,580}
local	closure color	___702_selected_subsurface_bsdf_out	%read{591,591} %write{585,585}
local	closure color	___702_diffuse_bsdf_out	%read{590,590} %write{587,587}
local	closure color	___702_subsurface_mix_out	%read{593,593} %write{592,592}
local	closure color	___702_sheen_layer_out	%read{596,596} %write{593,593}
local	closure color	___702_transmission_mix_out	%read{599,599} %write{598,598}
local	closure color	___702_specular_layer_out	%read{602,602} %write{599,599}
local	closure color	___702_metalness_mix_out	%read{605,605} %write{604,604}
local	closure color	___702_thin_film_layer_attenuated_out	%read{606,606} %write{605,605}
local	closure color	___702_coat_layer_out	%read{631,631} %write{606,606}
local	closure color	___702_emission_edf_out	%read{608,624} %write{607,607}
local	closure color	___702_coat_tinted_emission_edf_out	%read{621,621} %write{608,608}
local	closure color	___702_coat_emission_edf_out	%read{625,625} %write{609,621}
local	closure color	___702_blended_coat_emission_edf_out	%read{632,632} %write{626,626}
local	closure color	___702_shader_constructor_out.bsdf	%read{637,637} %write{627,631} %mystruct{___702_shader_constructor_out} %mystructfield{0}
local	closure color	___702_shader_constructor_out.edf	%read{638,638} %write{628,632} %mystruct{___702_shader_constructor_out} %mystructfield{1}
local	float	___702_shader_constructor_out.opacity	%read{636,639} %write{629,636} %mystruct{___702_shader_constructor_out} %mystructfield{2}
local	float	___703_opacity_weight	%read{645,647} %write{643,643}
local	closure color	null_closure	%read{124,125} %write{0,0}
local	string	mtlximage21_file_.filename	%read{22,60} %write{1,1} %mystruct{mtlximage21_file_} %mystructfield{0}
local	string	mtlximage21_file_.colorspace	%read{2147483647,-1} %write{2,2} %mystruct{mtlximage21_file_} %mystructfield{1}
local	string	mtlximage20_file_.filename	%read{64,102} %write{3,3} %mystruct{mtlximage20_file_} %mystructfield{0}
local	string	mtlximage20_file_.colorspace	%read{2147483647,-1} %write{4,4} %mystruct{mtlximage20_file_} %mystructfield{1}
local	vector	geomprop_Nworld_out1	%read{121,542} %write{6,6}
local	vector	geomprop_Tworld_out1	%read{114,501} %write{11,11}
local	float	geomprop_UV0_out1.x	%read{28,100} %write{12,12} %mystruct{geomprop_UV0_out1} %mystructfield{0} %derivs
local	float	geomprop_UV0_out1.y	%read{43,101} %write{13,13} %mystruct{geomprop_UV0_out1} %mystructfield{1} %derivs
local	vector	geomprop_Bworld_out1	%read{117,117} %write{19,19}
local	float	mtlximage21_out	%read{157,459} %write{20,61}
local	vector	mtlximage20_out	%read{108,111} %write{62,102}
local	vector	mtlxnormalmap15_out	%read{335,586} %write{103,123}
local	closure color	Pawn_Top_W_out.bsdf	%read{644,644} %write{124,637} %mystruct{Pawn_Top_W_out} %mystructfield{0}
local	closure color	Pawn_Top_W_out.edf	%read{644,644} %write{125,638} %mystruct{Pawn_Top_W_out} %mystructfield{1}
local	float	Pawn_Top_W_out.opacity	%read{642,642} %write{126,639} %mystruct{Pawn_Top_W_out} %mystructfield{2}
local	closure color	M_Pawn_Top_W_out	%read{650,650} %write{649,649}
const	int	$const1	0		%read{0,454} %write{2147483647,-1}
const	string	$const2	"transform"		%read{5,401} %write{2147483647,-1}
const	string	$const3	"common"		%read{6,6} %write{2147483647,-1}
temp	vector	$tmp1	%read{11,11} %write{10,10}
const	int	$const4	2		%read{7,440} %write{2147483647,-1}
temp	float	$tmp2	%read{10,10} %write{7,7}
const	float	$const5	0		%read{10,643} %write{2147483647,-1}
temp	float	$tmp3	%read{9,9} %write{8,8}
temp	float	$tmp4	%read{10,10} %write{9,9}
temp	vector	$tmp5	%read{19,19} %write{18,18}
temp	vector	$tmp6	%read{18,18} %write{17,17}
temp	float	$tmp7	%read{17,17} %write{14,14}
temp	float	$tmp8	%read{16,16} %write{15,15}
temp	float	$tmp9	%read{17,17} %write{16,16}
const	string	$const6	"mx_image_float"		%read{21,21} %write{2147483647,-1}
const	string	$const7	""		%read{22,64} %write{2147483647,-1}
temp	int	$tmp10	%read{23,23} %write{22,22}
temp	int	$tmp11	%read{24,38} %write{23,37}
const	string	$const8	"constant"		%read{25,82} %write{2147483647,-1}
temp	int	$tmp12	%read{26,26} %write{25,25}
temp	int	$tmp13	%read{27,36} %write{26,35}
temp	int	$tmp14	%read{29,29} %write{28,28}
temp	int	$tmp15	%read{30,34} %write{29,33}
const	float	$const9	1		%read{31,647} %write{2147483647,-1}
temp	int	$tmp16	%read{32,32} %write{31,31}
temp	int	$tmp17	%read{33,33} %write{32,32}
temp	int	$tmp18	%read{35,35} %write{34,34}
temp	int	$tmp19	%read{37,37} %write{36,36}
temp	int	$tmp20	%read{39,53} %write{38,52}
temp	int	$tmp21	%read{41,41} %write{40,40}
temp	int	$tmp22	%read{42,51} %write{41,50}
temp	int	$tmp23	%read{44,44} %write{43,43}
temp	int	$tmp24	%read{45,49} %write{44,48}
temp	int	$tmp25	%read{47,47} %write{46,46}
temp	int	$tmp26	%read{48,48} %write{47,47}
temp	int	$tmp27	%read{50,50} %write{49,49}
temp	int	$tmp28	%read{52,52} %write{51,51}
const	string	$const10	"mx_transform_uv"		%read{57,99} %write{2147483647,-1}
const	string	$const11	"subimage"		%read{60,102} %write{2147483647,-1}
const	string	$const12	"interp"		%read{60,102} %write{2147483647,-1}
const	string	$const13	"missingcolor"		%read{60,102} %write{2147483647,-1}
const	string	$const14	"swrap"		%read{60,102} %write{2147483647,-1}
const	string	$const15	"twrap"		%read{60,102} %write{2147483647,-1}
const	vector	$const16	0 0 0		%read{62,329} %write{2147483647,-1}
const	string	$const17	"mx_image_vector3"		%read{63,63} %write{2147483647,-1}
temp	int	$tmp29	%read{65,65} %write{64,64}
temp	int	$tmp30	%read{66,80} %write{65,79}
temp	int	$tmp31	%read{68,68} %write{67,67}
temp	int	$tmp32	%read{69,78} %write{68,77}
temp	int	$tmp33	%read{71,71} %write{70,70}
temp	int	$tmp34	%read{72,76} %write{71,75}
temp	int	$tmp35	%read{74,74} %write{73,73}
temp	int	$tmp36	%read{75,75} %write{74,74}
temp	int	$tmp37	%read{77,77} %write{76,76}
temp	int	$tmp38	%read{79,79} %write{78,78}
temp	int	$tmp39	%read{81,95} %write{80,94}
temp	int	$tmp40	%read{83,83} %write{82,82}
temp	int	$tmp41	%read{84,93} %write{83,92}
temp	int	$tmp42	%read{86,86} %write{85,85}
temp	int	$tmp43	%read{87,91} %write{86,90}
temp	int	$tmp44	%read{89,89} %write{88,88}
temp	int	$tmp45	%read{90,90} %write{89,89}
temp	int	$tmp46	%read{92,92} %write{91,91}
temp	int	$tmp47	%read{94,94} %write{93,93}
const	string	$const18	"mx_normalmap_float"		%read{104,104} %write{2147483647,-1}
temp	float	$tmp48.x	%read{115,115} %write{105,105}
temp	float	$tmp48.y	%read{118,118} %write{106,106}
const	string	$const19	"mx_normalmap_vector2"		%read{107,107} %write{2147483647,-1}
temp	int	$tmp50	%read{109,109} %write{108,108}
const	vector	$const20	0 0 1		%read{110,110} %write{2147483647,-1}
const	float	$const21	2		%read{111,111} %write{2147483647,-1}
temp	vector	$tmp51	%read{112,112} %write{111,111}
temp	float	$tmp52	%read{114,114} %write{113,113}
temp	vector	$tmp53	%read{115,115} %write{114,114}
temp	vector	$tmp54	%read{119,119} %write{115,115}
const	int	$const22	1		%read{116,437} %write{2147483647,-1}
temp	float	$tmp55	%read{117,117} %write{116,116}
temp	vector	$tmp56	%read{118,118} %write{117,117}
temp	vector	$tmp57	%read{119,119} %write{118,118}
temp	vector	$tmp58	%read{122,122} %write{119,119}
temp	float	$tmp59	%read{121,121} %write{120,120}
temp	vector	$tmp60	%read{122,122} %write{121,121}
temp	vector	$tmp61	%read{123,123} %write{122,122}
const	string	$const23	"NG_standard_surface_surfaceshader_100"		%read{127,127} %write{2147483647,-1}
const	string	$const24	"mx_roughness_anisotropy"		%read{131,505} %write{2147483647,-1}
temp	float	$tmp62	%read{134,134} %write{132,132}
const	float	$const25	1e-08		%read{135,509} %write{2147483647,-1}
const	string	$const26	"clamp"		%read{133,641} %write{2147483647,-1}
temp	float	$tmp63	%read{135,135} %write{134,134}
temp	int	$tmp64	%read{137,137} %write{136,136}
temp	float	$tmp65	%read{141,141} %write{140,140}
const	float	$const27	0.98		%read{139,513} %write{2147483647,-1}
temp	float	$tmp66	%read{140,140} %write{139,139}
temp	float	$tmp67	%read{142,142} %write{141,141}
temp	float	$tmp68	%read{144,144} %write{143,143}
const	float	$const28	360		%read{150,155} %write{2147483647,-1}
temp	color	$tmp69	%read{160,160} %write{159,159}
temp	float	$tmp70	%read{165,165} %write{164,164}
temp	float	$tmp71	%read{168,168} %write{167,167}
temp	color	$tmp72	%read{171,171} %write{170,170}
const	color	$const29	1 1 1		%read{172,541} %write{2147483647,-1}
const	color	$const30	0 0 0		%read{179,620} %write{2147483647,-1}
const	color	$const31	0.272229 0.674082 0.053689		%read{181,181} %write{2147483647,-1}
const	string	$const32	"mx_luminance_color3"		%read{180,180} %write{2147483647,-1}
temp	float	$tmp74	%read{182,182} %write{181,181}
const	string	$const33	"mx_rotate_vector3"		%read{184,330} %write{2147483647,-1}
const	string	$const34	"radians"		%read{185,331} %write{2147483647,-1}
const	float	$const35	3.1415927		%read{186,332} %write{2147483647,-1}
const	float	$const36	180		%read{186,332} %write{2147483647,-1}
temp	float	$tmp75	%read{187,187} %write{186,186}
const	string	$const37	"rotationMatrix"		%read{188,334} %write{2147483647,-1}
temp	float	$tmp76	%read{194,194} %write{193,193}
temp	float	$tmp77	%read{196,196} %write{194,194}
temp	float	$tmp78	%read{196,196} %write{195,195}
temp	float	$tmp79	%read{197,197} %write{196,196}
temp	float	$tmp80	%read{250,250} %write{197,197}
temp	float	$tmp81	%read{199,199} %write{198,198}
temp	float	$tmp82	%read{201,201} %write{199,199}
temp	float	$tmp83	%read{201,201} %write{200,200}
temp	float	$tmp84	%read{204,204} %write{201,201}
temp	float	$tmp85	%read{203,203} %write{202,202}
temp	float	$tmp86	%read{204,204} %write{203,203}
temp	float	$tmp87	%read{250,250} %write{204,204}
temp	float	$tmp88	%read{206,206} %write{205,205}
temp	float	$tmp89	%read{208,208} %write{206,206}
temp	float	$tmp90	%read{208,208} %write{207,207}
temp	float	$tmp91	%read{211,211} %write{208,208}
temp	float	$tmp92	%read{210,210} %write{209,209}
temp	float	$tmp93	%read{211,211} %write{210,210}
temp	float	$tmp94	%read{250,250} %write{211,211}
temp	float	$tmp95	%read{213,213} %write{212,212}
temp	float	$tmp96	%read{215,215} %write{213,213}
temp	float	$tmp97	%read{215,215} %write{214,214}
temp	float	$tmp98	%read{218,218} %write{215,215}
temp	float	$tmp99	%read{217,217} %write{216,216}
temp	float	$tmp100	%read{218,218} %write{217,217}
temp	float	$tmp101	%read{250,250} %write{218,218}
temp	float	$tmp102	%read{220,220} %write{219,219}
temp	float	$tmp103	%read{222,222} %write{220,220}
temp	float	$tmp104	%read{222,222} %write{221,221}
temp	float	$tmp105	%read{223,223} %write{222,222}
temp	float	$tmp106	%read{250,250} %write{223,223}
temp	float	$tmp107	%read{225,225} %write{224,224}
temp	float	$tmp108	%read{227,227} %write{225,225}
temp	float	$tmp109	%read{227,227} %write{226,226}
temp	float	$tmp110	%read{230,230} %write{227,227}
temp	float	$tmp111	%read{229,229} %write{228,228}
temp	float	$tmp112	%read{230,230} %write{229,229}
temp	float	$tmp113	%read{250,250} %write{230,230}
temp	float	$tmp114	%read{232,232} %write{231,231}
temp	float	$tmp115	%read{234,234} %write{232,232}
temp	float	$tmp116	%read{234,234} %write{233,233}
temp	float	$tmp117	%read{237,237} %write{234,234}
temp	float	$tmp118	%read{236,236} %write{235,235}
temp	float	$tmp119	%read{237,237} %write{236,236}
temp	float	$tmp120	%read{250,250} %write{237,237}
temp	float	$tmp121	%read{239,239} %write{238,238}
temp	float	$tmp122	%read{241,241} %write{239,239}
temp	float	$tmp123	%read{241,241} %write{240,240}
temp	float	$tmp124	%read{244,244} %write{241,241}
temp	float	$tmp125	%read{243,243} %write{242,242}
temp	float	$tmp126	%read{244,244} %write{243,243}
temp	float	$tmp127	%read{250,250} %write{244,244}
temp	float	$tmp128	%read{246,246} %write{245,245}
temp	float	$tmp129	%read{248,248} %write{246,246}
temp	float	$tmp130	%read{248,248} %write{247,247}
temp	float	$tmp131	%read{249,249} %write{248,248}
temp	float	$tmp132	%read{250,250} %write{249,249}
temp	float	$tmp133.x	%read{257,290} %write{251,251}
temp	float	$tmp133.y	%read{259,292} %write{252,252}
temp	float	$tmp133.z	%read{262,295} %write{253,253}
temp	float	$tmp133.w	%read{265,298} %write{254,254}
temp	float	$tmp134	%read{257,257} %write{256,256}
temp	float	$tmp135	%read{260,260} %write{257,257}
temp	float	$tmp136	%read{259,259} %write{258,258}
temp	float	$tmp137	%read{260,260} %write{259,259}
temp	float	$tmp138	%read{263,263} %write{260,260}
temp	float	$tmp139	%read{262,262} %write{261,261}
temp	float	$tmp140	%read{263,263} %write{262,262}
temp	float	$tmp141	%read{266,266} %write{263,263}
const	int	$const38	3		%read{264,443} %write{2147483647,-1}
temp	float	$tmp142	%read{265,265} %write{264,264}
temp	float	$tmp143	%read{266,266} %write{265,265}
temp	float	$tmp144	%read{268,268} %write{267,267}
temp	float	$tmp145	%read{271,271} %write{268,268}
temp	float	$tmp146	%read{270,270} %write{269,269}
temp	float	$tmp147	%read{271,271} %write{270,270}
temp	float	$tmp148	%read{274,274} %write{271,271}
temp	float	$tmp149	%read{273,273} %write{272,272}
temp	float	$tmp150	%read{274,274} %write{273,273}
temp	float	$tmp151	%read{277,277} %write{274,274}
temp	float	$tmp152	%read{276,276} %write{275,275}
temp	float	$tmp153	%read{277,277} %write{276,276}
temp	float	$tmp154	%read{279,279} %write{278,278}
temp	float	$tmp155	%read{282,282} %write{279,279}
temp	float	$tmp156	%read{281,281} %write{280,280}
temp	float	$tmp157	%read{282,282} %write{281,281}
temp	float	$tmp158	%read{285,285} %write{282,282}
temp	float	$tmp159	%read{284,284} %write{283,283}
temp	float	$tmp160	%read{285,285} %write{284,284}
temp	float	$tmp161	%read{288,288} %write{285,285}
temp	float	$tmp162	%read{287,287} %write{286,286}
temp	float	$tmp163	%read{288,288} %write{287,287}
temp	float	$tmp164	%read{290,290} %write{289,289}
temp	float	$tmp165	%read{293,293} %write{290,290}
temp	float	$tmp166	%read{292,292} %write{291,291}
temp	float	$tmp167	%read{293,293} %write{292,292}
temp	float	$tmp168	%read{296,296} %write{293,293}
temp	float	$tmp169	%read{295,295} %write{294,294}
temp	float	$tmp170	%read{296,296} %write{295,295}
temp	float	$tmp171	%read{299,299} %write{296,296}
temp	float	$tmp172	%read{298,298} %write{297,297}
temp	float	$tmp173	%read{299,299} %write{298,298}
const	string	$const39	"mx_artistic_ior"		%read{303,303} %write{2147483647,-1}
temp	color	$tmp174	%read{308,308} %write{304,304}
const	float	$const40	0.99		%read{305,305} %write{2147483647,-1}
temp	color	$tmp175	%read{307,307} %write{305,305}
temp	color	$tmp176	%read{308,308} %write{307,307}
temp	color	$tmp177	%read{312,312} %write{310,310}
temp	color	$tmp178	%read{312,312} %write{311,311}
temp	color	$tmp179	%read{315,315} %write{313,313}
temp	color	$tmp180	%read{315,315} %write{314,314}
temp	color	$tmp181	%read{320,320} %write{319,319}
temp	color	$tmp182	%read{322,322} %write{320,320}
temp	color	$tmp183	%read{322,322} %write{321,321}
temp	color	$tmp184	%read{324,324} %write{322,322}
temp	color	$tmp185	%read{324,324} %write{323,323}
temp	color	$tmp186	%read{326,326} %write{325,325}
temp	float	$tmp187	%read{333,333} %write{332,332}
temp	float	$tmp188	%read{340,340} %write{339,339}
temp	float	$tmp189	%read{342,342} %write{340,340}
temp	float	$tmp190	%read{342,342} %write{341,341}
temp	float	$tmp191	%read{343,343} %write{342,342}
temp	float	$tmp192	%read{396,396} %write{343,343}
temp	float	$tmp193	%read{345,345} %write{344,344}
temp	float	$tmp194	%read{347,347} %write{345,345}
temp	float	$tmp195	%read{347,347} %write{346,346}
temp	float	$tmp196	%read{350,350} %write{347,347}
temp	float	$tmp197	%read{349,349} %write{348,348}
temp	float	$tmp198	%read{350,350} %write{349,349}
temp	float	$tmp199	%read{396,396} %write{350,350}
temp	float	$tmp200	%read{352,352} %write{351,351}
temp	float	$tmp201	%read{354,354} %write{352,352}
temp	float	$tmp202	%read{354,354} %write{353,353}
temp	float	$tmp203	%read{357,357} %write{354,354}
temp	float	$tmp204	%read{356,356} %write{355,355}
temp	float	$tmp205	%read{357,357} %write{356,356}
temp	float	$tmp206	%read{396,396} %write{357,357}
temp	float	$tmp207	%read{359,359} %write{358,358}
temp	float	$tmp208	%read{361,361} %write{359,359}
temp	float	$tmp209	%read{361,361} %write{360,360}
temp	float	$tmp210	%read{364,364} %write{361,361}
temp	float	$tmp211	%read{363,363} %write{362,362}
temp	float	$tmp212	%read{364,364} %write{363,363}
temp	float	$tmp213	%read{396,396} %write{364,364}
temp	float	$tmp214	%read{366,366} %write{365,365}
temp	float	$tmp215	%read{368,368} %write{366,366}
temp	float	$tmp216	%read{368,368} %write{367,367}
temp	float	$tmp217	%read{369,369} %write{368,368}
temp	float	$tmp218	%read{396,396} %write{369,369}
temp	float	$tmp219	%read{371,371} %write{370,370}
temp	float	$tmp220	%read{373,373} %write{371,371}
temp	float	$tmp221	%read{373,373} %write{372,372}
temp	float	$tmp222	%read{376,376} %write{373,373}
temp	float	$tmp223	%read{375,375} %write{374,374}
temp	float	$tmp224	%read{376,376} %write{375,375}
temp	float	$tmp225	%read{396,396} %write{376,376}
temp	float	$tmp226	%read{378,378} %write{377,377}
temp	float	$tmp227	%read{380,380} %write{378,378}
temp	float	$tmp228	%read{380,380} %write{379,379}
temp	float	$tmp229	%read{383,383} %write{380,380}
temp	float	$tmp230	%read{382,382} %write{381,381}
temp	float	$tmp231	%read{383,383} %write{382,382}
temp	float	$tmp232	%read{396,396} %write{383,383}
temp	float	$tmp233	%read{385,385} %write{384,384}
temp	float	$tmp234	%read{387,387} %write{385,385}
temp	float	$tmp235	%read{387,387} %write{386,386}
temp	float	$tmp236	%read{390,390} %write{387,387}
temp	float	$tmp237	%read{389,389} %write{388,388}
temp	float	$tmp238	%read{390,390} %write{389,389}
temp	float	$tmp239	%read{396,396} %write{390,390}
temp	float	$tmp240	%read{392,392} %write{391,391}
temp	float	$tmp241	%read{394,394} %write{392,392}
temp	float	$tmp242	%read{394,394} %write{393,393}
temp	float	$tmp243	%read{395,395} %write{394,394}
temp	float	$tmp244	%read{396,396} %write{395,395}
temp	float	$tmp245.x	%read{403,436} %write{397,397}
temp	float	$tmp245.y	%read{405,438} %write{398,398}
temp	float	$tmp245.z	%read{408,441} %write{399,399}
temp	float	$tmp245.w	%read{411,444} %write{400,400}
temp	float	$tmp246	%read{403,403} %write{402,402}
temp	float	$tmp247	%read{406,406} %write{403,403}
temp	float	$tmp248	%read{405,405} %write{404,404}
temp	float	$tmp249	%read{406,406} %write{405,405}
temp	float	$tmp250	%read{409,409} %write{406,406}
temp	float	$tmp251	%read{408,408} %write{407,407}
temp	float	$tmp252	%read{409,409} %write{408,408}
temp	float	$tmp253	%read{412,412} %write{409,409}
temp	float	$tmp254	%read{411,411} %write{410,410}
temp	float	$tmp255	%read{412,412} %write{411,411}
temp	float	$tmp256	%read{414,414} %write{413,413}
temp	float	$tmp257	%read{417,417} %write{414,414}
temp	float	$tmp258	%read{416,416} %write{415,415}
temp	float	$tmp259	%read{417,417} %write{416,416}
temp	float	$tmp260	%read{420,420} %write{417,417}
temp	float	$tmp261	%read{419,419} %write{418,418}
temp	float	$tmp262	%read{420,420} %write{419,419}
temp	float	$tmp263	%read{423,423} %write{420,420}
temp	float	$tmp264	%read{422,422} %write{421,421}
temp	float	$tmp265	%read{423,423} %write{422,422}
temp	float	$tmp266	%read{425,425} %write{424,424}
temp	float	$tmp267	%read{428,428} %write{425,425}
temp	float	$tmp268	%read{427,427} %write{426,426}
temp	float	$tmp269	%read{428,428} %write{427,427}
temp	float	$tmp270	%read{431,431} %write{428,428}
temp	float	$tmp271	%read{430,430} %write{429,429}
temp	float	$tmp272	%read{431,431} %write{430,430}
temp	float	$tmp273	%read{434,434} %write{431,431}
temp	float	$tmp274	%read{433,433} %write{432,432}
temp	float	$tmp275	%read{434,434} %write{433,433}
temp	float	$tmp276	%read{436,436} %write{435,435}
temp	float	$tmp277	%read{439,439} %write{436,436}
temp	float	$tmp278	%read{438,438} %write{437,437}
temp	float	$tmp279	%read{439,439} %write{438,438}
temp	float	$tmp280	%read{442,442} %write{439,439}
temp	float	$tmp281	%read{441,441} %write{440,440}
temp	float	$tmp282	%read{442,442} %write{441,441}
temp	float	$tmp283	%read{445,445} %write{442,442}
temp	float	$tmp284	%read{444,444} %write{443,443}
temp	float	$tmp285	%read{445,445} %write{444,444}
temp	float	$tmp286	%read{451,451} %write{450,450}
const	string	$const41	"mx_extract"		%read{455,455} %write{2147483647,-1}
temp	int	$tmp287	%read{469,469} %write{467,467}
const	string	$const42	"mx_ternary"		%read{468,497} %write{2147483647,-1}
temp	float	$tmp288	%read{479,479} %write{477,477}
temp	float	$tmp289	%read{480,480} %write{479,479}
temp	int	$tmp290	%read{482,482} %write{481,481}
temp	float	$tmp291	%read{486,486} %write{485,485}
temp	float	$tmp292	%read{485,485} %write{484,484}
temp	float	$tmp293	%read{487,487} %write{486,486}
temp	float	$tmp294	%read{489,489} %write{488,488}
temp	int	$tmp295	%read{498,498} %write{496,496}
temp	float	$tmp296	%read{508,508} %write{506,506}
temp	float	$tmp297	%read{509,509} %write{508,508}
temp	int	$tmp298	%read{511,511} %write{510,510}
temp	float	$tmp299	%read{515,515} %write{514,514}
temp	float	$tmp300	%read{514,514} %write{513,513}
temp	float	$tmp301	%read{516,516} %write{515,515}
temp	float	$tmp302	%read{518,518} %write{517,517}
const	string	$const43	"NG_convert_float_color3"		%read{529,529} %write{2147483647,-1}
const	float	$const44	1.5		%read{542,570} %write{2147483647,-1}
const	string	$const45	"ggx"		%read{542,570} %write{2147483647,-1}
const	string	$const46	"R"		%read{534,566} %write{2147483647,-1}
const	string	$const47	"mx_dielectric_bsdf"		%read{533,561} %write{2147483647,-1}
const	string	$const48	"T"		%read{534,566} %write{2147483647,-1}
temp	int	$tmp304	%read{535,535} %write{534,534}
temp	int	$tmp305	%read{539,539} %write{538,538}
temp	closure color	$tmp306	%read{543,543} %write{542,542}
const	string	$const49	"thinfilm_thickness"		%read{542,570} %write{2147483647,-1}
const	string	$const50	"thinfilm_ior"		%read{542,570} %write{2147483647,-1}
const	string	$const51	"dielectric_bsdf"		%read{542,570} %write{2147483647,-1}
temp	closure color	$tmp307	%read{547,547} %write{546,546}
const	string	$const52	"conductor_bsdf"		%read{546,546} %write{2147483647,-1}
temp	int	$tmp308	%read{551,551} %write{550,550}
temp	int	$tmp309	%read{555,555} %write{554,554}
temp	closure color	$tmp310	%read{559,559} %write{558,558}
temp	int	$tmp311	%read{563,563} %write{562,562}
temp	int	$tmp312	%read{567,567} %write{566,566}
temp	closure color	$tmp313	%read{571,571} %write{570,570}
temp	closure color	$tmp314	%read{573,573} %write{572,572}
const	string	$const53	"sheen_bsdf"		%read{572,572} %write{2147483647,-1}
temp	closure color	$tmp315	%read{576,576} %write{575,575}
const	string	$const54	"translucent_bsdf"		%read{575,575} %write{2147483647,-1}
const	string	$const55	"mx_subsurface_bsdf"		%read{578,578} %write{2147483647,-1}
temp	color	$tmp316	%read{580,580} %write{579,579}
const	string	$const56	"subsurface_bssrdf"		%read{580,580} %write{2147483647,-1}
const	string	$const57	"mix"		%read{581,622} %write{2147483647,-1}
temp	float	$tmp317	%read{583,583} %write{582,582}
temp	closure color	$tmp318	%read{585,585} %write{583,583}
temp	closure color	$tmp319	%read{585,585} %write{584,584}
temp	closure color	$tmp320	%read{587,587} %write{586,586}
const	string	$const58	"oren_nayar_diffuse_bsdf"		%read{586,586} %write{2147483647,-1}
temp	float	$tmp321	%read{590,590} %write{589,589}
temp	closure color	$tmp322	%read{592,592} %write{590,590}
temp	closure color	$tmp323	%read{592,592} %write{591,591}
const	string	$const59	"layer"		%read{593,606} %write{2147483647,-1}
temp	float	$tmp324	%read{596,596} %write{595,595}
temp	closure color	$tmp325	%read{598,598} %write{596,596}
temp	closure color	$tmp326	%read{598,598} %write{597,597}
temp	float	$tmp327	%read{602,602} %write{601,601}
temp	closure color	$tmp328	%read{604,604} %write{602,602}
temp	closure color	$tmp329	%read{604,604} %write{603,603}
const	string	$const60	"uniform_edf"		%read{607,607} %write{2147483647,-1}
const	float	$const61	5		%read{619,619} %write{2147483647,-1}
const	string	$const62	"mx_generalized_schlick_edf"		%read{610,610} %write{2147483647,-1}
temp	float	$tmp331	%read{613,613} %write{612,612}
temp	vector	$tmp332	%read{612,612} %write{611,611}
const	string	$const63	"mx_fresnel_schlick"		%read{614,614} %write{2147483647,-1}
temp	float	$tmp333	%read{617,617} %write{615,615}
temp	float	$tmp334	%read{618,618} %write{617,617}
temp	float	$tmp335	%read{620,620} %write{619,619}
temp	float	$tmp336	%read{624,624} %write{623,623}
temp	closure color	$tmp337	%read{626,626} %write{624,624}
temp	closure color	$tmp338	%read{626,626} %write{625,625}
const	string	$const64	"mx_surface"		%read{630,630} %write{2147483647,-1}
temp	float	$tmp339	%read{635,635} %write{634,634}
const	string	$const65	"mx_surfacematerial"		%read{640,640} %write{2147483647,-1}
temp	float	$tmp340	%read{643,643} %write{642,642}
temp	closure color	$tmp341	%read{645,645} %write{644,644}
temp	closure color	$tmp342	%read{649,649} %write{645,645}
temp	closure color	$tmp343	%read{648,648} %write{646,646}
const	string	$const66	"transparent"		%read{646,646} %write{2147483647,-1}
temp	float	$tmp344	%read{648,648} %write{647,647}
temp	closure color	$tmp345	%read{649,649} %write{648,648}
code ___main___
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:838
#     textureresource mtlximage21_file_ = {mtlximage21_file, mtlximage21_file_colorspace};
	assign		null_closure $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{838} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:839
#     textureresource mtlximage20_file_ = {mtlximage20_file, mtlximage20_file_colorspace};
	assign		mtlximage21_file_.filename mtlximage21_file 	%line{839} %argrw{"wr"}
	assign		mtlximage21_file_.colorspace mtlximage21_file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:840
#     vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
	assign		mtlximage20_file_.filename mtlximage20_file 	%line{840} %argrw{"wr"}
	assign		mtlximage20_file_.colorspace mtlximage20_file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:841
#     vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
	functioncall	$const2 7 	%line{841} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	geomprop_Nworld_out1 $const3 geomprop_Nworld_space N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:842
#     vector2 geomprop_UV0_out1 = vector2(u,v);
	compref		$tmp2 N $const4 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{842} %argrw{"wrr"}
	compref		$tmp3 N $const1 	%argrw{"wrr"}
	neg		$tmp4 $tmp3 	%argrw{"wr"}
	vector		$tmp1 $tmp2 $const5 $tmp4 	%argrw{"wrrr"}
	normalize	geomprop_Tworld_out1 $tmp1 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:843
#     vector geomprop_Bworld_out1 = normalize(cross(N, vector(N[2], 0, -N[0])));
	assign		geomprop_UV0_out1.x u 	%line{843} %argrw{"wr"}
	assign		geomprop_UV0_out1.y v 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:844
#     float mtlximage21_out = 0.0;
	compref		$tmp7 N $const4 	%line{844} %argrw{"wrr"}
	compref		$tmp8 N $const1 	%argrw{"wrr"}
	neg		$tmp9 $tmp8 	%argrw{"wr"}
	vector		$tmp6 $tmp7 $const5 $tmp9 	%argrw{"wrrr"}
	cross		$tmp5 N $tmp6 	%argrw{"wrr"}
	normalize	geomprop_Bworld_out1 $tmp5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:845
#     mx_image_float(mtlximage21_file_, mtlximage21_layer, mtlximage21_default, geomprop_UV0_out1, mtlximage21_uaddressmode, mtlximage21_vaddressmode, mtlximage21_filtertype, mtlximage21_framerange, mtlximage21_frameoffset, mtlximage21_frameendaction, mtlximage21_out);
	assign		mtlximage21_out $const5 	%line{845} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:846
#     vector mtlximage20_out = vector(0.0);
	functioncall	$const6 62 	%line{846} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp10 mtlximage21_file_.filename $const7 	%line{25} %argrw{"wrr"}
	neq		$tmp11 $tmp10 $const1 	%argrw{"wrr"}
	if		$tmp11 25 38 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp12 mtlximage21_uaddressmode $const8 	%line{26} %argrw{"wrr"}
	neq		$tmp13 $tmp12 $const1 	%argrw{"wrr"}
	if		$tmp13 36 36 	%argrw{"r"}
	lt		$tmp14 geomprop_UV0_out1.x $const5 	%argrw{"wrr"}
	neq		$tmp15 $tmp14 $const1 	%argrw{"wrr"}
	if		$tmp15 31 34 	%argrw{"r"}
	gt		$tmp16 geomprop_UV0_out1.x $const9 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const1 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	neq		$tmp18 $tmp15 $const1 	%argrw{"wrr"}
	assign		$tmp13 $tmp18 	%argrw{"wr"}
	neq		$tmp19 $tmp13 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp11 $tmp19 	%line{25} %argrw{"wr"}
	neq		$tmp20 $tmp11 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp20 40 53 	%line{26} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:27
#     {
	eq		$tmp21 mtlximage21_vaddressmode $const8 	%line{27} %argrw{"wrr"}
	neq		$tmp22 $tmp21 $const1 	%argrw{"wrr"}
	if		$tmp22 51 51 	%argrw{"r"}
	lt		$tmp23 geomprop_UV0_out1.y $const5 	%argrw{"wrr"}
	neq		$tmp24 $tmp23 $const1 	%argrw{"wrr"}
	if		$tmp24 46 49 	%argrw{"r"}
	gt		$tmp25 geomprop_UV0_out1.y $const9 	%argrw{"wrr"}
	neq		$tmp26 $tmp25 $const1 	%argrw{"wrr"}
	assign		$tmp24 $tmp26 	%argrw{"wr"}
	neq		$tmp27 $tmp24 $const1 	%argrw{"wrr"}
	assign		$tmp22 $tmp27 	%argrw{"wr"}
	neq		$tmp28 $tmp22 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp20 $tmp28 	%line{26} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp20 56 56 	%line{25} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:29
#         return;
	assign		mtlximage21_out mtlximage21_default 	%line{29} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:30
#     }
	return	%line{30}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:33
#     vector2 st = mx_transform_uv(texcoord);
	assign		___670_missingColor mtlximage21_default 	%line{33} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:34
#     color rgb = texture(file.filename, st.x, st.y,
	functioncall	$const10 60 	%line{34} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:20
# }
	assign		___670_st.x geomprop_UV0_out1.x 	%line{20} %argrw{"wr"}
	assign		___670_st.y geomprop_UV0_out1.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:35
#                         "subimage", layer, "interp", filtertype,
	texture		___670_rgb mtlximage21_file_.filename ___670_st.x ___670_st.y $const11 mtlximage21_layer $const12 mtlximage21_filtertype $const13 ___670_missingColor $const14 mtlximage21_uaddressmode $const15 mtlximage21_vaddressmode 	%line{35} %argrw{"wrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:39
# }
	compref		mtlximage21_out ___670_rgb $const1 	%line{39} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:847
#     mx_image_vector3(mtlximage20_file_, mtlximage20_layer, mtlximage20_default, geomprop_UV0_out1, mtlximage20_uaddressmode, mtlximage20_vaddressmode, mtlximage20_filtertype, mtlximage20_framerange, mtlximage20_frameoffset, mtlximage20_frameendaction, mtlximage20_out);
	assign		mtlximage20_out $const16 	%line{847} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:848
#     vector mtlxnormalmap15_out = vector(0.0);
	functioncall	$const17 103 	%line{848} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp29 mtlximage20_file_.filename $const7 	%line{45} %argrw{"wrr"}
	neq		$tmp30 $tmp29 $const1 	%argrw{"wrr"}
	if		$tmp30 67 80 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp31 mtlximage20_uaddressmode $const8 	%line{46} %argrw{"wrr"}
	neq		$tmp32 $tmp31 $const1 	%argrw{"wrr"}
	if		$tmp32 78 78 	%argrw{"r"}
	lt		$tmp33 geomprop_UV0_out1.x $const5 	%argrw{"wrr"}
	neq		$tmp34 $tmp33 $const1 	%argrw{"wrr"}
	if		$tmp34 73 76 	%argrw{"r"}
	gt		$tmp35 geomprop_UV0_out1.x $const9 	%argrw{"wrr"}
	neq		$tmp36 $tmp35 $const1 	%argrw{"wrr"}
	assign		$tmp34 $tmp36 	%argrw{"wr"}
	neq		$tmp37 $tmp34 $const1 	%argrw{"wrr"}
	assign		$tmp32 $tmp37 	%argrw{"wr"}
	neq		$tmp38 $tmp32 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp30 $tmp38 	%line{45} %argrw{"wr"}
	neq		$tmp39 $tmp30 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp39 82 95 	%line{46} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:47
#     {
	eq		$tmp40 mtlximage20_vaddressmode $const8 	%line{47} %argrw{"wrr"}
	neq		$tmp41 $tmp40 $const1 	%argrw{"wrr"}
	if		$tmp41 93 93 	%argrw{"r"}
	lt		$tmp42 geomprop_UV0_out1.y $const5 	%argrw{"wrr"}
	neq		$tmp43 $tmp42 $const1 	%argrw{"wrr"}
	if		$tmp43 88 91 	%argrw{"r"}
	gt		$tmp44 geomprop_UV0_out1.y $const9 	%argrw{"wrr"}
	neq		$tmp45 $tmp44 $const1 	%argrw{"wrr"}
	assign		$tmp43 $tmp45 	%argrw{"wr"}
	neq		$tmp46 $tmp43 $const1 	%argrw{"wrr"}
	assign		$tmp41 $tmp46 	%argrw{"wr"}
	neq		$tmp47 $tmp41 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:46
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp39 $tmp47 	%line{46} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:45
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp39 98 98 	%line{45} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:49
#         return;
	assign		mtlximage20_out mtlximage20_default 	%line{49} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:50
#     }
	return	%line{50}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:53
#     vector2 st = mx_transform_uv(texcoord);
	assign		___672_missingColor mtlximage20_default 	%line{53} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:54
#     out = texture(file.filename, st.x, st.y,
	functioncall	$const10 102 	%line{54} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:20
# }
	assign		___672_st.x geomprop_UV0_out1.x 	%line{20} %argrw{"wr"}
	assign		___672_st.y geomprop_UV0_out1.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:55
#                   "subimage", layer, "interp", filtertype,
	texture		mtlximage20_out mtlximage20_file_.filename ___672_st.x ___672_st.y $const11 mtlximage20_layer $const12 mtlximage20_filtertype $const13 ___672_missingColor $const14 mtlximage20_uaddressmode $const15 mtlximage20_vaddressmode 	%line{55} %argrw{"wrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:849
#     mx_normalmap_float(mtlximage20_out, mtlxnormalmap15_scale, geomprop_Nworld_out1, geomprop_Tworld_out1, geomprop_Bworld_out1, mtlxnormalmap15_out);
	assign		mtlxnormalmap15_out $const16 	%line{849} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:850
#     surfaceshader Pawn_Top_W_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const18 124 	%line{850} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:78
# }
	assign		$tmp48.x mtlxnormalmap15_scale 	%line{78} %argrw{"wr"}
	assign		$tmp48.y mtlxnormalmap15_scale 	%argrw{"wr"}
	functioncall	$const19 124 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:64
#     {
	eq		$tmp50 mtlximage20_out $const16 	%line{64} %argrw{"wrr"}
	if		$tmp50 111 113 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:66
#     }
	assign		___674_decodedValue $const20 	%line{66} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:70
#     }
	mul		$tmp51 mtlximage20_out $const21 	%line{70} %argrw{"wrr"}
	sub		___674_decodedValue $tmp51 $const9 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:73
# }
	compref		$tmp52 ___674_decodedValue $const1 	%line{73} %argrw{"wrr"}
	mul		$tmp53 geomprop_Tworld_out1 $tmp52 	%argrw{"wrr"}
	mul		$tmp54 $tmp53 $tmp48.x 	%argrw{"wrr"}
	compref		$tmp55 ___674_decodedValue $const22 	%argrw{"wrr"}
	mul		$tmp56 geomprop_Bworld_out1 $tmp55 	%argrw{"wrr"}
	mul		$tmp57 $tmp56 $tmp48.y 	%argrw{"wrr"}
	add		$tmp58 $tmp54 $tmp57 	%argrw{"wrr"}
	compref		$tmp59 ___674_decodedValue $const4 	%argrw{"wrr"}
	mul		$tmp60 geomprop_Nworld_out1 $tmp59 	%argrw{"wrr"}
	add		$tmp61 $tmp58 $tmp60 	%argrw{"wrr"}
	normalize	mtlxnormalmap15_out $tmp61 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:851
#     NG_standard_surface_surfaceshader_100(Pawn_Top_W_base, Pawn_Top_W_base_color, Pawn_Top_W_diffuse_roughness, Pawn_Top_W_metalness, Pawn_Top_W_specular, Pawn_Top_W_specular_color, mtlximage21_out, Pawn_Top_W_specular_IOR, Pawn_Top_W_specular_anisotropy, Pawn_Top_W_specular_rotation, Pawn_Top_W_transmission, Pawn_Top_W_transmission_color, Pawn_Top_W_transmission_depth, Pawn_Top_W_transmission_scatter, Pawn_Top_W_transmission_scatter_anisotropy, Pawn_Top_W_transmission_dispersion, Pawn_Top_W_transmission_extra_roughness, Pawn_Top_W_subsurface, Pawn_Top_W_subsurface_color, Pawn_Top_W_subsurface_radius, Pawn_Top_W_subsurface_scale, Pawn_Top_W_subsurface_anisotropy, Pawn_Top_W_sheen, Pawn_Top_W_sheen_color, Pawn_Top_W_sheen_roughness, Pawn_Top_W_coat, Pawn_Top_W_coat_color, Pawn_Top_W_coat_roughness, Pawn_Top_W_coat_anisotropy, Pawn_Top_W_coat_rotation, Pawn_Top_W_coat_IOR, geomprop_Nworld_out1, Pawn_Top_W_coat_affect_color, Pawn_Top_W_coat_affect_roughness, Pawn_Top_W_thin_film_thickness, Pawn_Top_W_thin_film_IOR, Pawn_Top_W_emission, Pawn_Top_W_emission_color, Pawn_Top_W_opacity, Pawn_Top_W_thin_walled, mtlxnormalmap15_out, geomprop_Tworld_out1, Pawn_Top_W_out);
	assign		Pawn_Top_W_out.bsdf null_closure 	%line{851} %argrw{"wr"}
	assign		Pawn_Top_W_out.edf null_closure 	%argrw{"wr"}
	assign		Pawn_Top_W_out.opacity $const9 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:852
#     MATERIAL M_Pawn_Top_W_out = mx_surfacematerial(Pawn_Top_W_out, backsurfaceshader, displacementshader1);
	functioncall	$const23 640 	%line{852} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:258
#     vector2 coat_roughness_vector_out = vector2(0.0, 0.0);
	assign		___702_null_closure $const1 	%line{258} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:259
#     mx_roughness_anisotropy(coat_roughness, coat_anisotropy, coat_roughness_vector_out);
	assign		___702_coat_roughness_vector_out.x $const5 	%line{259} %argrw{"wr"}
	assign		___702_coat_roughness_vector_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:260
#     float coat_tangent_rotate_degree_in2_tmp = 360.000000;
	functioncall	$const24 150 	%line{260} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:83
#     if (anisotropy > 0.0)
	mul		$tmp62 Pawn_Top_W_coat_roughness Pawn_Top_W_coat_roughness 	%line{83} %argrw{"wrr"}
	functioncall	$const26 136 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp63 $tmp62 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___678_roughness_sqr $tmp63 $const25 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:84
#     {
	gt		$tmp64 Pawn_Top_W_coat_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{84} %argrw{"wrr"}
	if		$tmp64 148 150 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:86
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const26 141 	%line{86} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp66 Pawn_Top_W_coat_anisotropy $const27 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp65 $tmp66 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:86
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp67 $const9 $tmp65 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{86} %argrw{"wrr"}
	sqrt		___679_aspect $tmp67 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:87
#         result.y = roughness_sqr * aspect;
	div		$tmp68 ___678_roughness_sqr ___679_aspect 	%line{87} %argrw{"wrr"}
	min		___702_coat_roughness_vector_out.x $tmp68 $const9 	%argrw{"wrr"}
	assign		___702_coat_roughness_vector_out.x ___702_coat_roughness_vector_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:88
#     }
	mul		___702_coat_roughness_vector_out.y ___678_roughness_sqr ___679_aspect 	%line{88} %argrw{"wrr"}
	assign		___702_coat_roughness_vector_out.y ___702_coat_roughness_vector_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:92
#         result.y = roughness_sqr;
	assign		___702_coat_roughness_vector_out.x ___678_roughness_sqr 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:93
#     }
	assign		___702_coat_roughness_vector_out.y ___678_roughness_sqr 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:261
#     float coat_tangent_rotate_degree_out = coat_rotation * coat_tangent_rotate_degree_in2_tmp;
	assign		___702_coat_tangent_rotate_degree_in2_tmp $const28 	%line{261} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:262
#     color metal_reflectivity_out = base_color * base;
	mul		___702_coat_tangent_rotate_degree_out Pawn_Top_W_coat_rotation ___702_coat_tangent_rotate_degree_in2_tmp 	%line{262} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:263
#     color metal_edgecolor_out = specular_color * specular;
	mul		___702_metal_reflectivity_out Pawn_Top_W_base_color Pawn_Top_W_base 	%line{263} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:264
#     float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
	mul		___702_metal_edgecolor_out Pawn_Top_W_specular_color Pawn_Top_W_specular 	%line{264} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:265
#     float tangent_rotate_degree_in2_tmp = 360.000000;
	mul		___702_coat_affect_roughness_multiply1_out Pawn_Top_W_coat_affect_roughness Pawn_Top_W_coat 	%line{265} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:266
#     float tangent_rotate_degree_out = specular_rotation * tangent_rotate_degree_in2_tmp;
	assign		___702_tangent_rotate_degree_in2_tmp $const28 	%line{266} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:267
#     float transmission_roughness_add_out = specular_roughness + transmission_extra_roughness;
	mul		___702_tangent_rotate_degree_out Pawn_Top_W_specular_rotation ___702_tangent_rotate_degree_in2_tmp 	%line{267} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:268
#     float subsurface_color_nonnegative_in2_tmp = 0.000000;
	add		___702_transmission_roughness_add_out mtlximage21_out Pawn_Top_W_transmission_extra_roughness 	%line{268} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:269
#     color subsurface_color_nonnegative_out = max(subsurface_color, subsurface_color_nonnegative_in2_tmp);
	assign		___702_subsurface_color_nonnegative_in2_tmp $const5 	%line{269} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:270
#     float coat_clamped_low_tmp = 0.000000;
	assign		$tmp69 ___702_subsurface_color_nonnegative_in2_tmp 	%line{270} %argrw{"wr"}
	max		___702_subsurface_color_nonnegative_out Pawn_Top_W_subsurface_color $tmp69 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:271
#     float coat_clamped_high_tmp = 1.000000;
	assign		___702_coat_clamped_low_tmp $const5 	%line{271} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:272
#     float coat_clamped_out = clamp(coat, coat_clamped_low_tmp, coat_clamped_high_tmp);
	assign		___702_coat_clamped_high_tmp $const9 	%line{272} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:273
#     color subsurface_radius_scaled_out = subsurface_radius * subsurface_scale;
	functioncall	$const26 166 	%line{273} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp70 Pawn_Top_W_coat ___702_coat_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___702_coat_clamped_out $tmp70 ___702_coat_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:274
#     float subsurface_selector_out = float(thin_walled);
	mul		___702_subsurface_radius_scaled_out Pawn_Top_W_subsurface_radius Pawn_Top_W_subsurface_scale 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{274} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:275
#     float base_color_nonnegative_in2_tmp = 0.000000;
	assign		$tmp71 Pawn_Top_W_thin_walled 	%line{275} %argrw{"wr"}
	assign		___702_subsurface_selector_out $tmp71 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:276
#     color base_color_nonnegative_out = max(base_color, base_color_nonnegative_in2_tmp);
	assign		___702_base_color_nonnegative_in2_tmp $const5 	%line{276} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:277
#     color coat_attenuation_bg_tmp = color(1.000000, 1.000000, 1.000000);
	assign		$tmp72 ___702_base_color_nonnegative_in2_tmp 	%line{277} %argrw{"wr"}
	max		___702_base_color_nonnegative_out Pawn_Top_W_base_color $tmp72 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:278
#     color coat_attenuation_out = mix(coat_attenuation_bg_tmp, coat_color, coat);
	assign		___702_coat_attenuation_bg_tmp $const29 	%line{278} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:279
#     float one_minus_coat_ior_in1_tmp = 1.000000;
	mix		___702_coat_attenuation_out ___702_coat_attenuation_bg_tmp Pawn_Top_W_coat_color Pawn_Top_W_coat 	%line{279} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:280
#     float one_minus_coat_ior_out = one_minus_coat_ior_in1_tmp - coat_IOR;
	assign		___702_one_minus_coat_ior_in1_tmp $const9 	%line{280} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:281
#     float one_plus_coat_ior_in1_tmp = 1.000000;
	sub		___702_one_minus_coat_ior_out ___702_one_minus_coat_ior_in1_tmp Pawn_Top_W_coat_IOR 	%line{281} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:282
#     float one_plus_coat_ior_out = one_plus_coat_ior_in1_tmp + coat_IOR;
	assign		___702_one_plus_coat_ior_in1_tmp $const9 	%line{282} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:283
#     color emission_weight_out = emission_color * emission1;
	add		___702_one_plus_coat_ior_out ___702_one_plus_coat_ior_in1_tmp Pawn_Top_W_coat_IOR 	%line{283} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:284
#     color opacity_luminance_out = color(0.0);
	mul		___702_emission_weight_out Pawn_Top_W_emission_color Pawn_Top_W_emission 	%line{284} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:285
#     mx_luminance_color3(opacity, color(0.272229, 0.674082, 0.053689), opacity_luminance_out);
	assign		___702_opacity_luminance_out $const30 	%line{285} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:286
#     vector coat_tangent_rotate_out = vector(0.0);
	functioncall	$const32 183 	%line{286} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:99
# }
	dot		$tmp74 Pawn_Top_W_opacity $const31 	%line{99} %argrw{"wrr"}
	assign		___702_opacity_luminance_out $tmp74 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:287
#     mx_rotate_vector3(tangent, coat_tangent_rotate_degree_out, coat_normal, coat_tangent_rotate_out);
	assign		___702_coat_tangent_rotate_out $const16 	%line{287} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:288
#     color artistic_ior_ior = color(0.0);
	functioncall	$const33 301 	%line{288} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:117
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const34 188 	%line{117} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp75 $const35 $const36 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___683_rotationRadians ___702_coat_tangent_rotate_degree_out $tmp75 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:118
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const37 251 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{118} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:104
#     float s = sin(angle);
	normalize	___682_nAxis geomprop_Nworld_out1 	%line{104} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:105
#     float c = cos(angle);
	sin		___682_s ___683_rotationRadians 	%line{105} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:106
#     float oc = 1.0 - c;
	cos		___682_c ___683_rotationRadians 	%line{106} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:107
# 
	sub		___682_oc $const9 ___682_c 	%line{107} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:109
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp76 ___682_nAxis $const1 	%line{109} %argrw{"wrr"}
	mul		$tmp77 ___682_oc $tmp76 	%argrw{"wrr"}
	compref		$tmp78 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp79 $tmp77 $tmp78 	%argrw{"wrr"}
	add		$tmp80 $tmp79 ___682_c 	%argrw{"wrr"}
	compref		$tmp81 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp82 ___682_oc $tmp81 	%argrw{"wrr"}
	compref		$tmp83 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp84 $tmp82 $tmp83 	%argrw{"wrr"}
	compref		$tmp85 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp86 $tmp85 ___682_s 	%argrw{"wrr"}
	sub		$tmp87 $tmp84 $tmp86 	%argrw{"wrr"}
	compref		$tmp88 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp89 ___682_oc $tmp88 	%argrw{"wrr"}
	compref		$tmp90 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp91 $tmp89 $tmp90 	%argrw{"wrr"}
	compref		$tmp92 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp93 $tmp92 ___682_s 	%argrw{"wrr"}
	add		$tmp94 $tmp91 $tmp93 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:110
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp95 ___682_nAxis $const1 	%line{110} %argrw{"wrr"}
	mul		$tmp96 ___682_oc $tmp95 	%argrw{"wrr"}
	compref		$tmp97 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp98 $tmp96 $tmp97 	%argrw{"wrr"}
	compref		$tmp99 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp100 $tmp99 ___682_s 	%argrw{"wrr"}
	add		$tmp101 $tmp98 $tmp100 	%argrw{"wrr"}
	compref		$tmp102 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp103 ___682_oc $tmp102 	%argrw{"wrr"}
	compref		$tmp104 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp105 $tmp103 $tmp104 	%argrw{"wrr"}
	add		$tmp106 $tmp105 ___682_c 	%argrw{"wrr"}
	compref		$tmp107 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp108 ___682_oc $tmp107 	%argrw{"wrr"}
	compref		$tmp109 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp110 $tmp108 $tmp109 	%argrw{"wrr"}
	compref		$tmp111 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp112 $tmp111 ___682_s 	%argrw{"wrr"}
	sub		$tmp113 $tmp110 $tmp112 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:111
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp114 ___682_nAxis $const4 	%line{111} %argrw{"wrr"}
	mul		$tmp115 ___682_oc $tmp114 	%argrw{"wrr"}
	compref		$tmp116 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp117 $tmp115 $tmp116 	%argrw{"wrr"}
	compref		$tmp118 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp119 $tmp118 ___682_s 	%argrw{"wrr"}
	sub		$tmp120 $tmp117 $tmp119 	%argrw{"wrr"}
	compref		$tmp121 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp122 ___682_oc $tmp121 	%argrw{"wrr"}
	compref		$tmp123 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp124 $tmp122 $tmp123 	%argrw{"wrr"}
	compref		$tmp125 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp126 $tmp125 ___682_s 	%argrw{"wrr"}
	add		$tmp127 $tmp124 $tmp126 	%argrw{"wrr"}
	compref		$tmp128 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp129 ___682_oc $tmp128 	%argrw{"wrr"}
	compref		$tmp130 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp131 $tmp129 $tmp130 	%argrw{"wrr"}
	add		$tmp132 $tmp131 ___682_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:109
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___683_m $tmp80 $tmp87 $tmp94 $const5 $tmp101 $tmp106 $tmp113 $const5 $tmp120 $tmp127 $tmp132 $const5 $const5 $const5 $const5 $const9 	%line{109} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:119
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp133.x geomprop_Tworld_out1 $const1 	%line{119} %argrw{"wrr"}
	compref		$tmp133.y geomprop_Tworld_out1 $const22 	%argrw{"wrr"}
	compref		$tmp133.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp133.w $const9 	%argrw{"wr"}
	functioncall	$const2 300 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp134 ___683_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp135 $tmp134 $tmp133.x 	%argrw{"wrr"}
	mxcompref	$tmp136 ___683_m $const22 $const1 	%argrw{"wrrr"}
	mul		$tmp137 $tmp136 $tmp133.y 	%argrw{"wrr"}
	add		$tmp138 $tmp135 $tmp137 	%argrw{"wrr"}
	mxcompref	$tmp139 ___683_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp140 $tmp139 $tmp133.z 	%argrw{"wrr"}
	add		$tmp141 $tmp138 $tmp140 	%argrw{"wrr"}
	mxcompref	$tmp142 ___683_m $const38 $const1 	%argrw{"wrrr"}
	mul		$tmp143 $tmp142 $tmp133.w 	%argrw{"wrr"}
	add		___683_trans.x $tmp141 $tmp143 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp144 ___683_m $const1 $const22 	%line{416} %argrw{"wrrr"}
	mul		$tmp145 $tmp144 $tmp133.x 	%argrw{"wrr"}
	mxcompref	$tmp146 ___683_m $const22 $const22 	%argrw{"wrrr"}
	mul		$tmp147 $tmp146 $tmp133.y 	%argrw{"wrr"}
	add		$tmp148 $tmp145 $tmp147 	%argrw{"wrr"}
	mxcompref	$tmp149 ___683_m $const4 $const22 	%argrw{"wrrr"}
	mul		$tmp150 $tmp149 $tmp133.z 	%argrw{"wrr"}
	add		$tmp151 $tmp148 $tmp150 	%argrw{"wrr"}
	mxcompref	$tmp152 ___683_m $const38 $const22 	%argrw{"wrrr"}
	mul		$tmp153 $tmp152 $tmp133.w 	%argrw{"wrr"}
	add		___683_trans.y $tmp151 $tmp153 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp154 ___683_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp155 $tmp154 $tmp133.x 	%argrw{"wrr"}
	mxcompref	$tmp156 ___683_m $const22 $const4 	%argrw{"wrrr"}
	mul		$tmp157 $tmp156 $tmp133.y 	%argrw{"wrr"}
	add		$tmp158 $tmp155 $tmp157 	%argrw{"wrr"}
	mxcompref	$tmp159 ___683_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp160 $tmp159 $tmp133.z 	%argrw{"wrr"}
	add		$tmp161 $tmp158 $tmp160 	%argrw{"wrr"}
	mxcompref	$tmp162 ___683_m $const38 $const4 	%argrw{"wrrr"}
	mul		$tmp163 $tmp162 $tmp133.w 	%argrw{"wrr"}
	add		___683_trans.z $tmp161 $tmp163 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp164 ___683_m $const1 $const38 	%line{418} %argrw{"wrrr"}
	mul		$tmp165 $tmp164 $tmp133.x 	%argrw{"wrr"}
	mxcompref	$tmp166 ___683_m $const22 $const38 	%argrw{"wrrr"}
	mul		$tmp167 $tmp166 $tmp133.y 	%argrw{"wrr"}
	add		$tmp168 $tmp165 $tmp167 	%argrw{"wrr"}
	mxcompref	$tmp169 ___683_m $const4 $const38 	%argrw{"wrrr"}
	mul		$tmp170 $tmp169 $tmp133.z 	%argrw{"wrr"}
	add		$tmp171 $tmp168 $tmp170 	%argrw{"wrr"}
	mxcompref	$tmp172 ___683_m $const38 $const38 	%argrw{"wrrr"}
	mul		$tmp173 $tmp172 $tmp133.w 	%argrw{"wrr"}
	add		___683_trans.w $tmp171 $tmp173 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:120
# }
	vector		___702_coat_tangent_rotate_out ___683_trans.x ___683_trans.y ___683_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{120} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:289
#     color artistic_ior_extinction = color(0.0);
	assign		___702_artistic_ior_ior $const30 	%line{289} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:290
#     mx_artistic_ior(metal_reflectivity_out, metal_edgecolor_out, artistic_ior_ior, artistic_ior_extinction);
	assign		___702_artistic_ior_extinction $const30 	%line{290} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:291
#     float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
	functioncall	$const39 328 	%line{291} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:128
#     color r_sqrt = sqrt(r);
	assign		$tmp174 $const5 	%line{128} %argrw{"wr"}
	assign		$tmp175 $const40 	%argrw{"wr"}
	functioncall	$const26 309 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:140
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp176 ___702_metal_reflectivity_out $tmp175 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{140} %argrw{"wrr"}
	max		___684_r $tmp176 $tmp174 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:129
#     color n_min = (1.0 - r) / (1.0 + r);
	sqrt		___684_r_sqrt ___684_r 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{129} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:130
#     color n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
	sub		$tmp177 $const9 ___684_r 	%line{130} %argrw{"wrr"}
	add		$tmp178 $const9 ___684_r 	%argrw{"wrr"}
	div		___684_n_min $tmp177 $tmp178 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:131
#     ior = mix(n_max, n_min, edge_color);
	add		$tmp179 $const9 ___684_r_sqrt 	%line{131} %argrw{"wrr"}
	sub		$tmp180 $const9 ___684_r_sqrt 	%argrw{"wrr"}
	div		___684_n_max $tmp179 $tmp180 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:132
# 
	mix		___702_artistic_ior_ior ___684_n_max ___684_n_min ___702_metal_edgecolor_out 	%line{132} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:134
#     color nm1 = ior - 1.0;
	add		___684_np1 ___702_artistic_ior_ior $const9 	%line{134} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:135
#     color k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
	sub		___684_nm1 ___702_artistic_ior_ior $const9 	%line{135} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:136
#     k2 = max(k2, 0.0);
	mul		$tmp181 ___684_np1 ___684_np1 	%line{136} %argrw{"wrr"}
	mul		$tmp182 $tmp181 ___684_r 	%argrw{"wrr"}
	mul		$tmp183 ___684_nm1 ___684_nm1 	%argrw{"wrr"}
	sub		$tmp184 $tmp182 $tmp183 	%argrw{"wrr"}
	sub		$tmp185 $const9 ___684_r 	%argrw{"wrr"}
	div		___684_k2 $tmp184 $tmp185 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:137
#     extinction = sqrt(k2);
	assign		$tmp186 $const5 	%line{137} %argrw{"wr"}
	max		___684_k2 ___684_k2 $tmp186 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:138
# }
	sqrt		___702_artistic_ior_extinction ___684_k2 	%line{138} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:292
#     vector tangent_rotate_out = vector(0.0);
	mul		___702_coat_affect_roughness_multiply2_out ___702_coat_affect_roughness_multiply1_out Pawn_Top_W_coat_roughness 	%line{292} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:293
#     mx_rotate_vector3(tangent, tangent_rotate_degree_out, normal1, tangent_rotate_out);
	assign		___702_tangent_rotate_out $const16 	%line{293} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:294
#     float transmission_roughness_clamped_low_tmp = 0.000000;
	functioncall	$const33 447 	%line{294} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:117
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const34 334 	%line{117} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp187 $const35 $const36 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___683_rotationRadians ___702_tangent_rotate_degree_out $tmp187 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:118
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const37 397 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{118} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:104
#     float s = sin(angle);
	normalize	___682_nAxis mtlxnormalmap15_out 	%line{104} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:105
#     float c = cos(angle);
	sin		___682_s ___683_rotationRadians 	%line{105} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:106
#     float oc = 1.0 - c;
	cos		___682_c ___683_rotationRadians 	%line{106} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:107
# 
	sub		___682_oc $const9 ___682_c 	%line{107} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:109
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp188 ___682_nAxis $const1 	%line{109} %argrw{"wrr"}
	mul		$tmp189 ___682_oc $tmp188 	%argrw{"wrr"}
	compref		$tmp190 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp191 $tmp189 $tmp190 	%argrw{"wrr"}
	add		$tmp192 $tmp191 ___682_c 	%argrw{"wrr"}
	compref		$tmp193 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp194 ___682_oc $tmp193 	%argrw{"wrr"}
	compref		$tmp195 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp196 $tmp194 $tmp195 	%argrw{"wrr"}
	compref		$tmp197 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp198 $tmp197 ___682_s 	%argrw{"wrr"}
	sub		$tmp199 $tmp196 $tmp198 	%argrw{"wrr"}
	compref		$tmp200 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp201 ___682_oc $tmp200 	%argrw{"wrr"}
	compref		$tmp202 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp203 $tmp201 $tmp202 	%argrw{"wrr"}
	compref		$tmp204 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp205 $tmp204 ___682_s 	%argrw{"wrr"}
	add		$tmp206 $tmp203 $tmp205 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:110
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp207 ___682_nAxis $const1 	%line{110} %argrw{"wrr"}
	mul		$tmp208 ___682_oc $tmp207 	%argrw{"wrr"}
	compref		$tmp209 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp210 $tmp208 $tmp209 	%argrw{"wrr"}
	compref		$tmp211 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp212 $tmp211 ___682_s 	%argrw{"wrr"}
	add		$tmp213 $tmp210 $tmp212 	%argrw{"wrr"}
	compref		$tmp214 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp215 ___682_oc $tmp214 	%argrw{"wrr"}
	compref		$tmp216 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp217 $tmp215 $tmp216 	%argrw{"wrr"}
	add		$tmp218 $tmp217 ___682_c 	%argrw{"wrr"}
	compref		$tmp219 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp220 ___682_oc $tmp219 	%argrw{"wrr"}
	compref		$tmp221 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp222 $tmp220 $tmp221 	%argrw{"wrr"}
	compref		$tmp223 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp224 $tmp223 ___682_s 	%argrw{"wrr"}
	sub		$tmp225 $tmp222 $tmp224 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:111
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp226 ___682_nAxis $const4 	%line{111} %argrw{"wrr"}
	mul		$tmp227 ___682_oc $tmp226 	%argrw{"wrr"}
	compref		$tmp228 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp229 $tmp227 $tmp228 	%argrw{"wrr"}
	compref		$tmp230 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp231 $tmp230 ___682_s 	%argrw{"wrr"}
	sub		$tmp232 $tmp229 $tmp231 	%argrw{"wrr"}
	compref		$tmp233 ___682_nAxis $const22 	%argrw{"wrr"}
	mul		$tmp234 ___682_oc $tmp233 	%argrw{"wrr"}
	compref		$tmp235 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp236 $tmp234 $tmp235 	%argrw{"wrr"}
	compref		$tmp237 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp238 $tmp237 ___682_s 	%argrw{"wrr"}
	add		$tmp239 $tmp236 $tmp238 	%argrw{"wrr"}
	compref		$tmp240 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp241 ___682_oc $tmp240 	%argrw{"wrr"}
	compref		$tmp242 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp243 $tmp241 $tmp242 	%argrw{"wrr"}
	add		$tmp244 $tmp243 ___682_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:109
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___683_m $tmp192 $tmp199 $tmp206 $const5 $tmp213 $tmp218 $tmp225 $const5 $tmp232 $tmp239 $tmp244 $const5 $const5 $const5 $const5 $const9 	%line{109} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:119
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp245.x geomprop_Tworld_out1 $const1 	%line{119} %argrw{"wrr"}
	compref		$tmp245.y geomprop_Tworld_out1 $const22 	%argrw{"wrr"}
	compref		$tmp245.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp245.w $const9 	%argrw{"wr"}
	functioncall	$const2 446 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp246 ___683_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp247 $tmp246 $tmp245.x 	%argrw{"wrr"}
	mxcompref	$tmp248 ___683_m $const22 $const1 	%argrw{"wrrr"}
	mul		$tmp249 $tmp248 $tmp245.y 	%argrw{"wrr"}
	add		$tmp250 $tmp247 $tmp249 	%argrw{"wrr"}
	mxcompref	$tmp251 ___683_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp252 $tmp251 $tmp245.z 	%argrw{"wrr"}
	add		$tmp253 $tmp250 $tmp252 	%argrw{"wrr"}
	mxcompref	$tmp254 ___683_m $const38 $const1 	%argrw{"wrrr"}
	mul		$tmp255 $tmp254 $tmp245.w 	%argrw{"wrr"}
	add		___683_trans.x $tmp253 $tmp255 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp256 ___683_m $const1 $const22 	%line{416} %argrw{"wrrr"}
	mul		$tmp257 $tmp256 $tmp245.x 	%argrw{"wrr"}
	mxcompref	$tmp258 ___683_m $const22 $const22 	%argrw{"wrrr"}
	mul		$tmp259 $tmp258 $tmp245.y 	%argrw{"wrr"}
	add		$tmp260 $tmp257 $tmp259 	%argrw{"wrr"}
	mxcompref	$tmp261 ___683_m $const4 $const22 	%argrw{"wrrr"}
	mul		$tmp262 $tmp261 $tmp245.z 	%argrw{"wrr"}
	add		$tmp263 $tmp260 $tmp262 	%argrw{"wrr"}
	mxcompref	$tmp264 ___683_m $const38 $const22 	%argrw{"wrrr"}
	mul		$tmp265 $tmp264 $tmp245.w 	%argrw{"wrr"}
	add		___683_trans.y $tmp263 $tmp265 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp266 ___683_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp267 $tmp266 $tmp245.x 	%argrw{"wrr"}
	mxcompref	$tmp268 ___683_m $const22 $const4 	%argrw{"wrrr"}
	mul		$tmp269 $tmp268 $tmp245.y 	%argrw{"wrr"}
	add		$tmp270 $tmp267 $tmp269 	%argrw{"wrr"}
	mxcompref	$tmp271 ___683_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp272 $tmp271 $tmp245.z 	%argrw{"wrr"}
	add		$tmp273 $tmp270 $tmp272 	%argrw{"wrr"}
	mxcompref	$tmp274 ___683_m $const38 $const4 	%argrw{"wrrr"}
	mul		$tmp275 $tmp274 $tmp245.w 	%argrw{"wrr"}
	add		___683_trans.z $tmp273 $tmp275 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp276 ___683_m $const1 $const38 	%line{418} %argrw{"wrrr"}
	mul		$tmp277 $tmp276 $tmp245.x 	%argrw{"wrr"}
	mxcompref	$tmp278 ___683_m $const22 $const38 	%argrw{"wrrr"}
	mul		$tmp279 $tmp278 $tmp245.y 	%argrw{"wrr"}
	add		$tmp280 $tmp277 $tmp279 	%argrw{"wrr"}
	mxcompref	$tmp281 ___683_m $const4 $const38 	%argrw{"wrrr"}
	mul		$tmp282 $tmp281 $tmp245.z 	%argrw{"wrr"}
	add		$tmp283 $tmp280 $tmp282 	%argrw{"wrr"}
	mxcompref	$tmp284 ___683_m $const38 $const38 	%argrw{"wrrr"}
	mul		$tmp285 $tmp284 $tmp245.w 	%argrw{"wrr"}
	add		___683_trans.w $tmp283 $tmp285 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:120
# }
	vector		___702_tangent_rotate_out ___683_trans.x ___683_trans.y ___683_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{120} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:295
#     float transmission_roughness_clamped_high_tmp = 1.000000;
	assign		___702_transmission_roughness_clamped_low_tmp $const5 	%line{295} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:296
#     float transmission_roughness_clamped_out = clamp(transmission_roughness_add_out, transmission_roughness_clamped_low_tmp, transmission_roughness_clamped_high_tmp);
	assign		___702_transmission_roughness_clamped_high_tmp $const9 	%line{296} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:297
#     float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
	functioncall	$const26 452 	%line{297} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp286 ___702_transmission_roughness_add_out ___702_transmission_roughness_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___702_transmission_roughness_clamped_out $tmp286 ___702_transmission_roughness_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:298
#     float coat_ior_to_F0_sqrt_out = one_minus_coat_ior_out / one_plus_coat_ior_out;
	mul		___702_coat_gamma_multiply_out ___702_coat_clamped_out Pawn_Top_W_coat_affect_color 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{298} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:299
#     int opacity_luminance_float_index_tmp = 0;
	div		___702_coat_ior_to_F0_sqrt_out ___702_one_minus_coat_ior_out ___702_one_plus_coat_ior_out 	%line{299} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:300
#     float opacity_luminance_float_out = mx_extract(opacity_luminance_out, opacity_luminance_float_index_tmp);
	assign		___702_opacity_luminance_float_index_tmp $const1 	%line{300} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:301
#     vector coat_tangent_rotate_normalize_out = normalize(coat_tangent_rotate_out);
	functioncall	$const41 457 	%line{301} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___702_opacity_luminance_float_out ___702_opacity_luminance_out ___702_opacity_luminance_float_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:302
#     float coat_affected_roughness_fg_tmp = 1.000000;
	normalize	___702_coat_tangent_rotate_normalize_out ___702_coat_tangent_rotate_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{302} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:303
#     float coat_affected_roughness_out = mix(specular_roughness, coat_affected_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___702_coat_affected_roughness_fg_tmp $const9 	%line{303} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:304
#     vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
	mix		___702_coat_affected_roughness_out mtlximage21_out ___702_coat_affected_roughness_fg_tmp ___702_coat_affect_roughness_multiply2_out 	%line{304} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:305
#     float coat_affected_transmission_roughness_fg_tmp = 1.000000;
	normalize	___702_tangent_rotate_normalize_out ___702_tangent_rotate_out 	%line{305} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:306
#     float coat_affected_transmission_roughness_out = mix(transmission_roughness_clamped_out, coat_affected_transmission_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___702_coat_affected_transmission_roughness_fg_tmp $const9 	%line{306} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:307
#     float coat_gamma_in2_tmp = 1.000000;
	mix		___702_coat_affected_transmission_roughness_out ___702_transmission_roughness_clamped_out ___702_coat_affected_transmission_roughness_fg_tmp ___702_coat_affect_roughness_multiply2_out 	%line{307} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:308
#     float coat_gamma_out = coat_gamma_multiply_out + coat_gamma_in2_tmp;
	assign		___702_coat_gamma_in2_tmp $const9 	%line{308} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:309
#     float coat_ior_to_F0_out = coat_ior_to_F0_sqrt_out * coat_ior_to_F0_sqrt_out;
	add		___702_coat_gamma_out ___702_coat_gamma_multiply_out ___702_coat_gamma_in2_tmp 	%line{309} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:310
#     float coat_tangent_value2_tmp = 0.000000;
	mul		___702_coat_ior_to_F0_out ___702_coat_ior_to_F0_sqrt_out ___702_coat_ior_to_F0_sqrt_out 	%line{310} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:311
#     vector coat_tangent_out = mx_ternary(coat_anisotropy > coat_tangent_value2_tmp, coat_tangent_rotate_normalize_out, tangent);
	assign		___702_coat_tangent_value2_tmp $const5 	%line{311} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:312
#     vector2 main_roughness_out = vector2(0.0, 0.0);
	gt		$tmp287 Pawn_Top_W_coat_anisotropy ___702_coat_tangent_value2_tmp 	%line{312} %argrw{"wrr"}
	functioncall	$const42 474 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp287 472 474 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___702_coat_tangent_out ___702_coat_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___702_coat_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:313
#     mx_roughness_anisotropy(coat_affected_roughness_out, specular_anisotropy, main_roughness_out);
	assign		___702_main_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{313} %argrw{"wr"}
	assign		___702_main_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:314
#     float main_tangent_value2_tmp = 0.000000;
	functioncall	$const24 495 	%line{314} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:83
#     if (anisotropy > 0.0)
	mul		$tmp288 ___702_coat_affected_roughness_out ___702_coat_affected_roughness_out 	%line{83} %argrw{"wrr"}
	functioncall	$const26 481 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp289 $tmp288 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___678_roughness_sqr $tmp289 $const25 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:84
#     {
	gt		$tmp290 Pawn_Top_W_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{84} %argrw{"wrr"}
	if		$tmp290 493 495 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:86
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const26 486 	%line{86} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp292 Pawn_Top_W_specular_anisotropy $const27 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp291 $tmp292 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:86
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp293 $const9 $tmp291 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{86} %argrw{"wrr"}
	sqrt		___679_aspect $tmp293 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:87
#         result.y = roughness_sqr * aspect;
	div		$tmp294 ___678_roughness_sqr ___679_aspect 	%line{87} %argrw{"wrr"}
	min		___702_main_roughness_out.x $tmp294 $const9 	%argrw{"wrr"}
	assign		___702_main_roughness_out.x ___702_main_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:88
#     }
	mul		___702_main_roughness_out.y ___678_roughness_sqr ___679_aspect 	%line{88} %argrw{"wrr"}
	assign		___702_main_roughness_out.y ___702_main_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:92
#         result.y = roughness_sqr;
	assign		___702_main_roughness_out.x ___678_roughness_sqr 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:93
#     }
	assign		___702_main_roughness_out.y ___678_roughness_sqr 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:315
#     vector main_tangent_out = mx_ternary(specular_anisotropy > main_tangent_value2_tmp, tangent_rotate_normalize_out, tangent);
	assign		___702_main_tangent_value2_tmp $const5 	%line{315} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:316
#     vector2 transmission_roughness_out = vector2(0.0, 0.0);
	gt		$tmp295 Pawn_Top_W_specular_anisotropy ___702_main_tangent_value2_tmp 	%line{316} %argrw{"wrr"}
	functioncall	$const42 503 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp295 501 503 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___702_main_tangent_out ___702_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___702_main_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:317
#     mx_roughness_anisotropy(coat_affected_transmission_roughness_out, specular_anisotropy, transmission_roughness_out);
	assign		___702_transmission_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{317} %argrw{"wr"}
	assign		___702_transmission_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:318
#     color coat_affected_subsurface_color_out = pow(subsurface_color_nonnegative_out, coat_gamma_out);
	functioncall	$const24 524 	%line{318} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:83
#     if (anisotropy > 0.0)
	mul		$tmp296 ___702_coat_affected_transmission_roughness_out ___702_coat_affected_transmission_roughness_out 	%line{83} %argrw{"wrr"}
	functioncall	$const26 510 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp297 $tmp296 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___678_roughness_sqr $tmp297 $const25 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:84
#     {
	gt		$tmp298 Pawn_Top_W_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{84} %argrw{"wrr"}
	if		$tmp298 522 524 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:86
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const26 515 	%line{86} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp300 Pawn_Top_W_specular_anisotropy $const27 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp299 $tmp300 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:86
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp301 $const9 $tmp299 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{86} %argrw{"wrr"}
	sqrt		___679_aspect $tmp301 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:87
#         result.y = roughness_sqr * aspect;
	div		$tmp302 ___678_roughness_sqr ___679_aspect 	%line{87} %argrw{"wrr"}
	min		___702_transmission_roughness_out.x $tmp302 $const9 	%argrw{"wrr"}
	assign		___702_transmission_roughness_out.x ___702_transmission_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:88
#     }
	mul		___702_transmission_roughness_out.y ___678_roughness_sqr ___679_aspect 	%line{88} %argrw{"wrr"}
	assign		___702_transmission_roughness_out.y ___702_transmission_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:92
#         result.y = roughness_sqr;
	assign		___702_transmission_roughness_out.x ___678_roughness_sqr 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:93
#     }
	assign		___702_transmission_roughness_out.y ___678_roughness_sqr 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:319
#     color coat_affected_diffuse_color_out = pow(base_color_nonnegative_out, coat_gamma_out);
	pow		___702_coat_affected_subsurface_color_out ___702_subsurface_color_nonnegative_out ___702_coat_gamma_out 	%line{319} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:320
#     float one_minus_coat_ior_to_F0_in1_tmp = 1.000000;
	pow		___702_coat_affected_diffuse_color_out ___702_base_color_nonnegative_out ___702_coat_gamma_out 	%line{320} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:321
#     float one_minus_coat_ior_to_F0_out = one_minus_coat_ior_to_F0_in1_tmp - coat_ior_to_F0_out;
	assign		___702_one_minus_coat_ior_to_F0_in1_tmp $const9 	%line{321} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:322
#     color emission_color0_out = color(0.0);
	sub		___702_one_minus_coat_ior_to_F0_out ___702_one_minus_coat_ior_to_F0_in1_tmp ___702_coat_ior_to_F0_out 	%line{322} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:323
#     NG_convert_float_color3(one_minus_coat_ior_to_F0_out, emission_color0_out);
	assign		___702_emission_color0_out $const30 	%line{323} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:324
#     BSDF coat_bsdf_out = null_closure;
	functioncall	$const43 532 	%line{324} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:159
#     out = combine_out;
	color		___687_combine_out ___702_one_minus_coat_ior_to_F0_out ___702_one_minus_coat_ior_to_F0_out ___702_one_minus_coat_ior_to_F0_out 	%line{159} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:160
# }
	assign		___702_emission_color0_out ___687_combine_out 	%line{160} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:325
#     mx_dielectric_bsdf(coat, color(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, 0.000000, 1.500000, coat_normal, coat_tangent_out, "ggx", "R", coat_bsdf_out);
	assign		___702_coat_bsdf_out ___702_null_closure 	%line{325} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:326
#     float metal_bsdf_weight_tmp = 1.000000;
	functioncall	$const47 544 	%line{326} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:143
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp304 $const46 $const48 	%line{143} %argrw{"wrr"}
	if		$tmp304 537 538 	%argrw{"r"}
	assign		___685_reflection_tint $const30 	%argrw{"wr"}
	assign		___685_reflection_tint $const29 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:144
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp305 $const46 $const46 	%line{144} %argrw{"wrr"}
	if		$tmp305 541 542 	%argrw{"r"}
	assign		___685_transmission_tint $const30 	%argrw{"wr"}
	assign		___685_transmission_tint $const29 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:145
# }
	closure		$tmp306 $const51 geomprop_Nworld_out1 ___702_coat_tangent_out ___685_reflection_tint ___685_transmission_tint ___702_coat_roughness_vector_out.x ___702_coat_roughness_vector_out.y Pawn_Top_W_coat_IOR $const45 $const49 $const5 $const50 $const44 	%line{145} %argrw{"wrrrrrrrrrrrrr"}
	mul		___702_coat_bsdf_out $tmp306 Pawn_Top_W_coat 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:327
#     string metal_bsdf_distribution_tmp = "ggx";
	assign		___702_metal_bsdf_weight_tmp $const9 	%line{327} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:328
#     BSDF metal_bsdf_out = metal_bsdf_weight_tmp * conductor_bsdf(normal1, main_tangent_out, main_roughness_out.x, main_roughness_out.y, artistic_ior_ior, artistic_ior_extinction, metal_bsdf_distribution_tmp, "thinfilm_thickness", thin_film_thickness, "thinfilm_ior", thin_film_IOR);
	assign		___702_metal_bsdf_distribution_tmp $const45 	%line{328} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:329
#     BSDF specular_bsdf_out = null_closure;
	closure		$tmp307 $const52 mtlxnormalmap15_out ___702_main_tangent_out ___702_main_roughness_out.x ___702_main_roughness_out.y ___702_artistic_ior_ior ___702_artistic_ior_extinction ___702_metal_bsdf_distribution_tmp $const49 Pawn_Top_W_thin_film_thickness $const50 Pawn_Top_W_thin_film_IOR 	%line{329} %argrw{"wrrrrrrrrrrrr"}
	mul		___702_metal_bsdf_out $tmp307 ___702_metal_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:330
#     mx_dielectric_bsdf(specular, specular_color, specular_IOR, main_roughness_out, thin_film_thickness, thin_film_IOR, normal1, main_tangent_out, "ggx", "R", specular_bsdf_out);
	assign		___702_specular_bsdf_out ___702_null_closure 	%line{330} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:331
#     BSDF transmission_bsdf_out = null_closure;
	functioncall	$const47 560 	%line{331} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:143
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp308 $const46 $const48 	%line{143} %argrw{"wrr"}
	if		$tmp308 553 554 	%argrw{"r"}
	assign		___685_reflection_tint $const30 	%argrw{"wr"}
	assign		___685_reflection_tint Pawn_Top_W_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:144
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp309 $const46 $const46 	%line{144} %argrw{"wrr"}
	if		$tmp309 557 558 	%argrw{"r"}
	assign		___685_transmission_tint $const30 	%argrw{"wr"}
	assign		___685_transmission_tint Pawn_Top_W_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:145
# }
	closure		$tmp310 $const51 mtlxnormalmap15_out ___702_main_tangent_out ___685_reflection_tint ___685_transmission_tint ___702_main_roughness_out.x ___702_main_roughness_out.y Pawn_Top_W_specular_IOR $const45 $const49 Pawn_Top_W_thin_film_thickness $const50 Pawn_Top_W_thin_film_IOR 	%line{145} %argrw{"wrrrrrrrrrrrrr"}
	mul		___702_specular_bsdf_out $tmp310 Pawn_Top_W_specular 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:332
#     mx_dielectric_bsdf(1.000000, transmission_color, specular_IOR, transmission_roughness_out, 0.000000, 1.500000, normal1, main_tangent_out, "ggx", "T", transmission_bsdf_out);
	assign		___702_transmission_bsdf_out ___702_null_closure 	%line{332} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:333
#     BSDF sheen_bsdf_out = sheen1 * sheen_bsdf(normal1, sheen_color, sheen_roughness);
	functioncall	$const47 572 	%line{333} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:143
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp311 $const48 $const48 	%line{143} %argrw{"wrr"}
	if		$tmp311 565 566 	%argrw{"r"}
	assign		___685_reflection_tint $const30 	%argrw{"wr"}
	assign		___685_reflection_tint Pawn_Top_W_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:144
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp312 $const48 $const46 	%line{144} %argrw{"wrr"}
	if		$tmp312 569 570 	%argrw{"r"}
	assign		___685_transmission_tint $const30 	%argrw{"wr"}
	assign		___685_transmission_tint Pawn_Top_W_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:145
# }
	closure		$tmp313 $const51 mtlxnormalmap15_out ___702_main_tangent_out ___685_reflection_tint ___685_transmission_tint ___702_transmission_roughness_out.x ___702_transmission_roughness_out.y Pawn_Top_W_specular_IOR $const45 $const49 $const5 $const50 $const44 	%line{145} %argrw{"wrrrrrrrrrrrrr"}
	mul		___702_transmission_bsdf_out $tmp313 $const9 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:334
#     float translucent_bsdf_weight_tmp = 1.000000;
	closure		$tmp314 $const53 mtlxnormalmap15_out Pawn_Top_W_sheen_color Pawn_Top_W_sheen_roughness 	%line{334} %argrw{"wrrrr"}
	mul		___702_sheen_bsdf_out $tmp314 Pawn_Top_W_sheen 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:335
#     BSDF translucent_bsdf_out = translucent_bsdf_weight_tmp * translucent_bsdf(normal1, coat_affected_subsurface_color_out);
	assign		___702_translucent_bsdf_weight_tmp $const9 	%line{335} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:336
#     BSDF subsurface_bsdf_out = null_closure;
	closure		$tmp315 $const54 mtlxnormalmap15_out ___702_coat_affected_subsurface_color_out 	%line{336} %argrw{"wrrr"}
	mul		___702_translucent_bsdf_out $tmp315 ___702_translucent_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:337
#     mx_subsurface_bsdf(1.000000, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal1, subsurface_bsdf_out);
	assign		___702_subsurface_bsdf_out ___702_null_closure 	%line{337} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:338
#     BSDF selected_subsurface_bsdf_out = mix(subsurface_bsdf_out, translucent_bsdf_out, subsurface_selector_out);
	functioncall	$const55 581 	%line{338} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:153
# #endif
	mul		$tmp316 $const9 ___702_coat_affected_subsurface_color_out 	%line{153} %argrw{"wrr"}
	closure		___702_subsurface_bsdf_out $const56 mtlxnormalmap15_out $tmp316 $const9 ___702_subsurface_radius_scaled_out Pawn_Top_W_subsurface_anisotropy 	%argrw{"wrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:339
#     BSDF diffuse_bsdf_out = base * oren_nayar_diffuse_bsdf(normal1, coat_affected_diffuse_color_out, diffuse_roughness);
	functioncall	$const57 586 	%line{339} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp317 $const9 ___702_subsurface_selector_out 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp318 ___702_subsurface_bsdf_out $tmp317 	%argrw{"wrr"}
	mul		$tmp319 ___702_translucent_bsdf_out ___702_subsurface_selector_out 	%argrw{"wrr"}
	add		___702_selected_subsurface_bsdf_out $tmp318 $tmp319 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:340
#     BSDF subsurface_mix_out = mix(diffuse_bsdf_out, selected_subsurface_bsdf_out, subsurface1);
	closure		$tmp320 $const58 mtlxnormalmap15_out ___702_coat_affected_diffuse_color_out Pawn_Top_W_diffuse_roughness 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{340} %argrw{"wrrrr"}
	mul		___702_diffuse_bsdf_out $tmp320 Pawn_Top_W_base 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:341
#     BSDF sheen_layer_out = layer(sheen_bsdf_out, subsurface_mix_out);
	functioncall	$const57 593 	%line{341} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp321 $const9 Pawn_Top_W_subsurface 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp322 ___702_diffuse_bsdf_out $tmp321 	%argrw{"wrr"}
	mul		$tmp323 ___702_selected_subsurface_bsdf_out Pawn_Top_W_subsurface 	%argrw{"wrr"}
	add		___702_subsurface_mix_out $tmp322 $tmp323 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:342
#     BSDF transmission_mix_out = mix(sheen_layer_out, transmission_bsdf_out, transmission);
	closure		___702_sheen_layer_out $const59 ___702_sheen_bsdf_out ___702_subsurface_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{342} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:343
#     BSDF specular_layer_out = layer(specular_bsdf_out, transmission_mix_out);
	functioncall	$const57 599 	%line{343} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp324 $const9 Pawn_Top_W_transmission 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp325 ___702_sheen_layer_out $tmp324 	%argrw{"wrr"}
	mul		$tmp326 ___702_transmission_bsdf_out Pawn_Top_W_transmission 	%argrw{"wrr"}
	add		___702_transmission_mix_out $tmp325 $tmp326 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:344
#     BSDF metalness_mix_out = mix(specular_layer_out, metal_bsdf_out, metalness);
	closure		___702_specular_layer_out $const59 ___702_specular_bsdf_out ___702_transmission_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{344} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:345
#     BSDF thin_film_layer_attenuated_out = (coat_attenuation_out * metalness_mix_out);
	functioncall	$const57 605 	%line{345} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp327 $const9 Pawn_Top_W_metalness 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp328 ___702_specular_layer_out $tmp327 	%argrw{"wrr"}
	mul		$tmp329 ___702_metal_bsdf_out Pawn_Top_W_metalness 	%argrw{"wrr"}
	add		___702_metalness_mix_out $tmp328 $tmp329 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:346
#     BSDF coat_layer_out = layer(coat_bsdf_out, thin_film_layer_attenuated_out);
	mul		___702_thin_film_layer_attenuated_out ___702_metalness_mix_out ___702_coat_attenuation_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{346} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:347
#     EDF emission_edf_out = uniform_edf(emission_weight_out);
	closure		___702_coat_layer_out $const59 ___702_coat_bsdf_out ___702_thin_film_layer_attenuated_out 	%line{347} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:348
#     EDF coat_tinted_emission_edf_out = (coat_color * emission_edf_out);
	closure		___702_emission_edf_out $const60 ___702_emission_weight_out 	%line{348} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:349
#     EDF coat_emission_edf_out = null_closure;
	mul		___702_coat_tinted_emission_edf_out ___702_emission_edf_out Pawn_Top_W_coat_color 	%line{349} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:350
#     mx_generalized_schlick_edf(emission_color0_out, color(0.000000, 0.000000, 0.000000), 5.000000, coat_tinted_emission_edf_out, coat_emission_edf_out);
	assign		___702_coat_emission_edf_out ___702_null_closure 	%line{350} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:351
#     EDF blended_coat_emission_edf_out = mix(emission_edf_out, coat_emission_edf_out, coat);
	functioncall	$const62 622 	%line{351} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:244
#     color f = mx_fresnel_schlick(NdotV, color0, color90, exponent);
	neg		$tmp332 I 	%line{244} %argrw{"wr"}
	dot		$tmp331 N $tmp332 	%argrw{"wrr"}
	fabs		___700_NdotV $tmp331 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:245
#     result = base * f;
	functioncall	$const63 621 	%line{245} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:238
#     return mix(f0, f90, pow(x, exponent));
	sub		$tmp333 $const9 ___700_NdotV 	%line{238} %argrw{"wrr"}
	functioncall	$const26 619 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp334 $tmp333 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___699_x $tmp334 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:239
# }
	pow		$tmp335 ___699_x $const61 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{239} %argrw{"wrr"}
	mix		___700_f ___702_emission_color0_out $const30 $tmp335 	%argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:246
# }
	mul		___702_coat_emission_edf_out ___702_coat_tinted_emission_edf_out ___700_f 	%line{246} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:352
#     surfaceshader shader_constructor_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const57 627 	%line{352} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp336 $const9 Pawn_Top_W_coat 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp337 ___702_emission_edf_out $tmp336 	%argrw{"wrr"}
	mul		$tmp338 ___702_coat_emission_edf_out Pawn_Top_W_coat 	%argrw{"wrr"}
	add		___702_blended_coat_emission_edf_out $tmp337 $tmp338 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:353
#     mx_surface(coat_layer_out, blended_coat_emission_edf_out, opacity_luminance_float_out, 0, shader_constructor_out);
	assign		___702_shader_constructor_out.bsdf ___702_null_closure 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{353} %argrw{"wr"}
	assign		___702_shader_constructor_out.edf ___702_null_closure 	%argrw{"wr"}
	assign		___702_shader_constructor_out.opacity $const9 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:354
#     out = shader_constructor_out;
	functioncall	$const64 637 	%line{354} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:251
#     result.edf     = edf;
	assign		___702_shader_constructor_out.bsdf ___702_coat_layer_out 	%line{251} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:252
#     result.opacity = clamp(opacity, 0.0, 1.0);
	assign		___702_shader_constructor_out.edf ___702_blended_coat_emission_edf_out 	%line{252} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:253
# }
	functioncall	$const26 636 	%line{253} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp339 ___702_opacity_luminance_float_out $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___702_shader_constructor_out.opacity $tmp339 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:253
# }
	assign		___702_shader_constructor_out.opacity ___702_shader_constructor_out.opacity 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{253} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:355
# }
	assign		Pawn_Top_W_out.bsdf ___702_shader_constructor_out.bsdf 	%line{355} %argrw{"wr"}
	assign		Pawn_Top_W_out.edf ___702_shader_constructor_out.edf 	%argrw{"wr"}
	assign		Pawn_Top_W_out.opacity ___702_shader_constructor_out.opacity 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:853
#     out = M_Pawn_Top_W_out;
	functioncall	$const65 650 	%line{853} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:360
#     return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
	functioncall	$const26 644 	%line{360} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp340 Pawn_Top_W_out.opacity $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___703_opacity_weight $tmp340 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:361
# }
	add		$tmp341 Pawn_Top_W_out.bsdf Pawn_Top_W_out.edf 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl"} %line{361} %argrw{"wrr"}
	mul		$tmp342 $tmp341 ___703_opacity_weight 	%argrw{"wrr"}
	closure		$tmp343 $const66 	%argrw{"wr"}
	sub		$tmp344 $const9 ___703_opacity_weight 	%argrw{"wrr"}
	mul		$tmp345 $tmp343 $tmp344 	%argrw{"wrr"}
	add		M_Pawn_Top_W_out $tmp342 $tmp345 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\Examples\\StandardSurface\\standard_surface_chess_set\\M_Pawn_Top_W.osl:854
# }
	assign		out M_Pawn_Top_W_out 	%line{854} %argrw{"wr"}
	end
