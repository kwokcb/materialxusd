#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/Examples/UsdPreviewSurface/usd_preview_surface_carpaint.mtlx, /Users/bernardkwok/work/materialxusd/tests/data/sphere.usd, /Users/bernardkwok/work/materialxusd/tests/data/san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "USD_Car_Paint" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:clearcoat = 1
            float inputs:clearcoatRoughness = 0
            color3f inputs:diffuseColor = (0.0518895, 0.29606, 0.425324)
            float inputs:displacement
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic
            float3 inputs:normal
            float inputs:occlusion
            float inputs:opacity
            int inputs:opacityMode
            float inputs:opacityThreshold
            float inputs:roughness = 0.4
            color3f inputs:specularColor
            int inputs:useSpecularWorkflow
            token outputs:mtlx:surface.connect = </MaterialX/Materials/USD_Car_Paint/SR_carpaint.outputs:surface>

            def Shader "SR_carpaint" (
                prepend references = </MaterialX/Shaders/SR_carpaint>
            )
            {
                float inputs:clearcoat.connect = </MaterialX/Materials/USD_Car_Paint.inputs:clearcoat>
                float inputs:clearcoatRoughness.connect = </MaterialX/Materials/USD_Car_Paint.inputs:clearcoatRoughness>
                color3f inputs:diffuseColor.connect = </MaterialX/Materials/USD_Car_Paint.inputs:diffuseColor>
                float inputs:displacement.connect = </MaterialX/Materials/USD_Car_Paint.inputs:displacement>
                color3f inputs:emissiveColor.connect = </MaterialX/Materials/USD_Car_Paint.inputs:emissiveColor>
                float inputs:ior.connect = </MaterialX/Materials/USD_Car_Paint.inputs:ior>
                float inputs:metallic.connect = </MaterialX/Materials/USD_Car_Paint.inputs:metallic>
                float3 inputs:normal.connect = </MaterialX/Materials/USD_Car_Paint.inputs:normal>
                float inputs:occlusion.connect = </MaterialX/Materials/USD_Car_Paint.inputs:occlusion>
                float inputs:opacity.connect = </MaterialX/Materials/USD_Car_Paint.inputs:opacity>
                int inputs:opacityMode.connect = </MaterialX/Materials/USD_Car_Paint.inputs:opacityMode>
                float inputs:opacityThreshold.connect = </MaterialX/Materials/USD_Car_Paint.inputs:opacityThreshold>
                float inputs:roughness.connect = </MaterialX/Materials/USD_Car_Paint.inputs:roughness>
                color3f inputs:specularColor.connect = </MaterialX/Materials/USD_Car_Paint.inputs:specularColor>
                int inputs:useSpecularWorkflow.connect = </MaterialX/Materials/USD_Car_Paint.inputs:useSpecularWorkflow>
            }
        }
    }

    def "Shaders"
    {
        def Shader "SR_carpaint"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:surface
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @/Users/bernardkwok/work/materialxusd/tests/data/sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/USD_Car_Paint>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @/Users/bernardkwok/work/materialxusd/tests/data/san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @/Users/bernardkwok/work/materialxusd/tests/data/camera_sphere.usda@
    )
    {
    }
}

