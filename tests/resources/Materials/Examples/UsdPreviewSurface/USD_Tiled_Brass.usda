#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: D:/Work/materialx/materialxusd/tests/resources/Materials/Examples/UsdPreviewSurface\\usd_preview_surface_brass_tiled_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "USD_Tiled_Brass" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor
            float inputs:displacement
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic = 1
            float3 inputs:normal
            float inputs:occlusion
            float inputs:opacity
            int inputs:opacityMode
            float inputs:opacityThreshold
            float inputs:roughness
            color3f inputs:specularColor
            int inputs:useSpecularWorkflow
            token outputs:mtlx:surface.connect = </MaterialX/Materials/USD_Tiled_Brass/SR_brass1.outputs:surface>

            def Shader "SR_brass1" (
                prepend references = </MaterialX/Shaders/SR_brass1>
            )
            {
                float inputs:clearcoat.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:clearcoat>
                float inputs:clearcoatRoughness.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:clearcoatRoughness>
                color3f inputs:diffuseColor.connect = </MaterialX/Materials/USD_Tiled_Brass/NG_brass1.outputs:out_color>
                float inputs:displacement.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:displacement>
                color3f inputs:emissiveColor.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:emissiveColor>
                float inputs:ior.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:ior>
                float inputs:metallic.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:metallic>
                float3 inputs:normal.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:normal>
                float inputs:occlusion.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:occlusion>
                float inputs:opacity.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:opacity>
                int inputs:opacityMode.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:opacityMode>
                float inputs:opacityThreshold.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:opacityThreshold>
                float inputs:roughness.connect = </MaterialX/Materials/USD_Tiled_Brass/NG_brass1.outputs:out_roughness>
                color3f inputs:specularColor.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:specularColor>
                int inputs:useSpecularWorkflow.connect = </MaterialX/Materials/USD_Tiled_Brass.inputs:useSpecularWorkflow>
            }

            def "NG_brass1" (
                prepend references = </MaterialX/NodeGraphs/NG_brass1>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "SR_brass1"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "NG_brass1"
        {
            color3f outputs:out_color.connect = </MaterialX/NodeGraphs/NG_brass1/image_color.outputs:out>
            float outputs:out_roughness.connect = </MaterialX/NodeGraphs/NG_brass1/image_roughness.outputs:out>

            def Shader "image_color"
            {
                uniform token info:id = "ND_tiledimage_color3"
                asset inputs:file = @../../../Images/brass_color.jpg@ (
                    colorSpace = "srgb_texture"
                )
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_brass1/texcoord.outputs:out>
                float2 inputs:uvtiling = (1, 1)
                color3f outputs:out
            }

            def Shader "image_roughness"
            {
                uniform token info:id = "ND_tiledimage_float"
                asset inputs:file = @../../../Images/brass_roughness.jpg@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/NG_brass1/texcoord.outputs:out>
                float2 inputs:uvtiling = (1, 1)
                float outputs:out
            }

            def Shader "texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/USD_Tiled_Brass>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

