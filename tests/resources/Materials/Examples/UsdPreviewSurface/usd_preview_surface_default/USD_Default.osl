#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void mx_roughness_anisotropy(float roughness, float anisotropy, output vector2 result)
{
    float roughness_sqr = clamp(roughness*roughness, M_FLOAT_EPS, 1.0);
    if (anisotropy > 0.0)
    {
        float aspect = sqrt(1.0 - clamp(anisotropy, 0.0, 0.98));
        result.x = min(roughness_sqr / aspect, 1.0);
        result.y = roughness_sqr * aspect;
    }
    else
    {
        result.x = roughness_sqr;
        result.y = roughness_sqr;
    }
}

void mx_artistic_ior(color reflectivity, color edge_color, output vector ior, output vector extinction)
{
    // "Artist Friendly Metallic Fresnel", Ole Gulbrandsen, 2014
    // http://jcgt.org/published/0003/04/03/paper.pdf

    color r = clamp(reflectivity, 0.0, 0.99);
    color r_sqrt = sqrt(r);
    color n_min = (1.0 - r) / (1.0 + r);
    color n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
    ior = mix(n_max, n_min, edge_color);

    color np1 = ior + 1.0;
    color nm1 = ior - 1.0;
    color k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
    k2 = max(k2, 0.0);
    extinction = sqrt(k2);
}

void mx_normalmap_vector2(vector value, vector2 normal_scale, vector N, vector T, vector B, output vector result)
{
    vector decodedValue;
    if (value == vector(0.0))
    {
        decodedValue = vector(0.0, 0.0, 1.0);
    }
    else
    {
        decodedValue = value * 2.0 - 1.0;
    }

    result = normalize(T * decodedValue[0] * normal_scale.x + B * decodedValue[1] * normal_scale.y + N * decodedValue[2]);
}

void mx_normalmap_float(vector value, float normal_scale, vector N, vector T, vector B, output vector result)
{
    mx_normalmap_vector2(value, vector2(normal_scale, normal_scale), N, T, B, result);
}

void NG_switch_floatI(float in1, float in2, float in3, float in4, float in5, float in6, float in7, float in8, float in9, float in10, int which, output float out)
{
    int ifgreater_10_value1_tmp = 10;
    float ifgreater_10_in2_tmp = 0.000000;
    float ifgreater_10_out = mx_ternary(ifgreater_10_value1_tmp > which, in10, ifgreater_10_in2_tmp);
    int ifgreater_9_value1_tmp = 9;
    float ifgreater_9_out = mx_ternary(ifgreater_9_value1_tmp > which, in9, ifgreater_10_out);
    int ifgreater_8_value1_tmp = 8;
    float ifgreater_8_out = mx_ternary(ifgreater_8_value1_tmp > which, in8, ifgreater_9_out);
    int ifgreater_7_value1_tmp = 7;
    float ifgreater_7_out = mx_ternary(ifgreater_7_value1_tmp > which, in7, ifgreater_8_out);
    int ifgreater_6_value1_tmp = 6;
    float ifgreater_6_out = mx_ternary(ifgreater_6_value1_tmp > which, in6, ifgreater_7_out);
    int ifgreater_5_value1_tmp = 5;
    float ifgreater_5_out = mx_ternary(ifgreater_5_value1_tmp > which, in5, ifgreater_6_out);
    int ifgreater_4_value1_tmp = 4;
    float ifgreater_4_out = mx_ternary(ifgreater_4_value1_tmp > which, in4, ifgreater_5_out);
    int ifgreater_3_value1_tmp = 3;
    float ifgreater_3_out = mx_ternary(ifgreater_3_value1_tmp > which, in3, ifgreater_4_out);
    int ifgreater_2_value1_tmp = 2;
    float ifgreater_2_out = mx_ternary(ifgreater_2_value1_tmp > which, in2, ifgreater_3_out);
    int ifgreater_1_value1_tmp = 1;
    float ifgreater_1_out = mx_ternary(ifgreater_1_value1_tmp > which, in1, ifgreater_2_out);
    out = ifgreater_1_out;
}

void NG_convert_float_color3(float in, output color out)
{
    color combine_out = color( in,in,in );
    out = combine_out;
}

void mx_generalized_schlick_bsdf(float weight, color color0, color color82, color color90, float exponent, vector2 roughness, float thinfilm_thickness, float thinfilm_ior, normal N, vector U, string distribution, string scatter_mode, output BSDF bsdf)
{
    color reflection_tint = (scatter_mode == "T") ? color(0.0) : color(1.0);
    color transmission_tint = (scatter_mode == "R") ? color(0.0) : color(1.0);
    bsdf = weight * generalized_schlick_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, color0, color90, exponent, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
}

void mx_dielectric_bsdf(float weight, color tint, float ior, vector2 roughness, float thinfilm_thickness, float thinfilm_ior, normal N, vector U, string distribution, string scatter_mode, output BSDF bsdf)
{
    color reflection_tint = (scatter_mode == "T") ? color(0.0) : tint;
    color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
    bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
}

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

void IMP_UsdPreviewSurface_surfaceshader(color diffuseColor, color emissiveColor, int useSpecularWorkflow, color specularColor, float metallic, float roughness, float clearcoat, float clearcoatRoughness, float opacity, int opacityMode, float opacityThreshold, float ior, vector normal1, float displacement, float occlusion, output surfaceshader out)
{
    closure color null_closure = 0;
    vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
    float one_minus_ior_in1_tmp = 1.000000;
    float one_minus_ior_out = one_minus_ior_in1_tmp - ior;
    float one_plus_ior_in1_tmp = 1.000000;
    float one_plus_ior_out = one_plus_ior_in1_tmp + ior;
    vector2 coat_roughness_out = vector2(0.0, 0.0);
    mx_roughness_anisotropy(clearcoatRoughness, 0.000000, coat_roughness_out);
    string geomprop_Nworld_space_tmp = "world";
    vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space_tmp, N);
    vector geomprop_Bworld_out1 = normalize(cross(N, vector(N[2], 0, -N[0])));
    float scale_normal_in2_tmp = 0.500000;
    vector scale_normal_out = normal1 * scale_normal_in2_tmp;
    vector2 specular_roughness_out = vector2(0.0, 0.0);
    mx_roughness_anisotropy(roughness, 0.000000, specular_roughness_out);
    float inverse_metalness_in1_tmp = 1.000000;
    float inverse_metalness_out = inverse_metalness_in1_tmp - metallic;
    float use_specular_workflow_float_out = float(useSpecularWorkflow);
    float transmission_mix_amount_value2_tmp = 0.000000;
    float transmission_mix_amount_in1_tmp = 1.000000;
    float transmission_mix_amount_out = mx_ternary(opacityThreshold > transmission_mix_amount_value2_tmp, transmission_mix_amount_in1_tmp, opacity);
    color artistic_ior_ior = color(0.0);
    color artistic_ior_extinction = color(0.0);
    mx_artistic_ior(diffuseColor, diffuseColor, artistic_ior_ior, artistic_ior_extinction);
    color specular_color_metallic_bg_tmp = color(1.000000, 1.000000, 1.000000);
    color specular_color_metallic_out = mix(specular_color_metallic_bg_tmp, diffuseColor, metallic);
    float cutout_opacity_in1_tmp = 1.000000;
    float cutout_opacity_in2_tmp = 0.000000;
    float cutout_opacity_out = mx_ternary(opacity >= opacityThreshold, cutout_opacity_in1_tmp, cutout_opacity_in2_tmp);
    float R_out = one_minus_ior_out / one_plus_ior_out;
    float bias_normal_in2_tmp = 0.500000;
    vector bias_normal_out = scale_normal_out + bias_normal_in2_tmp;
    float diffuse_bsdf_weight_fg_tmp = 1.000000;
    float diffuse_bsdf_weight_out = mix(inverse_metalness_out, diffuse_bsdf_weight_fg_tmp, use_specular_workflow_float_out);
    float opacity_presence_value2_tmp = 0.000000;
    float opacity_presence_in1_tmp = 0.000000;
    float opacity_presence_out = mx_ternary(opacity == opacity_presence_value2_tmp, opacity_presence_in1_tmp, cutout_opacity_out);
    float R_sq_out = R_out * R_out;
    vector surface_normal_out = vector(0.0);
    mx_normalmap_float(bias_normal_out, 1.000000, geomprop_Nworld_out1, geomprop_Tworld_out1, geomprop_Bworld_out1, surface_normal_out);
    float opacity_switch_out = 0.0;
    NG_switch_floatI(cutout_opacity_out, opacity_presence_out, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, opacityMode, opacity_switch_out);
    color coat_F0_out = color(0.0);
    NG_convert_float_color3(R_sq_out, coat_F0_out);
    color specular_color_metallic_R_sq_out = specular_color_metallic_out * R_sq_out;
    color F0_out = mix(specular_color_metallic_R_sq_out, specular_color_metallic_out, metallic);
    BSDF coat_dielectric_bsdf_out = null_closure;
    mx_generalized_schlick_bsdf(clearcoat, coat_F0_out, color(1.000000, 1.000000, 1.000000), color(1.000000, 1.000000, 1.000000), 5.000000, coat_roughness_out, 0.000000, 1.500000, surface_normal_out, geomprop_Tworld_out1, "ggx", "R", coat_dielectric_bsdf_out);
    BSDF specular_bsdf1_out = null_closure;
    mx_generalized_schlick_bsdf(1.000000, specularColor, color(1.000000, 1.000000, 1.000000), color(1.000000, 1.000000, 1.000000), 5.000000, specular_roughness_out, 0.000000, 1.500000, surface_normal_out, geomprop_Tworld_out1, "ggx", "R", specular_bsdf1_out);
    float diffuse_bsdf_roughness_tmp = 0.000000;
    BSDF diffuse_bsdf_out = diffuse_bsdf_weight_out * oren_nayar_diffuse_bsdf(surface_normal_out, diffuseColor, diffuse_bsdf_roughness_tmp);
    BSDF transmission_bsdf_out = null_closure;
    mx_dielectric_bsdf(1.000000, color(1.000000, 1.000000, 1.000000), ior, vector2(0.000000, 0.000000), 0.000000, 1.500000, surface_normal_out, geomprop_Tworld_out1, "ggx", "T", transmission_bsdf_out);
    BSDF transmission_mix_out = mix(transmission_bsdf_out, diffuse_bsdf_out, transmission_mix_amount_out);
    BSDF specular_workflow_bsdf_out = layer(specular_bsdf1_out, transmission_mix_out);
    float metalness_metal_bsdf_weight_tmp = 1.000000;
    string metalness_metal_bsdf_distribution_tmp = "ggx";
    float metalness_metal_bsdf_thinfilm_thickness_tmp = 0.000000;
    float metalness_metal_bsdf_thinfilm_ior_tmp = 1.500000;
    BSDF metalness_metal_bsdf_out = metalness_metal_bsdf_weight_tmp * conductor_bsdf(surface_normal_out, geomprop_Tworld_out1, specular_roughness_out.x, specular_roughness_out.y, artistic_ior_ior, artistic_ior_extinction, metalness_metal_bsdf_distribution_tmp, "thinfilm_thickness", metalness_metal_bsdf_thinfilm_thickness_tmp, "thinfilm_ior", metalness_metal_bsdf_thinfilm_ior_tmp);
    BSDF specular_bsdf2_out = null_closure;
    mx_generalized_schlick_bsdf(1.000000, F0_out, color(1.000000, 1.000000, 1.000000), specular_color_metallic_out, 5.000000, specular_roughness_out, 0.000000, 1.500000, surface_normal_out, geomprop_Tworld_out1, "ggx", "R", specular_bsdf2_out);
    BSDF metalness_specular_bsdf_out = layer(specular_bsdf2_out, transmission_mix_out);
    BSDF metalness_workflow_bsdf_out = mix(metalness_specular_bsdf_out, metalness_metal_bsdf_out, metallic);
    BSDF workflow_selector_bsdf_out = mix(metalness_workflow_bsdf_out, specular_workflow_bsdf_out, use_specular_workflow_float_out);
    BSDF coat_bsdf_out = layer(coat_dielectric_bsdf_out, workflow_selector_bsdf_out);
    EDF emission_edf_out = uniform_edf(emissiveColor);
    surfaceshader surface_constructor_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(coat_bsdf_out, emission_edf_out, opacity_switch_out, 0, surface_constructor_out);
    out = surface_constructor_out;
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader USD_Default
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "USD_Default"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    color SR_default_diffuseColor = color(0.180000, 0.180000, 0.180000)
    [[
        color min = color(0.000000, 0.000000, 0.000000),
        color max = color(1.000000, 1.000000, 1.000000),
        string label = "Diffuse Color"
    ]],
    color SR_default_emissiveColor = color(0.000000, 0.000000, 0.000000)
    [[
        color min = color(0.000000, 0.000000, 0.000000),
        color slidermax = color(1.000000, 1.000000, 1.000000),
        string label = "Emissive Color"
    ]],
    int SR_default_useSpecularWorkflow = 0
    [[
        int min = 0,
        int max = 1,
        int sensitivity = 1,
        string label = "Use Specular Workflow",
        string widget = "number"
    ]],
    color SR_default_specularColor = color(0.000000, 0.000000, 0.000000)
    [[
        color min = color(0.000000, 0.000000, 0.000000),
        color max = color(1.000000, 1.000000, 1.000000),
        string label = "Specular Color"
    ]],
    float SR_default_metallic = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Metallic",
        string widget = "number"
    ]],
    float SR_default_roughness = 0.500000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Roughness",
        string widget = "number"
    ]],
    float SR_default_clearcoat = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Clearcoat",
        string widget = "number"
    ]],
    float SR_default_clearcoatRoughness = 0.010000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Clearcoat Roughness",
        string widget = "number"
    ]],
    float SR_default_opacity = 1.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Opacity",
        string widget = "number"
    ]],
    int SR_default_opacityMode = 0
    [[
        string label = "Opacity Mode",
        string widget = "number"
    ]],
    float SR_default_opacityThreshold = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Opacity Threshold",
        string widget = "number"
    ]],
    float SR_default_ior = 1.500000
    [[
        float min = 0.000000,
        float slidermin = 1.000000,
        float slidermax = 3.000000,
        string label = "Index of Refraction",
        string widget = "number"
    ]],
    vector SR_default_normal = vector(0.000000, 0.000000, 1.000000)
    [[
        vector min = vector(-1.000000, -1.000000, -1.000000),
        vector max = vector(1.000000, 1.000000, 1.000000),
        string label = "Normal"
    ]],
    float SR_default_displacement = 0.000000
    [[
        string label = "Displacement",
        string widget = "number"
    ]],
    float SR_default_occlusion = 1.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Occlusion",
        string widget = "number"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    surfaceshader SR_default_out = surfaceshader(null_closure, null_closure, 1.0);
    IMP_UsdPreviewSurface_surfaceshader(SR_default_diffuseColor, SR_default_emissiveColor, SR_default_useSpecularWorkflow, SR_default_specularColor, SR_default_metallic, SR_default_roughness, SR_default_clearcoat, SR_default_clearcoatRoughness, SR_default_opacity, SR_default_opacityMode, SR_default_opacityThreshold, SR_default_ior, SR_default_normal, SR_default_displacement, SR_default_occlusion, SR_default_out);
    MATERIAL USD_Default_out = mx_surfacematerial(SR_default_out, backsurfaceshader, displacementshader1);
    out = USD_Default_out;
}

