#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/TestSuite/nprlib\\gooch_shade_converted.mtlx, D:\\work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "default_gooch_material" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/default_gooch_material/unlit_surface.outputs:surface>

            def Shader "unlit_surface" (
                prepend references = </MaterialX/Shaders/unlit_surface>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/default_gooch_material.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/default_gooch_material/root_graph.outputs:out>
                float inputs:opacity.connect = </MaterialX/Materials/default_gooch_material.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/default_gooch_material.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/default_gooch_material.inputs:transmission_color>
            }

            def "root_graph" (
                prepend references = </MaterialX/NodeGraphs/root_graph>
            )
            {
            }
        }

        def Material "redblue_gooch_material" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/redblue_gooch_material/redblue_gooch_surface.outputs:surface>

            def Shader "redblue_gooch_surface" (
                prepend references = </MaterialX/Shaders/redblue_gooch_surface>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/redblue_gooch_material.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/redblue_gooch_material/root_graph.outputs:out2>
                float inputs:opacity.connect = </MaterialX/Materials/redblue_gooch_material.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/redblue_gooch_material.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/redblue_gooch_material.inputs:transmission_color>
            }

            def "root_graph" (
                prepend references = </MaterialX/NodeGraphs/root_graph>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "unlit_surface"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }

        def Shader "redblue_gooch_surface"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "root_graph"
        {
            color3f outputs:out.connect = </MaterialX/NodeGraphs/root_graph/default_gooch.outputs:out>
            color3f outputs:out2.connect = </MaterialX/NodeGraphs/root_graph/red_blue_gooch.outputs:out>

            def Shader "default_gooch"
            {
                uniform token info:id = "ND_gooch_shade"
                color3f inputs:cool_color = (0.3, 0.3, 0.8)
                float inputs:shininess = 64
                float inputs:specular_intensity = 1
                color3f inputs:warm_color = (0.8, 0.8, 0.7)
                color3f outputs:out
            }

            def Shader "red_blue_gooch"
            {
                uniform token info:id = "ND_gooch_shade"
                color3f inputs:cool_color = (0.1, 0.1, 0.9)
                float inputs:shininess = 64
                float inputs:specular_intensity = 1
                color3f inputs:warm_color = (0.9, 0.1, 0.1)
                color3f outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/default_gooch_material>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

