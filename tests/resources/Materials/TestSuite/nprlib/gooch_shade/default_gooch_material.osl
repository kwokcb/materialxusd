#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void NG_reflect_vector3(vector in, vector normal1, output vector out)
{
    float NdotI_out = dot(normal1, in);
    float NdotI_2_in2_tmp = 2.000000;
    float NdotI_2_out = NdotI_out * NdotI_2_in2_tmp;
    vector NdotI_N_2_out = normal1 * NdotI_2_out;
    vector reflection_vector_out = in - NdotI_N_2_out;
    out = reflection_vector_out;
}

void NG_gooch_shade(color warm_color, color cool_color, float specular_intensity, float shininess, vector light_direction, output color out)
{
    string normal_space_tmp = "world";
    vector normal_out = transform(normal_space_tmp, N);
    vector unit_lightdir_out = normalize(light_direction);
    string viewdir_space_tmp = "world";
    vector viewdir_out = transform(viewdir_space_tmp, I);
    vector unit_normal_out = normalize(normal_out);
    float invert_lightdir_in2_tmp = -1.000000;
    vector invert_lightdir_out = unit_lightdir_out * invert_lightdir_in2_tmp;
    vector unit_viewdir_out = normalize(viewdir_out);
    float NdotL_out = dot(unit_normal_out, unit_lightdir_out);
    vector view_reflect_out = vector(0.0);
    NG_reflect_vector3(unit_viewdir_out, unit_normal_out, view_reflect_out);
    float one_plus_NdotL_in1_tmp = 1.000000;
    float one_plus_NdotL_out = one_plus_NdotL_in1_tmp + NdotL_out;
    float VdotR_out = dot(invert_lightdir_out, view_reflect_out);
    float cool_intensity_in2_tmp = 2.000000;
    float cool_intensity_out = one_plus_NdotL_out / cool_intensity_in2_tmp;
    float VdotR_nonnegative_in2_tmp = 0.000000;
    float VdotR_nonnegative_out = max(VdotR_out, VdotR_nonnegative_in2_tmp);
    color diffuse_out = mix(warm_color, cool_color, cool_intensity_out);
    float specular_highlight_out = pow(VdotR_nonnegative_out, shininess);
    float specular_out = specular_highlight_out * specular_intensity;
    color final_color_out = diffuse_out + specular_out;
    out = final_color_out;
}

void mx_surface_unlit(float emission_weight, color emission_color, float transmission_weight, color transmission_color, float opacity, output surfaceshader result)
{
    float trans = clamp(transmission_weight, 0.0, 1.0);
    result.bsdf = trans * transmission_color * transparent();
    result.edf  = (1.0 - trans) * emission_weight * emission_color * emission();
    result.opacity = clamp(opacity, 0.0, 1.0);
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader default_gooch_material
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "default_gooch_material"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    color default_gooch_warm_color = color(0.800000, 0.800000, 0.700000)
    [[
        string label = "Warm Color",
        string help = "Warm color"
    ]],
    color default_gooch_cool_color = color(0.300000, 0.300000, 0.800000)
    [[
        string label = "Cool Color",
        string help = "Cool color"
    ]],
    float default_gooch_specular_intensity = 1.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Specular Intensity",
        string help = "Specular Intensity",
        string widget = "number"
    ]],
    float default_gooch_shininess = 64.000000
    [[
        float min = 1.000000,
        float slidermax = 256.000000,
        string label = "Shininess",
        string help = "Specular Power",
        string widget = "number"
    ]],
    vector default_gooch_light_direction = vector(1.000000, -0.500000, -0.500000)
    [[
        vector min = vector(-1.000000, -1.000000, -1.000000),
        vector max = vector(1.000000, 1.000000, 1.000000),
        string label = "Light Direction",
        string help = "Light vector in world space"
    ]],
    float unlit_surface_emission = 1.000000
    [[
        string help = "Surface emission amount.",
        string widget = "number"
    ]],
    float unlit_surface_transmission = 0.000000
    [[
        string help = "Surface transmission amount.",
        string widget = "number"
    ]],
    color unlit_surface_transmission_color = color(1.000000, 1.000000, 1.000000)
    [[
        string help = "Surface transmission color."
    ]],
    float unlit_surface_opacity = 1.000000
    [[
        string help = "Surface cutout opacity.",
        string widget = "number"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    color default_gooch_out = color(0.0);
    NG_gooch_shade(default_gooch_warm_color, default_gooch_cool_color, default_gooch_specular_intensity, default_gooch_shininess, default_gooch_light_direction, default_gooch_out);
    surfaceshader unlit_surface_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface_unlit(unlit_surface_emission, default_gooch_out, unlit_surface_transmission, unlit_surface_transmission_color, unlit_surface_opacity, unlit_surface_out);
    MATERIAL default_gooch_material_out = mx_surfacematerial(unlit_surface_out, backsurfaceshader, displacementshader1);
    out = default_gooch_material_out;
}

