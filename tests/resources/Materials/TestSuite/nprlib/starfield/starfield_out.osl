#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void mx_noise3d_float(float amplitude, float pivot, vector position, output float result)
{
    float value = noise("snoise", position);
    result = value * amplitude + pivot;
}

void NG_contrast_float(float in, float amount, float pivot, output float out)
{
    float N_sub_float_out = in - pivot;
    float N_mul_float_out = N_sub_float_out * amount;
    float N_add_float_out = N_mul_float_out + pivot;
    out = N_add_float_out;
}

void NG_convert_float_color3(float in, output color out)
{
    color combine_out = color( in,in,in );
    out = combine_out;
}

shader starfield_out
[[
    string mtlx_category = "output",
    string mtlx_name = "out"
]]
(
    string viewDir_space = "world",
    float multiply_vector3FA_in2 = 260.000000
    [[
        string widget = "number"
    ]],
    float noise3d_float_amplitude = 1.000000
    [[
        string widget = "number"
    ]],
    float noise3d_float_pivot = 0.000000
    [[
        string widget = "number"
    ]],
    float contrast_float_amount = 5.000000
    [[
        string widget = "number"
    ]],
    float contrast_float_pivot = 0.800000
    [[
        string widget = "number"
    ]],
    float clamp_float_low = 0.000000
    [[
        string widget = "number"
    ]],
    float clamp_float_high = 1.000000
    [[
        string widget = "number"
    ]],
    output color out = color(0.0)
)
{
    vector viewDir_out = transform(viewDir_space, I);
    vector multiply_vector3FA_out = viewDir_out * multiply_vector3FA_in2;
    float noise3d_float_out = 0.0;
    mx_noise3d_float(noise3d_float_amplitude, noise3d_float_pivot, multiply_vector3FA_out, noise3d_float_out);
    float contrast_float_out = 0.0;
    NG_contrast_float(noise3d_float_out, contrast_float_amount, contrast_float_pivot, contrast_float_out);
    float clamp_float_out = clamp(contrast_float_out, clamp_float_low, clamp_float_high);
    color convert_float_color3_out = color(0.0);
    NG_convert_float_color3(clamp_float_out, convert_float_color3_out);
    out = convert_float_color3_out;
}

