#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void NG_reflect_vector3(vector in, vector normal1, output vector out)
{
    float NdotI_out = dot(normal1, in);
    float NdotI_2_in2_tmp = 2.000000;
    float NdotI_2_out = NdotI_out * NdotI_2_in2_tmp;
    vector NdotI_N_2_out = normal1 * NdotI_2_out;
    vector reflection_vector_out = in - NdotI_N_2_out;
    out = reflection_vector_out;
}

void NG_convert_float_color3(float in, output color out)
{
    color combine_out = color( in,in,in );
    out = combine_out;
}

void NG_toon_sample(color base_color, color ambient_color, color specular_color, float glossiness, color rim_color, vector light_direction, color light_color, output color output_color3)
{
    string normal_space_tmp = "world";
    vector normal_out = transform(normal_space_tmp, N);
    vector unit_light_direction_out = normalize(light_direction);
    string viewdirection_vector3_space_tmp = "world";
    vector viewdirection_vector3_out = transform(viewdirection_vector3_space_tmp, I);
    float add_float_in1_tmp = 0.700000;
    float add_float_in2_tmp = 0.010000;
    float add_float_out = add_float_in1_tmp + add_float_in2_tmp;
    float subtract_float_in1_tmp = 0.700000;
    float subtract_float_in2_tmp = 0.010000;
    float subtract_float_out = subtract_float_in1_tmp - subtract_float_in2_tmp;
    vector unit_normal_out = normalize(normal_out);
    vector multiply_vector4_in2_tmp = vector(-1.000000, -1.000000, -1.000000);
    vector multiply_vector4_out = unit_light_direction_out * multiply_vector4_in2_tmp;
    vector unit_viewdirection_out = normalize(viewdirection_vector3_out);
    float NdotL_out = dot(unit_normal_out, multiply_vector4_out);
    vector reflect_out = vector(0.0);
    NG_reflect_vector3(unit_viewdirection_out, unit_normal_out, reflect_out);
    vector multiply_vector3_in2_tmp = vector(-1.000000, -1.000000, -1.000000);
    vector multiply_vector3_out = unit_viewdirection_out * multiply_vector3_in2_tmp;
    float smooth_gradient_low_tmp = 0.000000;
    float smooth_gradient_high_tmp = 0.001000;
    float smooth_gradient_out = smoothstep(smooth_gradient_low_tmp, smooth_gradient_high_tmp, NdotL_out);
    float rim_power_in2_tmp = 0.100000;
    float rim_power_out = pow(NdotL_out, rim_power_in2_tmp);
    float LdotV_out = dot(multiply_vector4_out, reflect_out);
    float NdotV_out = dot(unit_normal_out, multiply_vector3_out);
    color gradient_light_out = light_color * smooth_gradient_out;
    float max_float_in2_tmp = 0.000000;
    float max_float_out = max(LdotV_out, max_float_in2_tmp);
    float NdotV_invert_amount_tmp = 1.000000;
    float NdotV_invert_out = NdotV_invert_amount_tmp - NdotV_out;
    color add_color3_out = gradient_light_out + ambient_color;
    float multiply_float_out = smooth_gradient_out * max_float_out;
    float rmi_intensity_out = NdotV_invert_out * rim_power_out;
    float specular_intensity_power_out = pow(multiply_float_out, glossiness);
    float rim_gradient_out = smoothstep(add_float_out, subtract_float_out, rmi_intensity_out);
    float specular_remap_low_tmp = 0.005000;
    float specular_remap_high_tmp = 0.008000;
    float specular_remap_out = smoothstep(specular_remap_low_tmp, specular_remap_high_tmp, specular_intensity_power_out);
    color rim_out = rim_color * rim_gradient_out;
    color specular_intensity_color_out = color(0.0);
    NG_convert_float_color3(specular_remap_out, specular_intensity_color_out);
    color specular_out = specular_intensity_color_out * specular_color;
    color add_color4_out = add_color3_out + specular_out;
    color add_color5_out = add_color4_out + rim_out;
    color multiply_color3_out = base_color * add_color5_out;
    output_color3 = multiply_color3_out;
}

void mx_surface_unlit(float emission_weight, color emission_color, float transmission_weight, color transmission_color, float opacity, output surfaceshader result)
{
    float trans = clamp(transmission_weight, 0.0, 1.0);
    result.bsdf = trans * transmission_color * transparent();
    result.edf  = (1.0 - trans) * emission_weight * emission_color * emission();
    result.opacity = clamp(opacity, 0.0, 1.0);
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader surfacematerial
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "surfacematerial"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    color toon_shade1_base_color = color(0.400000, 0.400000, 0.400000)
    [[
        string label = "Base Color"
    ]],
    color toon_shade1_ambient_color = color(0.100000, 0.100000, 0.100000)
    [[
        string label = "Ambient Color"
    ]],
    color toon_shade1_specular_color = color(0.769337, 0.872861, 0.599692)
    [[
        string label = "Specular Color"
    ]],
    float toon_shade1_glossiness = 16.000000
    [[
        string label = "Glossiness",
        float min = 1.000000,
        float max = 256.000000,
        string widget = "number"
    ]],
    color toon_shade1_rim_color = color(0.500000, 0.500000, 0.500000)
    [[
        string label = "Rim Color"
    ]],
    vector toon_shade1_light_direction = vector(1.000000, -0.500000, -0.500000)
    [[
        string label = "Light Direction",
        vector min = vector(-1.000000, -1.000000, -1.000000),
        vector max = vector(1.000000, 1.000000, 1.000000)
    ]],
    color toon_shade1_light_color = color(0.968215, 0.968215, 0.968215)
    [[
        string label = "Light Color"
    ]],
    float surface_unlit_emission = 1.000000
    [[
        string help = "Surface emission amount.",
        string widget = "number"
    ]],
    float surface_unlit_transmission = 0.000000
    [[
        string help = "Surface transmission amount.",
        string widget = "number"
    ]],
    color surface_unlit_transmission_color = color(1.000000, 1.000000, 1.000000)
    [[
        string help = "Surface transmission color."
    ]],
    float surface_unlit_opacity = 1.000000
    [[
        string help = "Surface cutout opacity.",
        string widget = "number"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    color toon_shade1_output_color3 = color(0.0);
    NG_toon_sample(toon_shade1_base_color, toon_shade1_ambient_color, toon_shade1_specular_color, toon_shade1_glossiness, toon_shade1_rim_color, toon_shade1_light_direction, toon_shade1_light_color, toon_shade1_output_color3);
    surfaceshader surface_unlit_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface_unlit(surface_unlit_emission, toon_shade1_output_color3, surface_unlit_transmission, surface_unlit_transmission_color, surface_unlit_opacity, surface_unlit_out);
    MATERIAL surfacematerial_out = mx_surfacematerial(surface_unlit_out, backsurfaceshader, displacementshader1);
    out = surfacematerial_out;
}

