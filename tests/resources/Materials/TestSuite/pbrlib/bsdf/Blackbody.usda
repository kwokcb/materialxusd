#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: D:/Work/materialx/materialxusd/tests/resources/Materials/TestSuite/pbrlib\\bsdf\\blackbody.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "Blackbody" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/Blackbody/SR_blackbody.outputs:surface>

            def Shader "SR_blackbody" (
                prepend references = </MaterialX/Shaders/SR_blackbody>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/Blackbody.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/Blackbody/NG_blackbody.outputs:emission_color_output>
                float inputs:opacity.connect = </MaterialX/Materials/Blackbody.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/Blackbody.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/Blackbody.inputs:transmission_color>
            }

            def "NG_blackbody" (
                prepend references = </MaterialX/NodeGraphs/NG_blackbody>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "SR_blackbody"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "NG_blackbody"
        {
            float inputs:blackbody_temperature = 5000 (
                displayName = "Blackbody Temperature Kelvin"
            )
            color3f outputs:emission_color_output.connect = </MaterialX/NodeGraphs/NG_blackbody/blackbody_color_out.outputs:out>

            def Shader "blackbody_color_out"
            {
                uniform token info:id = "ND_blackbody"
                float inputs:temperature.connect = </MaterialX/NodeGraphs/NG_blackbody.inputs:blackbody_temperature>
                color3f outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/Blackbody>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

