#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: D:/Work/materialx/materialxusd/tests/resources/Materials/TestSuite/pbrlib\\bsdf\\mix_bsdf_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "NodeGraphs"
    {
        def NodeGraph "ND_substratebsdf"
        {
            color3f inputs:albedo = (0.8, 0.2, 0.1)
            color3f inputs:albedo.connect = </MaterialX/NodeGraphs/ND_substratebsdf/ND_substrateshader.inputs:albedo>
            color3f inputs:subsurface = (0.1, 0.1, 0.8)
            color3f inputs:subsurface.connect = </MaterialX/NodeGraphs/ND_substratebsdf/ND_substrateshader.inputs:subsurface>
            float inputs:subsurface_weight = 0
            float inputs:subsurface_weight.connect = </MaterialX/NodeGraphs/ND_substratebsdf/ND_substrateshader.inputs:subsurface_weight>
            token outputs:out (
                renderType = "BSDF"
            )
            token outputs:out.connect = </MaterialX/NodeGraphs/ND_substratebsdf/mix1.outputs:out>

            def Shader "diffuse"
            {
                uniform token info:id = "ND_oren_nayar_diffuse_bsdf"
                color3f inputs:color.connect = </MaterialX/NodeGraphs/ND_substratebsdf.inputs:albedo>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/ND_substratebsdf/normal.outputs:out>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "subsurface2"
            {
                uniform token info:id = "ND_translucent_bsdf"
                color3f inputs:color.connect = </MaterialX/NodeGraphs/ND_substratebsdf.inputs:subsurface>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/ND_substratebsdf/normal.outputs:out>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "mix1"
            {
                uniform token info:id = "ND_mix_bsdf"
                token inputs:bg (
                    renderType = "BSDF"
                )
                token inputs:bg.connect = </MaterialX/NodeGraphs/ND_substratebsdf/subsurface2.outputs:out>
                token inputs:fg (
                    renderType = "BSDF"
                )
                token inputs:fg.connect = </MaterialX/NodeGraphs/ND_substratebsdf/diffuse.outputs:out>
                float inputs:mix.connect = </MaterialX/NodeGraphs/ND_substratebsdf.inputs:subsurface_weight>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "object"
                float3 outputs:out
            }

            def "ND_substrateshader" (
                prepend references = </MaterialX/NodeGraphs/ND_substrateshader>
            )
            {
            }
        }

        def NodeGraph "ND_substrateshader"
        {
            color3f inputs:albedo = (0.8, 0.2, 0.1)
            color3f inputs:emission = (0, 0, 0)
            float inputs:opacity = 1
            color3f inputs:subsurface = (0.1, 0.1, 0.8)
            float inputs:subsurface_weight = 0
            token outputs:out

            def Shader "edf1"
            {
                uniform token info:id = "ND_uniform_edf"
                color3f inputs:color.connect = </MaterialX/NodeGraphs/ND_substrateshader.inputs:emission>
                token outputs:out (
                    renderType = "EDF"
                )
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

