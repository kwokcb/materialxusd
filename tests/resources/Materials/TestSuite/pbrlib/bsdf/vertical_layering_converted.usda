#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: D:/Work/materialx/materialxusd/tests/resources/Materials/TestSuite/pbrlib\\bsdf\\vertical_layering_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "NodeGraphs"
    {
        def NodeGraph "ND_mybsdf"
        {
            float inputs:diffuse = 0.8
            color3f inputs:diffuseColor = (0, 1, 0)
            float inputs:specular = 1
            color3f inputs:specularColor = (1, 1, 1)
            token outputs:out (
                renderType = "BSDF"
            )
            token outputs:out.connect = </MaterialX/NodeGraphs/ND_mybsdf/layer1.outputs:out>

            def Shader "diffuse_brdf1"
            {
                uniform token info:id = "ND_oren_nayar_diffuse_bsdf"
                color3f inputs:color.connect = </MaterialX/NodeGraphs/ND_mybsdf.inputs:diffuseColor>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/ND_mybsdf/normal.outputs:out>
                float inputs:weight.connect = </MaterialX/NodeGraphs/ND_mybsdf.inputs:diffuse>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "dielectric_brdf1"
            {
                uniform token info:id = "ND_dielectric_bsdf"
                float inputs:ior = 1.52
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/ND_mybsdf/normal.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/ND_mybsdf/tangent.outputs:out>
                color3f inputs:tint.connect = </MaterialX/NodeGraphs/ND_mybsdf.inputs:specularColor>
                float inputs:weight.connect = </MaterialX/NodeGraphs/ND_mybsdf.inputs:specular>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "layer1"
            {
                uniform token info:id = "ND_layer_bsdf"
                token inputs:base (
                    renderType = "BSDF"
                )
                token inputs:base.connect = </MaterialX/NodeGraphs/ND_mybsdf/diffuse_brdf1.outputs:out>
                token inputs:top (
                    renderType = "BSDF"
                )
                token inputs:top.connect = </MaterialX/NodeGraphs/ND_mybsdf/dielectric_brdf1.outputs:out>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "object"
                float3 outputs:out
            }

            def Shader "tangent"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "object"
                float3 outputs:out
            }
        }

        def NodeGraph "ND_custom_layer"
        {
            token inputs:base (
                renderType = "BSDF"
            )
            token inputs:top (
                renderType = "BSDF"
            )
            token outputs:out (
                renderType = "BSDF"
            )
            token outputs:out.connect = </MaterialX/NodeGraphs/ND_custom_layer/layer.outputs:out>

            def Shader "layer"
            {
                uniform token info:id = "ND_layer_bsdf"
                token inputs:base (
                    renderType = "BSDF"
                )
                token inputs:base.connect = </MaterialX/NodeGraphs/ND_custom_layer.inputs:base>
                token inputs:top (
                    renderType = "BSDF"
                )
                token inputs:top.connect = </MaterialX/NodeGraphs/ND_custom_layer.inputs:top>
                token outputs:out (
                    renderType = "BSDF"
                )
            }
        }

        def NodeGraph "ND_scaled_layer"
        {
            token inputs:base (
                renderType = "BSDF"
            )
            float inputs:scale_base = 1
            float inputs:scale_layer = 1
            float inputs:scale_top = 1
            token inputs:top (
                renderType = "BSDF"
            )
            token outputs:out (
                renderType = "BSDF"
            )
            token outputs:out.connect = </MaterialX/NodeGraphs/ND_scaled_layer/layer_scaled.outputs:out>

            def Shader "top_scaled"
            {
                uniform token info:id = "ND_multiply_bsdfF"
                token inputs:in1 (
                    renderType = "BSDF"
                )
                token inputs:in1.connect = </MaterialX/NodeGraphs/ND_scaled_layer.inputs:top>
                float inputs:in2.connect = </MaterialX/NodeGraphs/ND_scaled_layer.inputs:scale_top>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "base_scaled"
            {
                uniform token info:id = "ND_multiply_bsdfF"
                token inputs:in1 (
                    renderType = "BSDF"
                )
                token inputs:in1.connect = </MaterialX/NodeGraphs/ND_scaled_layer.inputs:base>
                float inputs:in2.connect = </MaterialX/NodeGraphs/ND_scaled_layer.inputs:scale_base>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "layer"
            {
                uniform token info:id = "ND_layer_bsdf"
                token inputs:base (
                    renderType = "BSDF"
                )
                token inputs:base.connect = </MaterialX/NodeGraphs/ND_scaled_layer/base_scaled.outputs:out>
                token inputs:top (
                    renderType = "BSDF"
                )
                token inputs:top.connect = </MaterialX/NodeGraphs/ND_scaled_layer/top_scaled.outputs:out>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "layer_scaled"
            {
                uniform token info:id = "ND_multiply_bsdfF"
                token inputs:in1 (
                    renderType = "BSDF"
                )
                token inputs:in1.connect = </MaterialX/NodeGraphs/ND_scaled_layer/layer.outputs:out>
                float inputs:in2.connect = </MaterialX/NodeGraphs/ND_scaled_layer.inputs:scale_layer>
                token outputs:out (
                    renderType = "BSDF"
                )
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

