#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: D:/Work/materialx/materialxusd/tests/resources/Materials/TestSuite/pbrlib\\edf\\edf_graph.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "NodeGraphs"
    {
        def NodeGraph "ND_myedf"
        {
            color3f inputs:color1 = (1, 0, 0)
            color3f inputs:color2 = (0, 1, 0)
            float inputs:intensity1 = 1
            float inputs:intensity2 = 1
            token outputs:out (
                renderType = "EDF"
            )
            token outputs:out.connect = </MaterialX/NodeGraphs/ND_myedf/mixer.outputs:out>

            def Shader "col1"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </MaterialX/NodeGraphs/ND_myedf.inputs:color1>
                float inputs:in2.connect = </MaterialX/NodeGraphs/ND_myedf.inputs:intensity1>
                color3f outputs:out
            }

            def Shader "edf1"
            {
                uniform token info:id = "ND_uniform_edf"
                color3f inputs:color.connect = </MaterialX/NodeGraphs/ND_myedf/col1.outputs:out>
                token outputs:out (
                    renderType = "EDF"
                )
            }

            def Shader "col2"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </MaterialX/NodeGraphs/ND_myedf.inputs:color2>
                float inputs:in2.connect = </MaterialX/NodeGraphs/ND_myedf.inputs:intensity2>
                color3f outputs:out
            }

            def Shader "edf2"
            {
                uniform token info:id = "ND_uniform_edf"
                color3f inputs:color.connect = </MaterialX/NodeGraphs/ND_myedf/col2.outputs:out>
                token outputs:out (
                    renderType = "EDF"
                )
            }

            def Shader "t1"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
            }

            def Shader "m1"
            {
                uniform token info:id = "ND_multiply_vector2FA"
                float2 inputs:in1.connect = </MaterialX/NodeGraphs/ND_myedf/t1.outputs:out>
                float inputs:in2 = 16
                float2 outputs:out
            }

            def Shader "noise1"
            {
                uniform token info:id = "ND_noise2d_float"
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/ND_myedf/m1.outputs:out>
                float outputs:out
            }

            def Shader "mixer"
            {
                uniform token info:id = "ND_mix_edf"
                token inputs:bg (
                    renderType = "EDF"
                )
                token inputs:bg.connect = </MaterialX/NodeGraphs/ND_myedf/edf2.outputs:out>
                token inputs:fg (
                    renderType = "EDF"
                )
                token inputs:fg.connect = </MaterialX/NodeGraphs/ND_myedf/edf1.outputs:out>
                float inputs:mix.connect = </MaterialX/NodeGraphs/ND_myedf/noise1.outputs:out>
                token outputs:out (
                    renderType = "EDF"
                )
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

