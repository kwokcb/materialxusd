#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: D:/Work/materialx/materialxusd/tests/resources/Materials/TestSuite/pbrlib\\multioutput\\multishaderoutput_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "NodeGraphs"
    {
        def NodeGraph "ND_multi"
        {
            color3f inputs:diffuse_color = (0.25, 0.5, 0.75)
            token outputs:burley_out
            token outputs:dielectric_out

            def Shader "burley_bsdf"
            {
                uniform token info:id = "ND_burley_diffuse_bsdf"
                color3f inputs:color.connect = </MaterialX/NodeGraphs/ND_multi.inputs:diffuse_color>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/ND_multi/normal.outputs:out>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "dielectric_bsdf"
            {
                uniform token info:id = "ND_dielectric_bsdf"
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/ND_multi/normal.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/ND_multi/tangent.outputs:out>
                color3f inputs:tint.connect = </MaterialX/NodeGraphs/ND_multi.inputs:diffuse_color>
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "object"
                float3 outputs:out
            }

            def Shader "tangent"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "object"
                float3 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

