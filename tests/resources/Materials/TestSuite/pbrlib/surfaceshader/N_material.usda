#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/TestSuite/pbrlib/surfaceshader\\usd_normal_map_converted.mtlx, D:\\work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "N_material" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:displacement
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic = 1
            float3 inputs:normal
            float inputs:occlusion
            float inputs:opacity
            int inputs:opacityMode
            float inputs:opacityThreshold
            float inputs:roughness = 0.001
            color3f inputs:specularColor
            int inputs:useSpecularWorkflow
            token outputs:mtlx:surface.connect = </MaterialX/Materials/N_material/N_surface.outputs:surface>

            def Shader "N_surface" (
                prepend references = </MaterialX/Shaders/N_surface>
            )
            {
                float inputs:clearcoat.connect = </MaterialX/Materials/N_material.inputs:clearcoat>
                float inputs:clearcoatRoughness.connect = </MaterialX/Materials/N_material.inputs:clearcoatRoughness>
                color3f inputs:diffuseColor.connect = </MaterialX/Materials/N_material.inputs:diffuseColor>
                float inputs:displacement.connect = </MaterialX/Materials/N_material.inputs:displacement>
                color3f inputs:emissiveColor.connect = </MaterialX/Materials/N_material.inputs:emissiveColor>
                float inputs:ior.connect = </MaterialX/Materials/N_material.inputs:ior>
                float inputs:metallic.connect = </MaterialX/Materials/N_material.inputs:metallic>
                float3 inputs:normal.connect = </MaterialX/Materials/N_material/root_graph.outputs:out>
                float inputs:occlusion.connect = </MaterialX/Materials/N_material.inputs:occlusion>
                float inputs:opacity.connect = </MaterialX/Materials/N_material.inputs:opacity>
                int inputs:opacityMode.connect = </MaterialX/Materials/N_material.inputs:opacityMode>
                float inputs:opacityThreshold.connect = </MaterialX/Materials/N_material.inputs:opacityThreshold>
                float inputs:roughness.connect = </MaterialX/Materials/N_material.inputs:roughness>
                color3f inputs:specularColor.connect = </MaterialX/Materials/N_material.inputs:specularColor>
                int inputs:useSpecularWorkflow.connect = </MaterialX/Materials/N_material.inputs:useSpecularWorkflow>
            }

            def "root_graph" (
                prepend references = </MaterialX/NodeGraphs/root_graph>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "N_surface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "root_graph"
        {
            float3 outputs:out.connect = </MaterialX/NodeGraphs/root_graph/N_normalmap.outputs:out>

            def Shader "N_texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
            }

            def Shader "N_multiply"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </MaterialX/NodeGraphs/root_graph/N_texcoord.outputs:out>
                float2 inputs:in2 = (8, 8)
                float2 outputs:out
            }

            def Shader "N_texture_normal"
            {
                uniform token info:id = "ND_UsdUVTexture_23"
                asset inputs:file = @resources/Images/mesh_wire_norm.png@ (
                    colorSpace = "none"
                )
                float2 inputs:st.connect = </MaterialX/NodeGraphs/root_graph/N_multiply.outputs:out>
                float outputs:a
                float outputs:b
                float outputs:g
                float outputs:r
                color3f outputs:rgb
            }

            def Shader "N_convert"
            {
                uniform token info:id = "ND_convert_color3_vector3"
                color3f inputs:in.connect = </MaterialX/NodeGraphs/root_graph/N_texture_normal.outputs:rgb>
                float3 outputs:out
            }

            def Shader "N_normalmap"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/root_graph/N_convert.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/root_graph/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/root_graph/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/N_material>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

