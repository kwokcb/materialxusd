#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: D:/Work/materialx/materialxusd/tests/resources/Materials/TestSuite/pbrlib\\surfaceshader\\network_surfaceshader_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "NodeGraphs"
    {
        def NodeGraph "ND_network_surface"
        {
            asset inputs:base_color_filename
            token outputs:out

            def Shader "base_color_image"
            {
                uniform token info:id = "ND_tiledimage_color3"
                asset inputs:file.connect = </MaterialX/NodeGraphs/ND_network_surface.inputs:base_color_filename>
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/ND_network_surface/texcoord.outputs:out>
                color3f outputs:out
            }

            def Shader "texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }
        }
    }

    def "Materials"
    {
        def Material "N_surfacematerial" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            asset inputs:base_color_filename = @resources/Images/grid.png@
            token outputs:mtlx:surface.connect = </MaterialX/Materials/N_surfacematerial/N_surfaceshader.outputs:surface>

            def Shader "N_surfaceshader" (
                prepend references = </MaterialX/Shaders/N_surfaceshader>
            )
            {
                asset inputs:base_color_filename.connect = </MaterialX/Materials/N_surfacematerial.inputs:base_color_filename>
            }
        }
    }

    def "Shaders"
    {
        def Shader "N_surfaceshader"
        {
            uniform token info:id = "ND_network_surface"
            token outputs:surface
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/N_surfacematerial>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

