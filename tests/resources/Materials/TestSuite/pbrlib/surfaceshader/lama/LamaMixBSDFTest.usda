#usda 1.0
(
    customLayerData = {
        string colorSpace = "acescg"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/TestSuite/pbrlib/surfaceshader\\lama\\lama_mix_converted.mtlx, D:\\work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "LamaMixBSDFTest" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            token inputs:bsdf (
                renderType = "BSDF"
            )
            token inputs:edf (
                renderType = "EDF"
            )
            float inputs:opacity
            bool inputs:thin_walled
            token outputs:mtlx:surface.connect = </MaterialX/Materials/LamaMixBSDFTest/LamaMixBSDFSurface.outputs:surface>

            def Shader "LamaMixBSDFSurface" (
                prepend references = </MaterialX/Shaders/LamaMixBSDFSurface>
            )
            {
                token inputs:bsdf (
                    renderType = "BSDF"
                )
                token inputs:bsdf.connect = </MaterialX/Materials/LamaMixBSDFTest/top_level_nodes.outputs:out>
                token inputs:edf (
                    renderType = "EDF"
                )
                token inputs:edf.connect = </MaterialX/Materials/LamaMixBSDFTest.inputs:edf>
                float inputs:opacity.connect = </MaterialX/Materials/LamaMixBSDFTest.inputs:opacity>
                bool inputs:thin_walled.connect = </MaterialX/Materials/LamaMixBSDFTest.inputs:thin_walled>
            }

            def "top_level_nodes" (
                prepend references = </MaterialX/NodeGraphs/top_level_nodes>
            )
            {
            }
        }

        def Material "LamaMixEDFTest" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            token inputs:bsdf (
                renderType = "BSDF"
            )
            token inputs:edf (
                renderType = "EDF"
            )
            float inputs:opacity
            bool inputs:thin_walled
            token outputs:mtlx:surface.connect = </MaterialX/Materials/LamaMixEDFTest/LamaMixEDFSurface.outputs:surface>

            def Shader "LamaMixEDFSurface" (
                prepend references = </MaterialX/Shaders/LamaMixEDFSurface>
            )
            {
                token inputs:bsdf (
                    renderType = "BSDF"
                )
                token inputs:bsdf.connect = </MaterialX/Materials/LamaMixEDFTest.inputs:bsdf>
                token inputs:edf (
                    renderType = "EDF"
                )
                token inputs:edf.connect = </MaterialX/Materials/LamaMixEDFTest/top_level_nodes.outputs:out2>
                float inputs:opacity.connect = </MaterialX/Materials/LamaMixEDFTest.inputs:opacity>
                bool inputs:thin_walled.connect = </MaterialX/Materials/LamaMixEDFTest.inputs:thin_walled>
            }

            def "top_level_nodes" (
                prepend references = </MaterialX/NodeGraphs/top_level_nodes>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "LamaMixBSDFSurface"
        {
            uniform token info:id = "ND_surface"
            token outputs:surface
        }

        def Shader "LamaMixEDFSurface"
        {
            uniform token info:id = "ND_surface"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "top_level_nodes"
        {
            token outputs:out (
                renderType = "BSDF"
            )
            token outputs:out.connect = </MaterialX/NodeGraphs/top_level_nodes/LamaMixBSDF.outputs:out>
            token outputs:out2 (
                renderType = "EDF"
            )
            token outputs:out2.connect = </MaterialX/NodeGraphs/top_level_nodes/LamaMixEDF.outputs:out>

            def Shader "LamaConductor"
            {
                uniform token info:id = "ND_lama_conductor"
                float inputs:anisotropy = 0
                float inputs:anisotropyRotation = 0
                color3f inputs:edgeColor = (0.9979, 0.9813, 0.7523)
                float3 inputs:extinction = (3.42, 2.35, 1.77)
                int inputs:fresnelMode = 0
                float3 inputs:IOR = (0.18, 0.42, 1.37)
                color3f inputs:reflectivity = (0.945, 0.7772, 0.3737)
                float inputs:roughness = 0.1
                color3f inputs:tint = (1, 1, 1)
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "LamaDielectric"
            {
                uniform token info:id = "ND_lama_dielectric"
                color3f inputs:absorptionColor = (1, 1, 1)
                float inputs:absorptionRadius = 1
                float inputs:anisotropy = 0
                int inputs:fresnelMode = 0
                float inputs:IOR = 1.5
                color3f inputs:reflectionTint = (1, 1, 1)
                float inputs:reflectivity = 0.04
                float inputs:rotation = 0
                float inputs:roughness = 0.1
                float inputs:scatterAnisotropy = 0
                color3f inputs:scatterColor = (0, 0, 0)
                color3f inputs:transmissionTint = (1, 1, 1)
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "LamaEmission1"
            {
                uniform token info:id = "ND_lama_emission"
                color3f inputs:color = (1, 1, 0)
                token outputs:out (
                    renderType = "EDF"
                )
            }

            def Shader "LamaEmission2"
            {
                uniform token info:id = "ND_lama_emission"
                color3f inputs:color = (1, 0, 1)
                token outputs:out (
                    renderType = "EDF"
                )
            }

            def Shader "LamaMixBSDF"
            {
                uniform token info:id = "ND_lama_mix_bsdf"
                token inputs:material1 (
                    renderType = "BSDF"
                )
                token inputs:material1.connect = </MaterialX/NodeGraphs/top_level_nodes/LamaConductor.outputs:out>
                token inputs:material2 (
                    renderType = "BSDF"
                )
                token inputs:material2.connect = </MaterialX/NodeGraphs/top_level_nodes/LamaDielectric.outputs:out>
                float inputs:mix = 0.5
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "LamaMixEDF"
            {
                uniform token info:id = "ND_lama_mix_edf"
                token inputs:material1 (
                    renderType = "EDF"
                )
                token inputs:material1.connect = </MaterialX/NodeGraphs/top_level_nodes/LamaEmission1.outputs:out>
                token inputs:material2 (
                    renderType = "EDF"
                )
                token inputs:material2.connect = </MaterialX/NodeGraphs/top_level_nodes/LamaEmission2.outputs:out>
                float inputs:mix = 0.5
                token outputs:out (
                    renderType = "EDF"
                )
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/LamaMixBSDFTest>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

