#usda 1.0
(
    customLayerData = {
        string colorSpace = "acescg"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/TestSuite/pbrlib/surfaceshader\\lama\\lama_sss_converted.mtlx, D:\\work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "LamaSSSTest" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            token inputs:bsdf (
                renderType = "BSDF"
            )
            token inputs:edf (
                renderType = "EDF"
            )
            float inputs:opacity
            bool inputs:thin_walled
            token outputs:mtlx:surface.connect = </MaterialX/Materials/LamaSSSTest/LamaSSSSurface.outputs:surface>

            def Shader "LamaSSSSurface" (
                prepend references = </MaterialX/Shaders/LamaSSSSurface>
            )
            {
                token inputs:bsdf (
                    renderType = "BSDF"
                )
                token inputs:bsdf.connect = </MaterialX/Materials/LamaSSSTest/root_graph.outputs:out>
                token inputs:edf (
                    renderType = "EDF"
                )
                token inputs:edf.connect = </MaterialX/Materials/LamaSSSTest.inputs:edf>
                float inputs:opacity.connect = </MaterialX/Materials/LamaSSSTest.inputs:opacity>
                bool inputs:thin_walled.connect = </MaterialX/Materials/LamaSSSTest.inputs:thin_walled>
            }

            def "root_graph" (
                prepend references = </MaterialX/NodeGraphs/root_graph>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "LamaSSSSurface"
        {
            uniform token info:id = "ND_surface"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "root_graph"
        {
            token outputs:out (
                renderType = "BSDF"
            )
            token outputs:out.connect = </MaterialX/NodeGraphs/root_graph/LamaSSS.outputs:out>

            def Shader "LamaSSS"
            {
                uniform token info:id = "ND_lama_sss"
                int inputs:albedoInversionMethod = 0
                color3f inputs:color = (0.18, 0.18, 0.18)
                int inputs:mode = 0
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/root_graph/Nworld.outputs:out>
                int inputs:sssContinuationRays = 0
                float inputs:sssIOR = 1
                int inputs:sssMode = 0
                color3f inputs:sssRadius = (0, 0, 0)
                float inputs:sssScale = 1
                float inputs:sssUnitLength = 0.00328
                token outputs:out (
                    renderType = "BSDF"
                )
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/LamaSSSTest>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

