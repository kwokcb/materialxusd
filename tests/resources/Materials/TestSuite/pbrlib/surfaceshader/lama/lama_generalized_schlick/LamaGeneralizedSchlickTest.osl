#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void NG_separate3_color3(color in, output float outr, output float outg, output float outb)
{
    int N_extract_0_index_tmp = 0;
    float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
    int N_extract_1_index_tmp = 1;
    float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
    int N_extract_2_index_tmp = 2;
    float N_extract_2_out = mx_extract(in, N_extract_2_index_tmp);
    outr = N_extract_0_out;
    outg = N_extract_1_out;
    outb = N_extract_2_out;
}

void NG_convert_color3_vector3(color in, output vector out)
{
    float separate_outr = 0.0;
    float separate_outg = 0.0;
    float separate_outb = 0.0;
    NG_separate3_color3(in, separate_outr, separate_outg, separate_outb);
    vector combine_out = vector( separate_outr,separate_outg,separate_outb );
    out = combine_out;
}

void NG_separate3_vector3(vector in, output float outx, output float outy, output float outz)
{
    int N_extract_0_index_tmp = 0;
    float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
    int N_extract_1_index_tmp = 1;
    float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
    int N_extract_2_index_tmp = 2;
    float N_extract_2_out = mx_extract(in, N_extract_2_index_tmp);
    outx = N_extract_0_out;
    outy = N_extract_1_out;
    outz = N_extract_2_out;
}

void NG_convert_vector3_color3(vector in, output color out)
{
    float separate_outx = 0.0;
    float separate_outy = 0.0;
    float separate_outz = 0.0;
    NG_separate3_vector3(in, separate_outx, separate_outy, separate_outz);
    color combine_out = color( separate_outx,separate_outy,separate_outz );
    out = combine_out;
}

void NG_acescg_to_lin_rec709_color3(color in, output color out)
{
    vector asVec_out = vector(0.0);
    NG_convert_color3_vector3(in, asVec_out);
    matrix transform_mat_tmp = matrix(1.705051,  -0.130256,  -0.024003, 0.000,  -0.621792,  1.140805,  -0.128969, 0.000,  -0.083259,  -0.010548,  1.152972, 0.000, 0.000, 0.000, 0.000, 1.000);
    vector transform_out = transform(transform_mat_tmp, asVec_out);
    color asColor_out = color(0.0);
    NG_convert_vector3_color3(transform_out, asColor_out);
    out = asColor_out;
}

matrix rotationMatrix(vector axis, float angle)
{
    vector nAxis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return matrix(oc * nAxis[0] * nAxis[0] + c,             oc * nAxis[0] * nAxis[1] - nAxis[2] * s,  oc * nAxis[2] * nAxis[0] + nAxis[1] * s,  0.0,
                  oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
                  oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
                  0.0,                                      0.0,                                      0.0,                                      1.0);
}

void mx_rotate_vector3(vector _in, float amount, vector axis, output vector result)
{
    float rotationRadians = radians(amount);
    matrix m = rotationMatrix(axis, rotationRadians);
    vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
    result = vector(trans.x, trans.y, trans.z);
}

void mx_anisotropic_vdf(color absorption, color scattering, float anisotropy, output VDF vdf)
{
    // Convert from absorption and scattering coefficients to
    // extinction coefficient and single-scattering albedo.
    color extinction = absorption + scattering;
    color albedo = scattering / extinction;
    vdf = anisotropic_vdf(albedo, extinction, anisotropy);
}

void NG_switch_color3I(color in1, color in2, color in3, color in4, color in5, color in6, color in7, color in8, color in9, color in10, int which, output color out)
{
    int ifgreater_10_value1_tmp = 10;
    color ifgreater_10_in2_tmp = color(0.000000, 0.000000, 0.000000);
    color ifgreater_10_out = mx_ternary(ifgreater_10_value1_tmp > which, in10, ifgreater_10_in2_tmp);
    int ifgreater_9_value1_tmp = 9;
    color ifgreater_9_out = mx_ternary(ifgreater_9_value1_tmp > which, in9, ifgreater_10_out);
    int ifgreater_8_value1_tmp = 8;
    color ifgreater_8_out = mx_ternary(ifgreater_8_value1_tmp > which, in8, ifgreater_9_out);
    int ifgreater_7_value1_tmp = 7;
    color ifgreater_7_out = mx_ternary(ifgreater_7_value1_tmp > which, in7, ifgreater_8_out);
    int ifgreater_6_value1_tmp = 6;
    color ifgreater_6_out = mx_ternary(ifgreater_6_value1_tmp > which, in6, ifgreater_7_out);
    int ifgreater_5_value1_tmp = 5;
    color ifgreater_5_out = mx_ternary(ifgreater_5_value1_tmp > which, in5, ifgreater_6_out);
    int ifgreater_4_value1_tmp = 4;
    color ifgreater_4_out = mx_ternary(ifgreater_4_value1_tmp > which, in4, ifgreater_5_out);
    int ifgreater_3_value1_tmp = 3;
    color ifgreater_3_out = mx_ternary(ifgreater_3_value1_tmp > which, in3, ifgreater_4_out);
    int ifgreater_2_value1_tmp = 2;
    color ifgreater_2_out = mx_ternary(ifgreater_2_value1_tmp > which, in2, ifgreater_3_out);
    int ifgreater_1_value1_tmp = 1;
    color ifgreater_1_out = mx_ternary(ifgreater_1_value1_tmp > which, in1, ifgreater_2_out);
    out = ifgreater_1_out;
}

void mx_generalized_schlick_bsdf(float weight, color color0, color color82, color color90, float exponent, vector2 roughness, float thinfilm_thickness, float thinfilm_ior, normal N, vector U, string distribution, string scatter_mode, output BSDF bsdf)
{
    color reflection_tint = (scatter_mode == "T") ? color(0.0) : color(1.0);
    color transmission_tint = (scatter_mode == "R") ? color(0.0) : color(1.0);
    bsdf = weight * generalized_schlick_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, color0, color90, exponent, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
}

void IMPL_lama_generalized_schlick(color reflectionTint, color transmissionTint, int fresnelMode, vector IOR, color reflectivity, color reflectivity90, float reflectivityProfile, float roughness, vector normal1, float anisotropy, vector anisotropyDirection, float anisotropyRotation, color absorptionColor, float absorptionRadius, color scatterColor, float scatterAnisotropy, output BSDF out)
{
    closure color null_closure = 0;
    color convert_ior_out = color(0.0);
    NG_convert_vector3_color3(IOR, convert_ior_out);
    float exponent_in1_tmp = 1.000000;
    float exponent_out = exponent_in1_tmp / reflectivityProfile;
    float anisotropy_switch_value2_tmp = 0.000000;
    float anisotropy_switch_out = mx_ternary(anisotropy > anisotropy_switch_value2_tmp, anisotropy, roughness);
    float tangent_rotate_degree_in2_tmp = -360.000000;
    float tangent_rotate_degree_out = anisotropyRotation * tangent_rotate_degree_in2_tmp;
    color absorption_out = absorptionColor / absorptionRadius;
    vector scatter_vector_out = vector(0.0);
    NG_convert_color3_vector3(scatterColor, scatter_vector_out);
    float ior_sub_one_in2_tmp = 1.000000;
    color ior_sub_one_out = convert_ior_out - ior_sub_one_in2_tmp;
    float ior_plus_one_in2_tmp = 1.000000;
    color ior_plus_one_out = convert_ior_out + ior_plus_one_in2_tmp;
    vector2 roughness_linear_out = { roughness,anisotropy_switch_out };
    vector tangent_rotate_out = vector(0.0);
    mx_rotate_vector3(anisotropyDirection, tangent_rotate_degree_out, normal1, tangent_rotate_out);
    vector absorption_vector_out = vector(0.0);
    NG_convert_color3_vector3(absorption_out, absorption_vector_out);
    color ior_divide_out = ior_sub_one_out / ior_plus_one_out;
    float roughness_anisotropic_squared_in2_tmp = 2.000000;
    vector2 roughness_anisotropic_squared_out = pow(roughness_linear_out, roughness_anisotropic_squared_in2_tmp);
    vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
    color ior_multiply_out = ior_divide_out * ior_divide_out;
    float roughness_anisotropic_squared_clamped_in2_tmp = 0.000001;
    vector2 roughness_anisotropic_squared_clamped_out = max(roughness_anisotropic_squared_out, roughness_anisotropic_squared_clamped_in2_tmp);
    color fresnel_mode_switch_out = color(0.0);
    NG_switch_color3I(reflectivity, ior_multiply_out, color(0.000000, 0.000000, 0.000000), color(0.000000, 0.000000, 0.000000), color(0.000000, 0.000000, 0.000000), color(0.000000, 0.000000, 0.000000), color(0.000000, 0.000000, 0.000000), color(0.000000, 0.000000, 0.000000), color(0.000000, 0.000000, 0.000000), color(0.000000, 0.000000, 0.000000), fresnelMode, fresnel_mode_switch_out);
    BSDF reflection_generalized_schlick_bsdf_out = null_closure;
    mx_generalized_schlick_bsdf(1.000000, fresnel_mode_switch_out, color(1.000000, 1.000000, 1.000000), reflectivity90, exponent_out, roughness_anisotropic_squared_clamped_out, 0.000000, 1.500000, normal1, tangent_rotate_normalize_out, "ggx", "R", reflection_generalized_schlick_bsdf_out);
    BSDF reflection_layer_out = (reflectionTint * reflection_generalized_schlick_bsdf_out);
    BSDF transmission_bsdf_out = null_closure;
    mx_generalized_schlick_bsdf(1.000000, fresnel_mode_switch_out, color(1.000000, 1.000000, 1.000000), reflectivity90, exponent_out, roughness_anisotropic_squared_clamped_out, 0.000000, 1.500000, normal1, tangent_rotate_normalize_out, "ggx", "T", transmission_bsdf_out);
    VDF interior_vdf_out = null_closure;
    mx_anisotropic_vdf(absorption_vector_out, scatter_vector_out, scatterAnisotropy, interior_vdf_out);
    BSDF transmission_interior_out = layer(transmission_bsdf_out, interior_vdf_out);
    BSDF transmission_layer_out = (transmissionTint * transmission_interior_out);
    BSDF generalized_schlick_bsdf_out = layer(reflection_layer_out, transmission_layer_out);
    out = generalized_schlick_bsdf_out;
}

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader LamaGeneralizedSchlickTest
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "LamaGeneralizedSchlickTest"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    string geomprop_Nworld_space = "world",
    string geomprop_Tworld_space = "world",
    int geomprop_Tworld_index = 0
    [[
        string widget = "number"
    ]],
    color LamaGeneralizedSchlick_absorptionColor_cm_in = color(1.000000, 1.000000, 1.000000),
    color LamaGeneralizedSchlick_reflectionTint_cm_in = color(1.000000, 1.000000, 1.000000),
    color LamaGeneralizedSchlick_scatterColor_cm_in = color(0.000000, 0.000000, 0.000000),
    color LamaGeneralizedSchlick_transmissionTint_cm_in = color(1.000000, 1.000000, 1.000000),
    color LamaGeneralizedSchlick_reflectivity_cm_in = color(0.040000, 0.040000, 0.040000),
    color LamaGeneralizedSchlick_reflectivity90_cm_in = color(1.000000, 1.000000, 1.000000),
    int LamaGeneralizedSchlick_fresnelMode = 0
    [[
        string label = "Fresnel Mode",
        string page = "Main",
        string help = "Switches the Fresnel between Artistic and Scientific parameters. The Artistic mode offers reflectivity in the normal direction and reflectivity90 at the grazing angle. The Scientific mode provides an index of refraction for each rgb component. Note that IOR is only used to calculate the reflectivity value used by the Schlick approximation. When reflectivity90 is 1, then both modes achieve identical results, as one can be mapped to the other.",
        string widget = "number"
    ]],
    vector LamaGeneralizedSchlick_IOR = vector(1.500000, 1.500000, 1.500000)
    [[
        string label = "IOR",
        string page = "Main",
        string help = "Index of refraction (often denoted by eta), defining the amount reflected by the surface in the normal direction, and how the rays are bent by refraction. A separate value can be specified for each color channel, if desired."
    ]],
    float LamaGeneralizedSchlick_reflectivityProfile = 0.200000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "ReflectivityProfile",
        string page = "Main",
        string help = "The inverse of the exponent to use for Schlick.",
        string widget = "number"
    ]],
    float LamaGeneralizedSchlick_roughness = 0.100000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Roughness",
        string page = "Main",
        string help = "Micro-facet distribution roughness.",
        string widget = "number"
    ]],
    float LamaGeneralizedSchlick_anisotropy = -1.000000
    [[
        float min = -1.000000,
        float max = 1.000000,
        string label = "Anisotropy",
        string page = "Anisotropy",
        string help = "Defines the roughness in the co-tangent direction, giving anisotropic reflection if the value differs from the roughness parameter value. A negative value (the default) means use the original roughness value, i.e. no anisotropy. ",
        string widget = "number"
    ]],
    float LamaGeneralizedSchlick_anisotropyRotation = 0.000000
    [[
        float slidermin = 0.000000,
        float slidermax = 1.000000,
        string label = "Rotation",
        string page = "Anisotropy",
        string help = "Rotates the anisotropy direction (possibly overridden by the previous attribute) around the normal, from 0 to 360 degrees.",
        string widget = "number"
    ]],
    float LamaGeneralizedSchlick_absorptionRadius = 1.000000
    [[
        float min = 0.000000,
        string label = "Absorption Radius",
        string page = "Interior",
        string help = "Distance, in world space units, at which the Absorption Color is assumed to be reached. Can be used to control the rate of absorption.",
        string widget = "number"
    ]],
    float LamaGeneralizedSchlick_scatterAnisotropy = 0.000000
    [[
        float min = -1.000000,
        float max = 1.000000,
        string label = "Scatter Anisotropy",
        string page = "Interior",
        string help = "Anisotropy of the medium's phase function, ranging from full backward scattering at -1 to forward scattering at 1. Only takes effect if the Scatter Color is non-null.",
        string widget = "number"
    ]],
    float LamaGeneralizedSchlickSurface_opacity = 1.000000
    [[
        string help = "Surface cutout opacity",
        string widget = "number"
    ]],
    int LamaGeneralizedSchlickSurface_thin_walled = 0
    [[
        string help = "Option to make the surface thin-walled.",
        string widget = "checkBox"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
    vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
    color LamaGeneralizedSchlick_absorptionColor_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaGeneralizedSchlick_absorptionColor_cm_in, LamaGeneralizedSchlick_absorptionColor_cm_out);
    color LamaGeneralizedSchlick_reflectionTint_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaGeneralizedSchlick_reflectionTint_cm_in, LamaGeneralizedSchlick_reflectionTint_cm_out);
    color LamaGeneralizedSchlick_scatterColor_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaGeneralizedSchlick_scatterColor_cm_in, LamaGeneralizedSchlick_scatterColor_cm_out);
    color LamaGeneralizedSchlick_transmissionTint_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaGeneralizedSchlick_transmissionTint_cm_in, LamaGeneralizedSchlick_transmissionTint_cm_out);
    color LamaGeneralizedSchlick_reflectivity_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaGeneralizedSchlick_reflectivity_cm_in, LamaGeneralizedSchlick_reflectivity_cm_out);
    color LamaGeneralizedSchlick_reflectivity90_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaGeneralizedSchlick_reflectivity90_cm_in, LamaGeneralizedSchlick_reflectivity90_cm_out);
    BSDF LamaGeneralizedSchlick_out = null_closure;
    IMPL_lama_generalized_schlick(LamaGeneralizedSchlick_reflectionTint_cm_out, LamaGeneralizedSchlick_transmissionTint_cm_out, LamaGeneralizedSchlick_fresnelMode, LamaGeneralizedSchlick_IOR, LamaGeneralizedSchlick_reflectivity_cm_out, LamaGeneralizedSchlick_reflectivity90_cm_out, LamaGeneralizedSchlick_reflectivityProfile, LamaGeneralizedSchlick_roughness, geomprop_Nworld_out1, LamaGeneralizedSchlick_anisotropy, geomprop_Tworld_out1, LamaGeneralizedSchlick_anisotropyRotation, LamaGeneralizedSchlick_absorptionColor_cm_out, LamaGeneralizedSchlick_absorptionRadius, LamaGeneralizedSchlick_scatterColor_cm_out, LamaGeneralizedSchlick_scatterAnisotropy, LamaGeneralizedSchlick_out);
    surfaceshader LamaGeneralizedSchlickSurface_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(LamaGeneralizedSchlick_out, null_closure, LamaGeneralizedSchlickSurface_opacity, LamaGeneralizedSchlickSurface_thin_walled, LamaGeneralizedSchlickSurface_out);
    MATERIAL LamaGeneralizedSchlickTest_out = mx_surfacematerial(LamaGeneralizedSchlickSurface_out, backsurfaceshader, displacementshader1);
    out = LamaGeneralizedSchlickTest_out;
}

