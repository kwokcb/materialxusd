#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

matrix rotationMatrix(vector axis, float angle)
{
    vector nAxis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return matrix(oc * nAxis[0] * nAxis[0] + c,             oc * nAxis[0] * nAxis[1] - nAxis[2] * s,  oc * nAxis[2] * nAxis[0] + nAxis[1] * s,  0.0,
                  oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
                  oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
                  0.0,                                      0.0,                                      0.0,                                      1.0);
}

void mx_rotate_vector3(vector _in, float amount, vector axis, output vector result)
{
    float rotationRadians = radians(amount);
    matrix m = rotationMatrix(axis, rotationRadians);
    vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
    result = vector(trans.x, trans.y, trans.z);
}

void mx_dielectric_bsdf(float weight, color tint, float ior, vector2 roughness, float thinfilm_thickness, float thinfilm_ior, normal N, vector U, string distribution, string scatter_mode, output BSDF bsdf)
{
    color reflection_tint = (scatter_mode == "T") ? color(0.0) : tint;
    color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
    bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
}

void IMPL_lama_iridescence(float roughness, float anisotropy, vector anisotropyDirection, float anisotropyRotation, float relativeFilmThickness, float minFilmThickness, float maxFilmThickness, float filmIOR, output BSDF out)
{
    closure color null_closure = 0;
    string geomprop_Nworld_space_tmp = "world";
    vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space_tmp, N);
    float roughness_inverse_in1_tmp = 1.000000;
    float roughness_inverse_out = roughness_inverse_in1_tmp - roughness;
    float thinfilm_thickness_out = mix(minFilmThickness, maxFilmThickness, relativeFilmThickness);
    float tangent_rotate_degree_in2_tmp = -360.000000;
    float tangent_rotate_degree_out = anisotropyRotation * tangent_rotate_degree_in2_tmp;
    string tangent_normal_space_tmp = "world";
    vector tangent_normal_out = transform(tangent_normal_space_tmp, N);
    float delta_value2_tmp = 0.000000;
    float delta_out = mx_ternary(anisotropy >= delta_value2_tmp, roughness_inverse_out, roughness);
    float tangent_rotate_degree_offset_in2_tmp = 0.000000;
    float tangent_rotate_degree_offset_out = tangent_rotate_degree_out - tangent_rotate_degree_offset_in2_tmp;
    float roughness_additional_out = anisotropy * delta_out;
    vector tangent_rotate_out = vector(0.0);
    mx_rotate_vector3(anisotropyDirection, tangent_rotate_degree_offset_out, tangent_normal_out, tangent_rotate_out);
    float roughness_bitangent_out = roughness + roughness_additional_out;
    vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
    float roughness_bitangent_clamped_low_tmp = 0.000000;
    float roughness_bitangent_clamped_high_tmp = 1.000000;
    float roughness_bitangent_clamped_out = clamp(roughness_bitangent_out, roughness_bitangent_clamped_low_tmp, roughness_bitangent_clamped_high_tmp);
    vector2 roughness_linear_out = { roughness,roughness_bitangent_clamped_out };
    float roughness_anisotropic_squared_in2_tmp = 2.000000;
    vector2 roughness_anisotropic_squared_out = pow(roughness_linear_out, roughness_anisotropic_squared_in2_tmp);
    float roughness_anisotropic_squared_clamped_in2_tmp = 0.000001;
    vector2 roughness_anisotropic_squared_clamped_out = max(roughness_anisotropic_squared_out, roughness_anisotropic_squared_clamped_in2_tmp);
    BSDF iridescence_bsdf_out = null_closure;
    mx_dielectric_bsdf(1.000000, color(1.000000, 1.000000, 1.000000), 1.000000, roughness_anisotropic_squared_clamped_out, thinfilm_thickness_out, filmIOR, geomprop_Nworld_out1, tangent_rotate_normalize_out, "ggx", "RT", iridescence_bsdf_out);
    out = iridescence_bsdf_out;
}

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader LamaIridescenceTest
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "LamaIridescenceTest"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    string geomprop_Tworld_space = "world",
    int geomprop_Tworld_index = 0
    [[
        string widget = "number"
    ]],
    float LamaIridescence_roughness = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Roughness",
        string page = "Main",
        string help = "Micro-facet distribution roughness.",
        string widget = "number"
    ]],
    float LamaIridescence_anisotropy = 0.000000
    [[
        float min = -1.000000,
        float max = 1.000000,
        string label = "Anisotropy",
        string page = "Anisotropy",
        string help = "Defines the amount of anisotropy, changing the co-tangent axis roughness from the original value to 1 (or to 0 with a negative value).",
        string widget = "number"
    ]],
    float LamaIridescence_anisotropyRotation = 0.000000
    [[
        float slidermin = 0.000000,
        float slidermax = 1.000000,
        string label = "Rotation",
        string page = "Anisotropy",
        string help = "Rotates the anisotropy direction (possibly overridden by the previous attribute) around the normal, from 0 to 360 degrees.",
        string widget = "number"
    ]],
    float LamaIridescence_relativeFilmThickness = 0.500000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Relative Thickness",
        string page = "Main",
        string help = "Relative thin film thickness in the range from 0 to 1 will be scaled to the minimum and maximum thickness, respectively.",
        string widget = "number"
    ]],
    float LamaIridescence_minFilmThickness = 400.000000
    [[
        float min = 0.000000,
        float slidermin = 0.000000,
        float slidermax = 1000.000000,
        string label = "Min. Thickness",
        string page = "Main",
        string help = "Minimum thin film thickness in nanometers, driving the iridescent effect.",
        string widget = "number"
    ]],
    float LamaIridescence_maxFilmThickness = 800.000000
    [[
        float min = 0.000000,
        float slidermin = 0.000000,
        float slidermax = 1000.000000,
        string label = "Max. Thickness",
        string page = "Main",
        string help = "Maximum thin film thickness in nanometers, driving the iridescent effect.",
        string widget = "number"
    ]],
    float LamaIridescence_filmIOR = 1.300000
    [[
        float min = 0.000000,
        float slidermin = 1.000000,
        float slidermax = 3.000000,
        string label = "IOR",
        string page = "Main",
        string help = "Thin film index of refraction, driving the iridescent effect.",
        string widget = "number"
    ]],
    float LamaIridescenceSurface_opacity = 1.000000
    [[
        string help = "Surface cutout opacity",
        string widget = "number"
    ]],
    int LamaIridescenceSurface_thin_walled = 0
    [[
        string help = "Option to make the surface thin-walled.",
        string widget = "checkBox"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
    BSDF LamaIridescence_out = null_closure;
    IMPL_lama_iridescence(LamaIridescence_roughness, LamaIridescence_anisotropy, geomprop_Tworld_out1, LamaIridescence_anisotropyRotation, LamaIridescence_relativeFilmThickness, LamaIridescence_minFilmThickness, LamaIridescence_maxFilmThickness, LamaIridescence_filmIOR, LamaIridescence_out);
    surfaceshader LamaIridescenceSurface_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(LamaIridescence_out, null_closure, LamaIridescenceSurface_opacity, LamaIridescenceSurface_thin_walled, LamaIridescenceSurface_out);
    MATERIAL LamaIridescenceTest_out = mx_surfacematerial(LamaIridescenceSurface_out, backsurfaceshader, displacementshader1);
    out = LamaIridescenceTest_out;
}

