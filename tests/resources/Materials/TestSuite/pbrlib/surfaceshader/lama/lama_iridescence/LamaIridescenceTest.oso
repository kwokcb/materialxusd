OpenShadingLanguage 1.00
# Compiled by oslc 1.13.3.0dev
# options: -q -ID:\Work\materialx\OSL_ILM\bin\shaders -o D:\Work\materialx\bernard_MaterialX_3\build\bin\resources\Materials\TestSuite\pbrlib\surfaceshader\lama\lama_iridescence\LamaIridescenceTest.oso
shader LamaIridescenceTest	%meta{string,mtlx_category,"surfacematerial"} %meta{string,mtlx_name,"LamaIridescenceTest"} 
param	struct surfaceshader	backsurfaceshader			%read{2147483647,-1} %write{2147483647,-1} %struct{"surfaceshader"} %structfields{bsdf,edf,opacity} %structfieldtypes{"CCf"} %structnfields{3}
param	closure color	backsurfaceshader.bsdf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{0}
param	closure color	backsurfaceshader.edf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{1}
param	float	backsurfaceshader.opacity	1		%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{2}
param	vector	displacementshader1	0 0 0		%read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Tworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Tworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	LamaIridescence_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Roughness"} %meta{string,page,"Main"} %meta{string,help,"Micro-facet distribution roughness."} %meta{string,widget,"number"}  %read{13,156} %write{2147483647,-1}
param	float	LamaIridescence_anisotropy	0		%meta{float,min,-1} %meta{float,max,1} %meta{string,label,"Anisotropy"} %meta{string,page,"Anisotropy"} %meta{string,help,"Defines the amount of anisotropy, changing the co-tangent axis roughness from the original value to 1 (or to 0 with a negative value)."} %meta{string,widget,"number"}  %read{21,30} %write{2147483647,-1}
param	float	LamaIridescence_anisotropyRotation	0		%meta{float,slidermin,0} %meta{float,slidermax,1} %meta{string,label,"Rotation"} %meta{string,page,"Anisotropy"} %meta{string,help,"Rotates the anisotropy direction (possibly overridden by the previous attribute) around the normal, from 0 to 360 degrees."} %meta{string,widget,"number"}  %read{16,16} %write{2147483647,-1}
param	float	LamaIridescence_relativeFilmThickness	0.5		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Relative Thickness"} %meta{string,page,"Main"} %meta{string,help,"Relative thin film thickness in the range from 0 to 1 will be scaled to the minimum and maximum thickness, respectively."} %meta{string,widget,"number"}  %read{14,14} %write{2147483647,-1}
param	float	LamaIridescence_minFilmThickness	400		%meta{float,min,0} %meta{float,slidermin,0} %meta{float,slidermax,1000} %meta{string,label,"Min. Thickness"} %meta{string,page,"Main"} %meta{string,help,"Minimum thin film thickness in nanometers, driving the iridescent effect."} %meta{string,widget,"number"}  %read{14,14} %write{2147483647,-1}
param	float	LamaIridescence_maxFilmThickness	800		%meta{float,min,0} %meta{float,slidermin,0} %meta{float,slidermax,1000} %meta{string,label,"Max. Thickness"} %meta{string,page,"Main"} %meta{string,help,"Maximum thin film thickness in nanometers, driving the iridescent effect."} %meta{string,widget,"number"}  %read{14,14} %write{2147483647,-1}
param	float	LamaIridescence_filmIOR	1.29999995		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"IOR"} %meta{string,page,"Main"} %meta{string,help,"Thin film index of refraction, driving the iridescent effect."} %meta{string,widget,"number"}  %read{182,182} %write{2147483647,-1}
param	float	LamaIridescenceSurface_opacity	1		%meta{string,help,"Surface cutout opacity"} %meta{string,widget,"number"}  %read{192,192} %write{2147483647,-1}
param	int	LamaIridescenceSurface_thin_walled	0		%meta{string,help,"Option to make the surface thin-walled."} %meta{string,widget,"checkBox"}  %read{2147483647,-1} %write{2147483647,-1}
oparam	closure color	out			%read{2147483647,-1} %write{205,205}
global	normal	N	%read{1,19} %write{2147483647,-1}
local	vector	___669_nAxis	%read{41,95} %write{37,37}
local	float	___669_s	%read{51,91} %write{38,38}
local	float	___669_c	%read{40,97} %write{39,39}
local	float	___669_oc	%read{42,94} %write{40,40}
local	float	___670_rotationRadians	%read{38,39} %write{35,35}
local	matrix	___670_m	%read{104,145} %write{98,98}
local	float	___670_trans.x	%read{148,148} %write{114,114} %mystruct{___670_trans} %mystructfield{0}
local	float	___670_trans.y	%read{148,148} %write{125,125} %mystruct{___670_trans} %mystructfield{1}
local	float	___670_trans.z	%read{148,148} %write{136,136} %mystruct{___670_trans} %mystructfield{2}
local	float	___670_trans.w	%read{2147483647,-1} %write{147,147} %mystruct{___670_trans} %mystructfield{3}
local	color	___671_reflection_tint	%read{182,182} %write{176,177}
local	color	___671_transmission_tint	%read{182,182} %write{180,181}
local	closure color	___672_null_closure	%read{172,172} %write{8,8}
local	string	___672_geomprop_Nworld_space_tmp	%read{11,11} %write{9,9}
local	vector	___672_geomprop_Nworld_out1	%read{182,182} %write{11,11}
local	float	___672_roughness_inverse_in1_tmp	%read{13,13} %write{12,12}
local	float	___672_roughness_inverse_out	%read{24,24} %write{13,13}
local	float	___672_thinfilm_thickness_out	%read{182,182} %write{14,14}
local	float	___672_tangent_rotate_degree_in2_tmp	%read{16,16} %write{15,15}
local	float	___672_tangent_rotate_degree_out	%read{29,29} %write{16,16}
local	string	___672_tangent_normal_space_tmp	%read{19,19} %write{17,17}
local	vector	___672_tangent_normal_out	%read{37,37} %write{19,19}
local	float	___672_delta_value2_tmp	%read{21,21} %write{20,20}
local	float	___672_delta_out	%read{30,30} %write{24,26}
local	float	___672_tangent_rotate_degree_offset_in2_tmp	%read{29,29} %write{28,28}
local	float	___672_tangent_rotate_degree_offset_out	%read{35,35} %write{29,29}
local	float	___672_roughness_additional_out	%read{149,149} %write{30,30}
local	vector	___672_tangent_rotate_out	%read{150,150} %write{31,148}
local	float	___672_roughness_bitangent_out	%read{154,154} %write{149,149}
local	vector	___672_tangent_rotate_normalize_out	%read{182,182} %write{150,150}
local	float	___672_roughness_bitangent_clamped_low_tmp	%read{155,155} %write{151,151}
local	float	___672_roughness_bitangent_clamped_high_tmp	%read{154,154} %write{152,152}
local	float	___672_roughness_bitangent_clamped_out	%read{157,157} %write{155,155}
local	float	___672_roughness_linear_out.x	%read{163,163} %write{156,156} %mystruct{___672_roughness_linear_out} %mystructfield{0}
local	float	___672_roughness_linear_out.y	%read{164,164} %write{157,157} %mystruct{___672_roughness_linear_out} %mystructfield{1}
local	float	___672_roughness_anisotropic_squared_in2_tmp	%read{160,161} %write{158,158}
local	float	___672_roughness_anisotropic_squared_out.x	%read{170,170} %write{163,163} %mystruct{___672_roughness_anisotropic_squared_out} %mystructfield{0}
local	float	___672_roughness_anisotropic_squared_out.y	%read{171,171} %write{164,164} %mystruct{___672_roughness_anisotropic_squared_out} %mystructfield{1}
local	float	___672_roughness_anisotropic_squared_clamped_in2_tmp	%read{167,168} %write{165,165}
local	float	___672_roughness_anisotropic_squared_clamped_out.x	%read{182,182} %write{170,170} %mystruct{___672_roughness_anisotropic_squared_clamped_out} %mystructfield{0}
local	float	___672_roughness_anisotropic_squared_clamped_out.y	%read{182,182} %write{171,171} %mystruct{___672_roughness_anisotropic_squared_clamped_out} %mystructfield{1}
local	closure color	___672_iridescence_bsdf_out	%read{184,184} %write{172,183}
local	float	___674_opacity_weight	%read{200,202} %write{198,198}
local	closure color	null_closure	%read{6,190} %write{0,0}
local	vector	geomprop_Tworld_out1	%read{99,101} %write{5,5}
local	closure color	LamaIridescence_out	%read{189,189} %write{6,184}
local	closure color	LamaIridescenceSurface_out.bsdf	%read{199,199} %write{185,189} %mystruct{LamaIridescenceSurface_out} %mystructfield{0}
local	closure color	LamaIridescenceSurface_out.edf	%read{199,199} %write{186,190} %mystruct{LamaIridescenceSurface_out} %mystructfield{1}
local	float	LamaIridescenceSurface_out.opacity	%read{194,197} %write{187,194} %mystruct{LamaIridescenceSurface_out} %mystructfield{2}
local	closure color	LamaIridescenceTest_out	%read{205,205} %write{204,204}
const	int	$const1	0		%read{0,137} %write{2147483647,-1}
temp	vector	$tmp1	%read{5,5} %write{4,4}
const	int	$const2	2		%read{1,142} %write{2147483647,-1}
temp	float	$tmp2	%read{4,4} %write{1,1}
const	float	$const3	0		%read{4,198} %write{2147483647,-1}
temp	float	$tmp3	%read{3,3} %write{2,2}
temp	float	$tmp4	%read{4,4} %write{3,3}
const	string	$const4	"IMPL_lama_iridescence"		%read{7,7} %write{2147483647,-1}
const	string	$const5	"world"		%read{9,17} %write{2147483647,-1}
const	string	$const6	"transform"		%read{10,103} %write{2147483647,-1}
const	string	$const7	"common"		%read{11,19} %write{2147483647,-1}
const	float	$const8	1		%read{12,202} %write{2147483647,-1}
const	float	$const9	-360		%read{15,15} %write{2147483647,-1}
temp	int	$tmp5	%read{23,23} %write{21,21}
const	string	$const10	"mx_ternary"		%read{22,22} %write{2147483647,-1}
const	vector	$const11	0 0 0		%read{31,31} %write{2147483647,-1}
const	string	$const12	"mx_rotate_vector3"		%read{32,32} %write{2147483647,-1}
const	string	$const13	"radians"		%read{33,33} %write{2147483647,-1}
const	float	$const14	3.1415927		%read{34,34} %write{2147483647,-1}
const	float	$const15	180		%read{34,34} %write{2147483647,-1}
temp	float	$tmp6	%read{35,35} %write{34,34}
const	string	$const16	"rotationMatrix"		%read{36,36} %write{2147483647,-1}
temp	float	$tmp7	%read{42,42} %write{41,41}
temp	float	$tmp8	%read{44,44} %write{42,42}
temp	float	$tmp9	%read{44,44} %write{43,43}
temp	float	$tmp10	%read{45,45} %write{44,44}
temp	float	$tmp11	%read{98,98} %write{45,45}
temp	float	$tmp12	%read{47,47} %write{46,46}
temp	float	$tmp13	%read{49,49} %write{47,47}
const	int	$const17	1		%read{48,139} %write{2147483647,-1}
temp	float	$tmp14	%read{49,49} %write{48,48}
temp	float	$tmp15	%read{52,52} %write{49,49}
temp	float	$tmp16	%read{51,51} %write{50,50}
temp	float	$tmp17	%read{52,52} %write{51,51}
temp	float	$tmp18	%read{98,98} %write{52,52}
temp	float	$tmp19	%read{54,54} %write{53,53}
temp	float	$tmp20	%read{56,56} %write{54,54}
temp	float	$tmp21	%read{56,56} %write{55,55}
temp	float	$tmp22	%read{59,59} %write{56,56}
temp	float	$tmp23	%read{58,58} %write{57,57}
temp	float	$tmp24	%read{59,59} %write{58,58}
temp	float	$tmp25	%read{98,98} %write{59,59}
temp	float	$tmp26	%read{61,61} %write{60,60}
temp	float	$tmp27	%read{63,63} %write{61,61}
temp	float	$tmp28	%read{63,63} %write{62,62}
temp	float	$tmp29	%read{66,66} %write{63,63}
temp	float	$tmp30	%read{65,65} %write{64,64}
temp	float	$tmp31	%read{66,66} %write{65,65}
temp	float	$tmp32	%read{98,98} %write{66,66}
temp	float	$tmp33	%read{68,68} %write{67,67}
temp	float	$tmp34	%read{70,70} %write{68,68}
temp	float	$tmp35	%read{70,70} %write{69,69}
temp	float	$tmp36	%read{71,71} %write{70,70}
temp	float	$tmp37	%read{98,98} %write{71,71}
temp	float	$tmp38	%read{73,73} %write{72,72}
temp	float	$tmp39	%read{75,75} %write{73,73}
temp	float	$tmp40	%read{75,75} %write{74,74}
temp	float	$tmp41	%read{78,78} %write{75,75}
temp	float	$tmp42	%read{77,77} %write{76,76}
temp	float	$tmp43	%read{78,78} %write{77,77}
temp	float	$tmp44	%read{98,98} %write{78,78}
temp	float	$tmp45	%read{80,80} %write{79,79}
temp	float	$tmp46	%read{82,82} %write{80,80}
temp	float	$tmp47	%read{82,82} %write{81,81}
temp	float	$tmp48	%read{85,85} %write{82,82}
temp	float	$tmp49	%read{84,84} %write{83,83}
temp	float	$tmp50	%read{85,85} %write{84,84}
temp	float	$tmp51	%read{98,98} %write{85,85}
temp	float	$tmp52	%read{87,87} %write{86,86}
temp	float	$tmp53	%read{89,89} %write{87,87}
temp	float	$tmp54	%read{89,89} %write{88,88}
temp	float	$tmp55	%read{92,92} %write{89,89}
temp	float	$tmp56	%read{91,91} %write{90,90}
temp	float	$tmp57	%read{92,92} %write{91,91}
temp	float	$tmp58	%read{98,98} %write{92,92}
temp	float	$tmp59	%read{94,94} %write{93,93}
temp	float	$tmp60	%read{96,96} %write{94,94}
temp	float	$tmp61	%read{96,96} %write{95,95}
temp	float	$tmp62	%read{97,97} %write{96,96}
temp	float	$tmp63	%read{98,98} %write{97,97}
temp	float	$tmp64.x	%read{105,138} %write{99,99}
temp	float	$tmp64.y	%read{107,140} %write{100,100}
temp	float	$tmp64.z	%read{110,143} %write{101,101}
temp	float	$tmp64.w	%read{113,146} %write{102,102}
temp	float	$tmp65	%read{105,105} %write{104,104}
temp	float	$tmp66	%read{108,108} %write{105,105}
temp	float	$tmp67	%read{107,107} %write{106,106}
temp	float	$tmp68	%read{108,108} %write{107,107}
temp	float	$tmp69	%read{111,111} %write{108,108}
temp	float	$tmp70	%read{110,110} %write{109,109}
temp	float	$tmp71	%read{111,111} %write{110,110}
temp	float	$tmp72	%read{114,114} %write{111,111}
const	int	$const18	3		%read{112,145} %write{2147483647,-1}
temp	float	$tmp73	%read{113,113} %write{112,112}
temp	float	$tmp74	%read{114,114} %write{113,113}
temp	float	$tmp75	%read{116,116} %write{115,115}
temp	float	$tmp76	%read{119,119} %write{116,116}
temp	float	$tmp77	%read{118,118} %write{117,117}
temp	float	$tmp78	%read{119,119} %write{118,118}
temp	float	$tmp79	%read{122,122} %write{119,119}
temp	float	$tmp80	%read{121,121} %write{120,120}
temp	float	$tmp81	%read{122,122} %write{121,121}
temp	float	$tmp82	%read{125,125} %write{122,122}
temp	float	$tmp83	%read{124,124} %write{123,123}
temp	float	$tmp84	%read{125,125} %write{124,124}
temp	float	$tmp85	%read{127,127} %write{126,126}
temp	float	$tmp86	%read{130,130} %write{127,127}
temp	float	$tmp87	%read{129,129} %write{128,128}
temp	float	$tmp88	%read{130,130} %write{129,129}
temp	float	$tmp89	%read{133,133} %write{130,130}
temp	float	$tmp90	%read{132,132} %write{131,131}
temp	float	$tmp91	%read{133,133} %write{132,132}
temp	float	$tmp92	%read{136,136} %write{133,133}
temp	float	$tmp93	%read{135,135} %write{134,134}
temp	float	$tmp94	%read{136,136} %write{135,135}
temp	float	$tmp95	%read{138,138} %write{137,137}
temp	float	$tmp96	%read{141,141} %write{138,138}
temp	float	$tmp97	%read{140,140} %write{139,139}
temp	float	$tmp98	%read{141,141} %write{140,140}
temp	float	$tmp99	%read{144,144} %write{141,141}
temp	float	$tmp100	%read{143,143} %write{142,142}
temp	float	$tmp101	%read{144,144} %write{143,143}
temp	float	$tmp102	%read{147,147} %write{144,144}
temp	float	$tmp103	%read{146,146} %write{145,145}
temp	float	$tmp104	%read{147,147} %write{146,146}
const	string	$const19	"clamp"		%read{153,196} %write{2147483647,-1}
temp	float	$tmp105	%read{155,155} %write{154,154}
const	float	$const20	2		%read{158,158} %write{2147483647,-1}
const	string	$const21	"pow"		%read{159,162} %write{2147483647,-1}
temp	float	$tmp106.x	%read{163,163} %write{160,160}
temp	float	$tmp106.y	%read{164,164} %write{161,161}
const	float	$const22	1e-06		%read{165,165} %write{2147483647,-1}
const	string	$const23	"max"		%read{166,169} %write{2147483647,-1}
temp	float	$tmp107.x	%read{170,170} %write{167,167}
temp	float	$tmp107.y	%read{171,171} %write{168,168}
const	color	$const24	1 1 1		%read{177,181} %write{2147483647,-1}
const	string	$const25	"ggx"		%read{182,182} %write{2147483647,-1}
const	string	$const26	"RT"		%read{174,178} %write{2147483647,-1}
const	string	$const27	"mx_dielectric_bsdf"		%read{173,173} %write{2147483647,-1}
const	string	$const28	"T"		%read{174,174} %write{2147483647,-1}
temp	int	$tmp109	%read{175,175} %write{174,174}
const	color	$const29	0 0 0		%read{176,180} %write{2147483647,-1}
const	string	$const30	"R"		%read{178,178} %write{2147483647,-1}
temp	int	$tmp110	%read{179,179} %write{178,178}
temp	closure color	$tmp111	%read{183,183} %write{182,182}
const	string	$const31	"thinfilm_thickness"		%read{182,182} %write{2147483647,-1}
const	string	$const32	"thinfilm_ior"		%read{182,182} %write{2147483647,-1}
const	string	$const33	"dielectric_bsdf"		%read{182,182} %write{2147483647,-1}
const	string	$const34	"mx_surface"		%read{188,188} %write{2147483647,-1}
temp	float	$tmp112	%read{193,193} %write{192,192}
const	string	$const35	"mx_surfacematerial"		%read{195,195} %write{2147483647,-1}
temp	float	$tmp113	%read{198,198} %write{197,197}
temp	closure color	$tmp114	%read{200,200} %write{199,199}
temp	closure color	$tmp115	%read{204,204} %write{200,200}
temp	closure color	$tmp116	%read{203,203} %write{201,201}
const	string	$const36	"transparent"		%read{201,201} %write{2147483647,-1}
temp	float	$tmp117	%read{203,203} %write{202,202}
temp	closure color	$tmp118	%read{204,204} %write{203,203}
code ___main___
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:185
#     vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
	assign		null_closure $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{185} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:186
#     BSDF LamaIridescence_out = null_closure;
	compref		$tmp2 N $const2 	%line{186} %argrw{"wrr"}
	compref		$tmp3 N $const1 	%argrw{"wrr"}
	neg		$tmp4 $tmp3 	%argrw{"wr"}
	vector		$tmp1 $tmp2 $const3 $tmp4 	%argrw{"wrrr"}
	normalize	geomprop_Tworld_out1 $tmp1 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:187
#     IMPL_lama_iridescence(LamaIridescence_roughness, LamaIridescence_anisotropy, geomprop_Tworld_out1, LamaIridescence_anisotropyRotation, LamaIridescence_relativeFilmThickness, LamaIridescence_minFilmThickness, LamaIridescence_maxFilmThickness, LamaIridescence_filmIOR, LamaIridescence_out);
	assign		LamaIridescence_out null_closure 	%line{187} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:188
#     surfaceshader LamaIridescenceSurface_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const4 185 	%line{188} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:48
#     string geomprop_Nworld_space_tmp = "world";
	assign		___672_null_closure $const1 	%line{48} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:49
#     vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space_tmp, N);
	assign		___672_geomprop_Nworld_space_tmp $const5 	%line{49} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:50
#     float roughness_inverse_in1_tmp = 1.000000;
	functioncall	$const6 12 	%line{50} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	___672_geomprop_Nworld_out1 $const7 ___672_geomprop_Nworld_space_tmp N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:51
#     float roughness_inverse_out = roughness_inverse_in1_tmp - roughness;
	assign		___672_roughness_inverse_in1_tmp $const8 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{51} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:52
#     float thinfilm_thickness_out = mix(minFilmThickness, maxFilmThickness, relativeFilmThickness);
	sub		___672_roughness_inverse_out ___672_roughness_inverse_in1_tmp LamaIridescence_roughness 	%line{52} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:53
#     float tangent_rotate_degree_in2_tmp = -360.000000;
	mix		___672_thinfilm_thickness_out LamaIridescence_minFilmThickness LamaIridescence_maxFilmThickness LamaIridescence_relativeFilmThickness 	%line{53} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:54
#     float tangent_rotate_degree_out = anisotropyRotation * tangent_rotate_degree_in2_tmp;
	assign		___672_tangent_rotate_degree_in2_tmp $const9 	%line{54} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:55
#     string tangent_normal_space_tmp = "world";
	mul		___672_tangent_rotate_degree_out LamaIridescence_anisotropyRotation ___672_tangent_rotate_degree_in2_tmp 	%line{55} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:56
#     vector tangent_normal_out = transform(tangent_normal_space_tmp, N);
	assign		___672_tangent_normal_space_tmp $const5 	%line{56} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:57
#     float delta_value2_tmp = 0.000000;
	functioncall	$const6 20 	%line{57} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	___672_tangent_normal_out $const7 ___672_tangent_normal_space_tmp N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:58
#     float delta_out = mx_ternary(anisotropy >= delta_value2_tmp, roughness_inverse_out, roughness);
	assign		___672_delta_value2_tmp $const3 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{58} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:59
#     float tangent_rotate_degree_offset_in2_tmp = 0.000000;
	ge		$tmp5 LamaIridescence_anisotropy ___672_delta_value2_tmp 	%line{59} %argrw{"wrr"}
	functioncall	$const10 28 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp5 26 28 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___672_delta_out ___672_roughness_inverse_out 	%argrw{"wr"}
	return
	assign		___672_delta_out LamaIridescence_roughness 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:60
#     float tangent_rotate_degree_offset_out = tangent_rotate_degree_out - tangent_rotate_degree_offset_in2_tmp;
	assign		___672_tangent_rotate_degree_offset_in2_tmp $const3 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{60} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:61
#     float roughness_additional_out = anisotropy * delta_out;
	sub		___672_tangent_rotate_degree_offset_out ___672_tangent_rotate_degree_out ___672_tangent_rotate_degree_offset_in2_tmp 	%line{61} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:62
#     vector tangent_rotate_out = vector(0.0);
	mul		___672_roughness_additional_out LamaIridescence_anisotropy ___672_delta_out 	%line{62} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:63
#     mx_rotate_vector3(anisotropyDirection, tangent_rotate_degree_offset_out, tangent_normal_out, tangent_rotate_out);
	assign		___672_tangent_rotate_out $const11 	%line{63} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:64
#     float roughness_bitangent_out = roughness + roughness_additional_out;
	functioncall	$const12 149 	%line{64} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:33
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const13 36 	%line{33} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp6 $const14 $const15 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___670_rotationRadians ___672_tangent_rotate_degree_offset_out $tmp6 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:34
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const16 99 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{34} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:20
#     float s = sin(angle);
	normalize	___669_nAxis ___672_tangent_normal_out 	%line{20} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:21
#     float c = cos(angle);
	sin		___669_s ___670_rotationRadians 	%line{21} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:22
#     float oc = 1.0 - c;
	cos		___669_c ___670_rotationRadians 	%line{22} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:23
# 
	sub		___669_oc $const8 ___669_c 	%line{23} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:25
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp7 ___669_nAxis $const1 	%line{25} %argrw{"wrr"}
	mul		$tmp8 ___669_oc $tmp7 	%argrw{"wrr"}
	compref		$tmp9 ___669_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp10 $tmp8 $tmp9 	%argrw{"wrr"}
	add		$tmp11 $tmp10 ___669_c 	%argrw{"wrr"}
	compref		$tmp12 ___669_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp13 ___669_oc $tmp12 	%argrw{"wrr"}
	compref		$tmp14 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
	compref		$tmp16 ___669_nAxis $const2 	%argrw{"wrr"}
	mul		$tmp17 $tmp16 ___669_s 	%argrw{"wrr"}
	sub		$tmp18 $tmp15 $tmp17 	%argrw{"wrr"}
	compref		$tmp19 ___669_nAxis $const2 	%argrw{"wrr"}
	mul		$tmp20 ___669_oc $tmp19 	%argrw{"wrr"}
	compref		$tmp21 ___669_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp22 $tmp20 $tmp21 	%argrw{"wrr"}
	compref		$tmp23 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp24 $tmp23 ___669_s 	%argrw{"wrr"}
	add		$tmp25 $tmp22 $tmp24 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:26
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp26 ___669_nAxis $const1 	%line{26} %argrw{"wrr"}
	mul		$tmp27 ___669_oc $tmp26 	%argrw{"wrr"}
	compref		$tmp28 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp29 $tmp27 $tmp28 	%argrw{"wrr"}
	compref		$tmp30 ___669_nAxis $const2 	%argrw{"wrr"}
	mul		$tmp31 $tmp30 ___669_s 	%argrw{"wrr"}
	add		$tmp32 $tmp29 $tmp31 	%argrw{"wrr"}
	compref		$tmp33 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp34 ___669_oc $tmp33 	%argrw{"wrr"}
	compref		$tmp35 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp36 $tmp34 $tmp35 	%argrw{"wrr"}
	add		$tmp37 $tmp36 ___669_c 	%argrw{"wrr"}
	compref		$tmp38 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp39 ___669_oc $tmp38 	%argrw{"wrr"}
	compref		$tmp40 ___669_nAxis $const2 	%argrw{"wrr"}
	mul		$tmp41 $tmp39 $tmp40 	%argrw{"wrr"}
	compref		$tmp42 ___669_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp43 $tmp42 ___669_s 	%argrw{"wrr"}
	sub		$tmp44 $tmp41 $tmp43 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:27
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp45 ___669_nAxis $const2 	%line{27} %argrw{"wrr"}
	mul		$tmp46 ___669_oc $tmp45 	%argrw{"wrr"}
	compref		$tmp47 ___669_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp48 $tmp46 $tmp47 	%argrw{"wrr"}
	compref		$tmp49 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp50 $tmp49 ___669_s 	%argrw{"wrr"}
	sub		$tmp51 $tmp48 $tmp50 	%argrw{"wrr"}
	compref		$tmp52 ___669_nAxis $const17 	%argrw{"wrr"}
	mul		$tmp53 ___669_oc $tmp52 	%argrw{"wrr"}
	compref		$tmp54 ___669_nAxis $const2 	%argrw{"wrr"}
	mul		$tmp55 $tmp53 $tmp54 	%argrw{"wrr"}
	compref		$tmp56 ___669_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp57 $tmp56 ___669_s 	%argrw{"wrr"}
	add		$tmp58 $tmp55 $tmp57 	%argrw{"wrr"}
	compref		$tmp59 ___669_nAxis $const2 	%argrw{"wrr"}
	mul		$tmp60 ___669_oc $tmp59 	%argrw{"wrr"}
	compref		$tmp61 ___669_nAxis $const2 	%argrw{"wrr"}
	mul		$tmp62 $tmp60 $tmp61 	%argrw{"wrr"}
	add		$tmp63 $tmp62 ___669_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:25
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___670_m $tmp11 $tmp18 $tmp25 $const3 $tmp32 $tmp37 $tmp44 $const3 $tmp51 $tmp58 $tmp63 $const3 $const3 $const3 $const3 $const8 	%line{25} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:35
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp64.x geomprop_Tworld_out1 $const1 	%line{35} %argrw{"wrr"}
	compref		$tmp64.y geomprop_Tworld_out1 $const17 	%argrw{"wrr"}
	compref		$tmp64.z geomprop_Tworld_out1 $const2 	%argrw{"wrr"}
	assign		$tmp64.w $const8 	%argrw{"wr"}
	functioncall	$const6 148 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp65 ___670_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp66 $tmp65 $tmp64.x 	%argrw{"wrr"}
	mxcompref	$tmp67 ___670_m $const17 $const1 	%argrw{"wrrr"}
	mul		$tmp68 $tmp67 $tmp64.y 	%argrw{"wrr"}
	add		$tmp69 $tmp66 $tmp68 	%argrw{"wrr"}
	mxcompref	$tmp70 ___670_m $const2 $const1 	%argrw{"wrrr"}
	mul		$tmp71 $tmp70 $tmp64.z 	%argrw{"wrr"}
	add		$tmp72 $tmp69 $tmp71 	%argrw{"wrr"}
	mxcompref	$tmp73 ___670_m $const18 $const1 	%argrw{"wrrr"}
	mul		$tmp74 $tmp73 $tmp64.w 	%argrw{"wrr"}
	add		___670_trans.x $tmp72 $tmp74 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp75 ___670_m $const1 $const17 	%line{416} %argrw{"wrrr"}
	mul		$tmp76 $tmp75 $tmp64.x 	%argrw{"wrr"}
	mxcompref	$tmp77 ___670_m $const17 $const17 	%argrw{"wrrr"}
	mul		$tmp78 $tmp77 $tmp64.y 	%argrw{"wrr"}
	add		$tmp79 $tmp76 $tmp78 	%argrw{"wrr"}
	mxcompref	$tmp80 ___670_m $const2 $const17 	%argrw{"wrrr"}
	mul		$tmp81 $tmp80 $tmp64.z 	%argrw{"wrr"}
	add		$tmp82 $tmp79 $tmp81 	%argrw{"wrr"}
	mxcompref	$tmp83 ___670_m $const18 $const17 	%argrw{"wrrr"}
	mul		$tmp84 $tmp83 $tmp64.w 	%argrw{"wrr"}
	add		___670_trans.y $tmp82 $tmp84 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp85 ___670_m $const1 $const2 	%line{417} %argrw{"wrrr"}
	mul		$tmp86 $tmp85 $tmp64.x 	%argrw{"wrr"}
	mxcompref	$tmp87 ___670_m $const17 $const2 	%argrw{"wrrr"}
	mul		$tmp88 $tmp87 $tmp64.y 	%argrw{"wrr"}
	add		$tmp89 $tmp86 $tmp88 	%argrw{"wrr"}
	mxcompref	$tmp90 ___670_m $const2 $const2 	%argrw{"wrrr"}
	mul		$tmp91 $tmp90 $tmp64.z 	%argrw{"wrr"}
	add		$tmp92 $tmp89 $tmp91 	%argrw{"wrr"}
	mxcompref	$tmp93 ___670_m $const18 $const2 	%argrw{"wrrr"}
	mul		$tmp94 $tmp93 $tmp64.w 	%argrw{"wrr"}
	add		___670_trans.z $tmp92 $tmp94 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp95 ___670_m $const1 $const18 	%line{418} %argrw{"wrrr"}
	mul		$tmp96 $tmp95 $tmp64.x 	%argrw{"wrr"}
	mxcompref	$tmp97 ___670_m $const17 $const18 	%argrw{"wrrr"}
	mul		$tmp98 $tmp97 $tmp64.y 	%argrw{"wrr"}
	add		$tmp99 $tmp96 $tmp98 	%argrw{"wrr"}
	mxcompref	$tmp100 ___670_m $const2 $const18 	%argrw{"wrrr"}
	mul		$tmp101 $tmp100 $tmp64.z 	%argrw{"wrr"}
	add		$tmp102 $tmp99 $tmp101 	%argrw{"wrr"}
	mxcompref	$tmp103 ___670_m $const18 $const18 	%argrw{"wrrr"}
	mul		$tmp104 $tmp103 $tmp64.w 	%argrw{"wrr"}
	add		___670_trans.w $tmp102 $tmp104 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:36
# }
	vector		___672_tangent_rotate_out ___670_trans.x ___670_trans.y ___670_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{36} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:65
#     vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
	add		___672_roughness_bitangent_out LamaIridescence_roughness ___672_roughness_additional_out 	%line{65} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:66
#     float roughness_bitangent_clamped_low_tmp = 0.000000;
	normalize	___672_tangent_rotate_normalize_out ___672_tangent_rotate_out 	%line{66} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:67
#     float roughness_bitangent_clamped_high_tmp = 1.000000;
	assign		___672_roughness_bitangent_clamped_low_tmp $const3 	%line{67} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:68
#     float roughness_bitangent_clamped_out = clamp(roughness_bitangent_out, roughness_bitangent_clamped_low_tmp, roughness_bitangent_clamped_high_tmp);
	assign		___672_roughness_bitangent_clamped_high_tmp $const8 	%line{68} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:69
#     vector2 roughness_linear_out = { roughness,roughness_bitangent_clamped_out };
	functioncall	$const19 156 	%line{69} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp105 ___672_roughness_bitangent_out ___672_roughness_bitangent_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___672_roughness_bitangent_clamped_out $tmp105 ___672_roughness_bitangent_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:70
#     float roughness_anisotropic_squared_in2_tmp = 2.000000;
	assign		___672_roughness_linear_out.x LamaIridescence_roughness 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{70} %argrw{"wr"}
	assign		___672_roughness_linear_out.y ___672_roughness_bitangent_clamped_out 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:71
#     vector2 roughness_anisotropic_squared_out = pow(roughness_linear_out, roughness_anisotropic_squared_in2_tmp);
	assign		___672_roughness_anisotropic_squared_in2_tmp $const20 	%line{71} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:72
#     float roughness_anisotropic_squared_clamped_in2_tmp = 0.000001;
	functioncall	$const21 165 	%line{72} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:284
#     return pow(in, vector2(amount, amount));
	assign		$tmp106.x ___672_roughness_anisotropic_squared_in2_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{284} %argrw{"wr"}
	assign		$tmp106.y ___672_roughness_anisotropic_squared_in2_tmp 	%argrw{"wr"}
	functioncall	$const21 165 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:279
#     return vector2(pow(in.x, amount.x), pow(in.y, amount.y));
	pow		___672_roughness_anisotropic_squared_out.x ___672_roughness_linear_out.x $tmp106.x 	%line{279} %argrw{"wrr"}
	pow		___672_roughness_anisotropic_squared_out.y ___672_roughness_linear_out.y $tmp106.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:73
#     vector2 roughness_anisotropic_squared_clamped_out = max(roughness_anisotropic_squared_out, roughness_anisotropic_squared_clamped_in2_tmp);
	assign		___672_roughness_anisotropic_squared_clamped_in2_tmp $const22 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{73} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:74
#     BSDF iridescence_bsdf_out = null_closure;
	functioncall	$const23 172 	%line{74} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:247
#     return max(a, vector2(b, b));
	assign		$tmp107.x ___672_roughness_anisotropic_squared_clamped_in2_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{247} %argrw{"wr"}
	assign		$tmp107.y ___672_roughness_anisotropic_squared_clamped_in2_tmp 	%argrw{"wr"}
	functioncall	$const23 172 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:230
#     return vector2 (max(a.x, b.x),
	max		___672_roughness_anisotropic_squared_clamped_out.x ___672_roughness_anisotropic_squared_out.x $tmp107.x 	%line{230} %argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:231
#                     max(a.y, b.y));
	max		___672_roughness_anisotropic_squared_clamped_out.y ___672_roughness_anisotropic_squared_out.y $tmp107.y 	%line{231} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:75
#     mx_dielectric_bsdf(1.000000, color(1.000000, 1.000000, 1.000000), 1.000000, roughness_anisotropic_squared_clamped_out, thinfilm_thickness_out, filmIOR, geomprop_Nworld_out1, tangent_rotate_normalize_out, "ggx", "RT", iridescence_bsdf_out);
	assign		___672_iridescence_bsdf_out ___672_null_closure 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{75} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:76
#     out = iridescence_bsdf_out;
	functioncall	$const27 184 	%line{76} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:41
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp109 $const26 $const28 	%line{41} %argrw{"wrr"}
	if		$tmp109 177 178 	%argrw{"r"}
	assign		___671_reflection_tint $const29 	%argrw{"wr"}
	assign		___671_reflection_tint $const24 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:42
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp110 $const26 $const30 	%line{42} %argrw{"wrr"}
	if		$tmp110 181 182 	%argrw{"r"}
	assign		___671_transmission_tint $const29 	%argrw{"wr"}
	assign		___671_transmission_tint $const24 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:43
# }
	closure		$tmp111 $const33 ___672_geomprop_Nworld_out1 ___672_tangent_rotate_normalize_out ___671_reflection_tint ___671_transmission_tint ___672_roughness_anisotropic_squared_clamped_out.x ___672_roughness_anisotropic_squared_clamped_out.y $const8 $const25 $const31 ___672_thinfilm_thickness_out $const32 LamaIridescence_filmIOR 	%line{43} %argrw{"wrrrrrrrrrrrrr"}
	mul		___672_iridescence_bsdf_out $tmp111 $const8 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:77
# }
	assign		LamaIridescence_out ___672_iridescence_bsdf_out 	%line{77} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:189
#     mx_surface(LamaIridescence_out, null_closure, LamaIridescenceSurface_opacity, LamaIridescenceSurface_thin_walled, LamaIridescenceSurface_out);
	assign		LamaIridescenceSurface_out.bsdf null_closure 	%line{189} %argrw{"wr"}
	assign		LamaIridescenceSurface_out.edf null_closure 	%argrw{"wr"}
	assign		LamaIridescenceSurface_out.opacity $const8 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:190
#     MATERIAL LamaIridescenceTest_out = mx_surfacematerial(LamaIridescenceSurface_out, backsurfaceshader, displacementshader1);
	functioncall	$const34 195 	%line{190} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:82
#     result.edf     = edf;
	assign		LamaIridescenceSurface_out.bsdf LamaIridescence_out 	%line{82} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:83
#     result.opacity = clamp(opacity, 0.0, 1.0);
	assign		LamaIridescenceSurface_out.edf null_closure 	%line{83} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:84
# }
	functioncall	$const19 194 	%line{84} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp112 LamaIridescenceSurface_opacity $const8 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		LamaIridescenceSurface_out.opacity $tmp112 $const3 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:84
# }
	assign		LamaIridescenceSurface_out.opacity LamaIridescenceSurface_out.opacity 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{84} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:191
#     out = LamaIridescenceTest_out;
	functioncall	$const35 205 	%line{191} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:89
#     return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
	functioncall	$const19 199 	%line{89} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp113 LamaIridescenceSurface_out.opacity $const8 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___674_opacity_weight $tmp113 $const3 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:90
# }
	add		$tmp114 LamaIridescenceSurface_out.bsdf LamaIridescenceSurface_out.edf 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl"} %line{90} %argrw{"wrr"}
	mul		$tmp115 $tmp114 ___674_opacity_weight 	%argrw{"wrr"}
	closure		$tmp116 $const36 	%argrw{"wr"}
	sub		$tmp117 $const8 ___674_opacity_weight 	%argrw{"wrr"}
	mul		$tmp118 $tmp116 $tmp117 	%argrw{"wrr"}
	add		LamaIridescenceTest_out $tmp115 $tmp118 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\lama\\lama_iridescence\\LamaIridescenceTest.osl:192
# }
	assign		out LamaIridescenceTest_out 	%line{192} %argrw{"wr"}
	end
