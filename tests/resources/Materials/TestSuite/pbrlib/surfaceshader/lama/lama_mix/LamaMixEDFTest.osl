#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void NG_separate3_color3(color in, output float outr, output float outg, output float outb)
{
    int N_extract_0_index_tmp = 0;
    float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
    int N_extract_1_index_tmp = 1;
    float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
    int N_extract_2_index_tmp = 2;
    float N_extract_2_out = mx_extract(in, N_extract_2_index_tmp);
    outr = N_extract_0_out;
    outg = N_extract_1_out;
    outb = N_extract_2_out;
}

void NG_convert_color3_vector3(color in, output vector out)
{
    float separate_outr = 0.0;
    float separate_outg = 0.0;
    float separate_outb = 0.0;
    NG_separate3_color3(in, separate_outr, separate_outg, separate_outb);
    vector combine_out = vector( separate_outr,separate_outg,separate_outb );
    out = combine_out;
}

void NG_separate3_vector3(vector in, output float outx, output float outy, output float outz)
{
    int N_extract_0_index_tmp = 0;
    float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
    int N_extract_1_index_tmp = 1;
    float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
    int N_extract_2_index_tmp = 2;
    float N_extract_2_out = mx_extract(in, N_extract_2_index_tmp);
    outx = N_extract_0_out;
    outy = N_extract_1_out;
    outz = N_extract_2_out;
}

void NG_convert_vector3_color3(vector in, output color out)
{
    float separate_outx = 0.0;
    float separate_outy = 0.0;
    float separate_outz = 0.0;
    NG_separate3_vector3(in, separate_outx, separate_outy, separate_outz);
    color combine_out = color( separate_outx,separate_outy,separate_outz );
    out = combine_out;
}

void NG_acescg_to_lin_rec709_color3(color in, output color out)
{
    vector asVec_out = vector(0.0);
    NG_convert_color3_vector3(in, asVec_out);
    matrix transform_mat_tmp = matrix(1.705051,  -0.130256,  -0.024003, 0.000,  -0.621792,  1.140805,  -0.128969, 0.000,  -0.083259,  -0.010548,  1.152972, 0.000, 0.000, 0.000, 0.000, 1.000);
    vector transform_out = transform(transform_mat_tmp, asVec_out);
    color asColor_out = color(0.0);
    NG_convert_vector3_color3(transform_out, asColor_out);
    out = asColor_out;
}

void IMPL_lama_emission(color color1, output EDF out)
{
    closure color null_closure = 0;
    EDF emission_out = uniform_edf(color1);
    out = emission_out;
}

void NG_lama_mix_edf(EDF material1, EDF material2, float mix1, output EDF out)
{
    closure color null_closure = 0;
    EDF mix_out = mix(material1, material2, mix1);
    out = mix_out;
}

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader LamaMixEDFTest
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "LamaMixEDFTest"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    color LamaEmission1_color_cm_in = color(1.000000, 1.000000, 0.000000),
    color LamaEmission2_color_cm_in = color(1.000000, 0.000000, 1.000000),
    float LamaMixEDF_mix = 0.500000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string help = "Defines the balance between the two materials, ranging from 0 (Material 1 only) to 1 (Material 2 only). Can also be seen as a Material 2 over Material 1 mask.",
        string widget = "number"
    ]],
    float LamaMixEDFSurface_opacity = 1.000000
    [[
        string help = "Surface cutout opacity",
        string widget = "number"
    ]],
    int LamaMixEDFSurface_thin_walled = 0
    [[
        string help = "Option to make the surface thin-walled.",
        string widget = "checkBox"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    color LamaEmission1_color_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaEmission1_color_cm_in, LamaEmission1_color_cm_out);
    color LamaEmission2_color_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaEmission2_color_cm_in, LamaEmission2_color_cm_out);
    EDF LamaEmission1_out = null_closure;
    IMPL_lama_emission(LamaEmission1_color_cm_out, LamaEmission1_out);
    EDF LamaEmission2_out = null_closure;
    IMPL_lama_emission(LamaEmission2_color_cm_out, LamaEmission2_out);
    EDF LamaMixEDF_out = null_closure;
    NG_lama_mix_edf(LamaEmission1_out, LamaEmission2_out, LamaMixEDF_mix, LamaMixEDF_out);
    surfaceshader LamaMixEDFSurface_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(null_closure, LamaMixEDF_out, LamaMixEDFSurface_opacity, LamaMixEDFSurface_thin_walled, LamaMixEDFSurface_out);
    MATERIAL LamaMixEDFTest_out = mx_surfacematerial(LamaMixEDFSurface_out, backsurfaceshader, displacementshader1);
    out = LamaMixEDFTest_out;
}

