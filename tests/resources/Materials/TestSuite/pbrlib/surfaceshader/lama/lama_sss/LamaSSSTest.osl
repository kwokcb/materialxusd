#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void NG_separate3_color3(color in, output float outr, output float outg, output float outb)
{
    int N_extract_0_index_tmp = 0;
    float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
    int N_extract_1_index_tmp = 1;
    float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
    int N_extract_2_index_tmp = 2;
    float N_extract_2_out = mx_extract(in, N_extract_2_index_tmp);
    outr = N_extract_0_out;
    outg = N_extract_1_out;
    outb = N_extract_2_out;
}

void NG_convert_color3_vector3(color in, output vector out)
{
    float separate_outr = 0.0;
    float separate_outg = 0.0;
    float separate_outb = 0.0;
    NG_separate3_color3(in, separate_outr, separate_outg, separate_outb);
    vector combine_out = vector( separate_outr,separate_outg,separate_outb );
    out = combine_out;
}

void NG_separate3_vector3(vector in, output float outx, output float outy, output float outz)
{
    int N_extract_0_index_tmp = 0;
    float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
    int N_extract_1_index_tmp = 1;
    float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
    int N_extract_2_index_tmp = 2;
    float N_extract_2_out = mx_extract(in, N_extract_2_index_tmp);
    outx = N_extract_0_out;
    outy = N_extract_1_out;
    outz = N_extract_2_out;
}

void NG_convert_vector3_color3(vector in, output color out)
{
    float separate_outx = 0.0;
    float separate_outy = 0.0;
    float separate_outz = 0.0;
    NG_separate3_vector3(in, separate_outx, separate_outy, separate_outz);
    color combine_out = color( separate_outx,separate_outy,separate_outz );
    out = combine_out;
}

void NG_acescg_to_lin_rec709_color3(color in, output color out)
{
    vector asVec_out = vector(0.0);
    NG_convert_color3_vector3(in, asVec_out);
    matrix transform_mat_tmp = matrix(1.705051,  -0.130256,  -0.024003, 0.000,  -0.621792,  1.140805,  -0.128969, 0.000,  -0.083259,  -0.010548,  1.152972, 0.000, 0.000, 0.000, 0.000, 1.000);
    vector transform_out = transform(transform_mat_tmp, asVec_out);
    color asColor_out = color(0.0);
    NG_convert_vector3_color3(transform_out, asColor_out);
    out = asColor_out;
}

void mx_subsurface_bsdf(float weight, color albedo, color radius, float anisotropy, normal N, output BSDF bsdf)
{
#if OSL_VERSION_MAJOR >= 1 && OSL_VERSION_MINOR >= 14
    bsdf = subsurface_bssrdf(N, weight * albedo, radius, anisotropy);
#else
    bsdf = subsurface_bssrdf(N, weight * albedo, 1.0, radius, anisotropy);
#endif
}

void IMPL_lama_sss(color color1, vector normal1, color sssRadius, float sssScale, int sssMode, float sssIOR, float sssAnisotropy, float sssBleed, float sssFollowTopology, string sssSubset, int sssContinuationRays, float sssUnitLength, int mode, int albedoInversionMethod, output BSDF out)
{
    closure color null_closure = 0;
    color subsurface_radius_scaled_out = sssRadius * sssScale;
    color subsurface_multiply_unitlength_out = subsurface_radius_scaled_out * sssUnitLength;
    BSDF subsurface_bsdf_out = null_closure;
    mx_subsurface_bsdf(1.000000, color1, subsurface_multiply_unitlength_out, sssAnisotropy, normal1, subsurface_bsdf_out);
    out = subsurface_bsdf_out;
}

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader LamaSSSTest
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "LamaSSSTest"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    string geomprop_Nworld_space = "world",
    color LamaSSS_color_cm_in = color(0.180000, 0.180000, 0.180000),
    color LamaSSS_sssRadius_cm_in = color(0.000000, 0.000000, 0.000000),
    float LamaSSS_sssScale = 1.000000
    [[
        float min = 0.000000,
        string label = "Scale",
        string page = "SSS",
        string help = "Multiplies the radius, to adjust its scale to the scene at hand. If zero, the computation simplifies to a Lambertian reflection lobe with no subsurface scattering.",
        string widget = "number"
    ]],
    int LamaSSS_sssMode = 0
    [[
        string label = "Mode",
        string page = "Main",
        string help = "Selects what method should be used to compute sub-surface scattering. The first two options are path-traced variants, with different attenuation strategies applied to the path. The second two are traditional diffusion models. The first Diffusion Burley expects a diffuse mean free path in mm (the average length of a path measured from its entry and exit points after subsurface scattering interactions). The second Diffusion Burley uses mean free path in mm (the average distance that a photon travels in a subsurface volume, which is 1/sigma_t, where sigma_t is the extinction coefficient).",
        string widget = "number"
    ]],
    float LamaSSS_sssIOR = 1.000000
    [[
        float min = 1.000000,
        float slidermin = 1.000000,
        float slidermax = 2.000000,
        string label = "IOR",
        string page = "SSS",
        string help = "Index of refraction use to trigger cases of total internal reflections, when the paths are reaching the surface after having travelled under it. Can be used to avoid excessive glow in highly curved regions (corners, creases, ...).",
        string widget = "number"
    ]],
    float LamaSSS_sssAnisotropy = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Anisotropy",
        string page = "SSS",
        string help = "Higher values makes light scatter predominantly forward under the surface, making the object look less diffuse and more transparent.",
        string widget = "number"
    ]],
    float LamaSSS_sssBleed = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Bleed",
        string page = "SSS",
        string help = "Controls the depth of light bleed in the subsurface medium. Has the effect of increasing the distance light travels in the medium while preserving fine detail, compared to increasing the Mean Free Path.",
        string widget = "number"
    ]],
    float LamaSSS_sssFollowTopology = 0.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string label = "Follow Topology",
        string page = "SSS",
        string help = "Controls how strongly normals are considered in the subsurface computation. For path-traced sss (sssMode 0 and 1), the followTopology parameter reduces sss paths being blocked by backsides behind a surface, but also reduces sss from one side to another in convex regions such as ridges and ears. For diffusion sss (sssMode 2 and 3), the followTopology parameter reduces sss from one side to another in concave regions such as crevasses and wrinkles.",
        string widget = "number"
    ]],
    string LamaSSS_sssSubset = ""
    [[
        string label = "Subset",
        string page = "SSS",
        string help = "Specifies trace subset for inclusion/exclusion when struck by a ray indirectly."
    ]],
    int LamaSSS_sssContinuationRays = 0
    [[
        string label = "Continuation Rays",
        string page = "SSS",
        string help = "When enabled, ignores internal geometry and jumps to the last surface.",
        string widget = "number"
    ]],
    float LamaSSS_sssUnitLength = 0.003280
    [[
        string label = "Unit Length",
        string page = "SSS",
        string help = "This is the multiplier that converts between millimeters and scene units. Both mean free path and diffuse mean free path are specified in millimeters and this parameter is used for the unit conversion. The default value of 0.00328 converts millimeters to feet. For centimeter scene units, this would be 0.1, for meters it would be 0.001 etc.",
        string widget = "number"
    ]],
    int LamaSSS_mode = 0
    [[
        string label = "Mode",
        string page = "Advanced",
        string help = "If the subsurface is enabled, Reflection: should be used when both the camera and the light are outside of the object. Reflection(with direct illumination): should be used when both the camera and the light are outside of the object. This mode also computes the direct illumination at the sss ray exit point. Transmission: should be used when the light is inside the object while the camera is outside. ",
        string widget = "number"
    ]],
    int LamaSSS_albedoInversionMethod = 0
    [[
        string label = "Albedo Inversion Method",
        string page = "Advanced",
        string help = "Decides which albedo inversion methods is used. Pixar: Does the Pixar Path Traced SSS default albedo inversion. Chiang: Does Chiang's albedo inversion (with no dmfp remapping). The look is closer to Arnold Standard Surface randomwalk.",
        string widget = "number"
    ]],
    float LamaSSSSurface_opacity = 1.000000
    [[
        string help = "Surface cutout opacity",
        string widget = "number"
    ]],
    int LamaSSSSurface_thin_walled = 0
    [[
        string help = "Option to make the surface thin-walled.",
        string widget = "checkBox"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
    color LamaSSS_color_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaSSS_color_cm_in, LamaSSS_color_cm_out);
    color LamaSSS_sssRadius_cm_out = color(0.0);
    NG_acescg_to_lin_rec709_color3(LamaSSS_sssRadius_cm_in, LamaSSS_sssRadius_cm_out);
    BSDF LamaSSS_out = null_closure;
    IMPL_lama_sss(LamaSSS_color_cm_out, geomprop_Nworld_out1, LamaSSS_sssRadius_cm_out, LamaSSS_sssScale, LamaSSS_sssMode, LamaSSS_sssIOR, LamaSSS_sssAnisotropy, LamaSSS_sssBleed, LamaSSS_sssFollowTopology, LamaSSS_sssSubset, LamaSSS_sssContinuationRays, LamaSSS_sssUnitLength, LamaSSS_mode, LamaSSS_albedoInversionMethod, LamaSSS_out);
    surfaceshader LamaSSSSurface_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(LamaSSS_out, null_closure, LamaSSSSurface_opacity, LamaSSSSurface_thin_walled, LamaSSSSurface_out);
    MATERIAL LamaSSSTest_out = mx_surfacematerial(LamaSSSSurface_out, backsurfaceshader, displacementshader1);
    out = LamaSSSTest_out;
}

