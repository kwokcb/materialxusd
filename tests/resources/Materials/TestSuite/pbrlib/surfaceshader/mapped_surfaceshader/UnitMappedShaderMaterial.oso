OpenShadingLanguage 1.00
# Compiled by oslc 1.13.3.0dev
# options: -q -ID:\Work\materialx\OSL_ILM\bin\shaders -o D:\Work\materialx\bernard_MaterialX_3\build\bin\resources\Materials\TestSuite\pbrlib\surfaceshader\mapped_surfaceshader\UnitMappedShaderMaterial.oso
shader UnitMappedShaderMaterial	%meta{string,mtlx_category,"surfacematerial"} %meta{string,mtlx_name,"UnitMappedShaderMaterial"} 
param	struct surfaceshader	backsurfaceshader			%read{2147483647,-1} %write{2147483647,-1} %struct{"surfaceshader"} %structfields{bsdf,edf,opacity} %structfieldtypes{"CCf"} %structnfields{3}
param	closure color	backsurfaceshader.bsdf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{0}
param	closure color	backsurfaceshader.edf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{1}
param	float	backsurfaceshader.opacity	1		%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{2}
param	vector	displacementshader1	0 0 0		%read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Nworld_space	"world"		%read{4,4} %write{2147483647,-1}
param	string	geomprop_Tworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Tworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_UV0_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	struct vector2	tiledimage_realworldtilesize_unit_in1			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_realworldtilesize_unit_in1.x	100		%read{16,16} %write{2147483647,-1} %mystruct{tiledimage_realworldtilesize_unit_in1} %mystructfield{0} %derivs
param	float	tiledimage_realworldtilesize_unit_in1.y	50		%read{17,17} %write{2147483647,-1} %mystruct{tiledimage_realworldtilesize_unit_in1} %mystructfield{1} %derivs
param	float	tiledimage_realworldtilesize_unit_in2	0.00999999978		%meta{string,widget,"number"}  %read{13,14} %write{2147483647,-1} %derivs
param	color	ramp4_valuetl	1 1 0		%read{47,47} %write{2147483647,-1}
param	color	ramp4_valuetr	0 0 0		%read{47,47} %write{2147483647,-1}
param	color	ramp4_valuebl	1 1 0		%read{48,48} %write{2147483647,-1}
param	color	ramp4_valuebr	1 1 1		%read{48,48} %write{2147483647,-1}
param	string	tiledimage_file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Images/grid.png"		%meta{string,widget,"filename"}  %read{1,1} %write{2147483647,-1}
param	string	tiledimage_file_colorspace	""		%meta{string,widget,"colorspace"}  %read{2,2} %write{2147483647,-1}
param	float	tiledimage_default	0		%meta{string,widget,"number"}  %read{99,101} %write{2147483647,-1}
param	struct vector2	tiledimage_uvtiling			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_uvtiling.x	2		%read{54,54} %write{2147483647,-1} %mystruct{tiledimage_uvtiling} %mystructfield{0} %derivs
param	float	tiledimage_uvtiling.y	3		%read{55,55} %write{2147483647,-1} %mystruct{tiledimage_uvtiling} %mystructfield{1} %derivs
param	struct vector2	tiledimage_uvoffset			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_uvoffset.x	0.200000003		%read{57,57} %write{2147483647,-1} %mystruct{tiledimage_uvoffset} %mystructfield{0} %derivs
param	float	tiledimage_uvoffset.y	0.200000003		%read{58,58} %write{2147483647,-1} %mystruct{tiledimage_uvoffset} %mystructfield{1} %derivs
param	struct vector2	tiledimage_realworldimagesize			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_realworldimagesize.x	1		%read{60,60} %write{2147483647,-1} %mystruct{tiledimage_realworldimagesize} %mystructfield{0} %derivs
param	float	tiledimage_realworldimagesize.y	1		%read{61,61} %write{2147483647,-1} %mystruct{tiledimage_realworldimagesize} %mystructfield{1} %derivs
param	string	tiledimage_filtertype	"linear"		%read{105,105} %write{2147483647,-1}
param	string	tiledimage_framerange	""		%read{2147483647,-1} %write{2147483647,-1}
param	int	tiledimage_frameoffset	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	tiledimage_frameendaction	"constant"		%read{2147483647,-1} %write{2147483647,-1}
param	float	UnitMappedShader_diffuse_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Diffuse Roughness"} %meta{string,page,"Base"} %meta{int,uiadvanced,1} %meta{string,help,"Roughness of the diffuse reflection. Higher values cause the surface to appear flatter and darker."} %meta{string,widget,"number"}  %read{570,570} %write{2147483647,-1}
param	float	UnitMappedShader_metalness	0.100000001		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Metalness"} %meta{string,page,"Base"} %meta{string,help,"Specifies how metallic the material appears. At its maximum, the surface behaves like a metal, using fully specular reflection and complex fresnel."} %meta{string,widget,"number"}  %read{585,587} %write{2147483647,-1}
param	float	UnitMappedShader_specular	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular"} %meta{string,page,"Specular"} %meta{string,help,"Multiplier on the intensity of the specular reflection."} %meta{string,widget,"number"}  %read{137,543} %write{2147483647,-1}
param	float	UnitMappedShader_specular_roughness	0.200000003		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Roughness"} %meta{string,page,"Specular"} %meta{string,help,"The roughness of the specular reflection. Lower numbers produce sharper reflections, higher numbers produce blurrier reflections."} %meta{string,widget,"number"}  %read{141,443} %write{2147483647,-1}
param	float	UnitMappedShader_specular_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Index of Refraction"} %meta{string,page,"Specular"} %meta{string,help,"Index of refraction for specular reflection."} %meta{string,widget,"number"}  %read{542,554} %write{2147483647,-1}
param	float	UnitMappedShader_specular_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Anisotropy"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"The directional bias of reflected and transmitted light resulting in materials appearing rougher or glossier in certain directions."} %meta{string,widget,"number"}  %read{465,497} %write{2147483647,-1}
param	float	UnitMappedShader_specular_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Rotation"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"Rotation of the axis of specular anisotropy around the surface normal."} %meta{string,widget,"number"}  %read{140,140} %write{2147483647,-1}
param	float	UnitMappedShader_transmission	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Transmission of light through the surface for materials such as glass or water. The greater the value the more transparent the material."} %meta{string,widget,"number"}  %read{579,581} %write{2147483647,-1}
param	color	UnitMappedShader_transmission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Color"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Color tint on the transmitted light."}  %read{549,553} %write{2147483647,-1}
param	float	UnitMappedShader_transmission_depth	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Depth"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Specifies the distance light travels inside the material before its becomes exactly the transmission color according to Beer's law."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	UnitMappedShader_transmission_scatter	0 0 0		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Scatter"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Scattering coefficient of the interior medium. Suitable for a large body of liquid or one that is fairly thick, such as an ocean, honey, ice, or frosted glass."}  %read{2147483647,-1} %write{2147483647,-1}
param	float	UnitMappedShader_transmission_scatter_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission Anisotropy"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the scattering."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	UnitMappedShader_transmission_dispersion	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Dispersion"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Dispersion amount, describing how much the index of refraction varies across wavelengths."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	UnitMappedShader_transmission_extra_roughness	0		%meta{float,min,-1} %meta{float,slidermin,0} %meta{float,max,1} %meta{string,label,"Transmission Roughness"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Additional roughness on top of specular roughness. Positive values blur refractions more than reflections, and negative values blur refractions less."} %meta{string,widget,"number"}  %read{141,141} %write{2147483647,-1}
param	float	UnitMappedShader_subsurface	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Subsurface"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The blend between diffuse reflection and subsurface scattering. A value of 1.0 indicates full subsurface scattering and a value 0 for diffuse reflection only."} %meta{string,widget,"number"}  %read{573,575} %write{2147483647,-1}
param	color	UnitMappedShader_subsurface_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Color"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the subsurface scattering effect."}  %read{144,144} %write{2147483647,-1}
param	color	UnitMappedShader_subsurface_radius	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Radius"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The mean free path. The distance which light can travel before being scattered inside the surface."}  %read{150,150} %write{2147483647,-1}
param	float	UnitMappedShader_subsurface_scale	1		%meta{float,min,0} %meta{float,slidermax,10} %meta{string,label,"Subsurface Scale"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"Scalar weight for the subsurface radius value."} %meta{string,widget,"number"}  %read{150,150} %write{2147483647,-1}
param	float	UnitMappedShader_subsurface_anisotropy	0		%meta{float,min,-1} %meta{float,max,1} %meta{string,label,"Subsurface Anisotropy"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The direction of subsurface scattering. 0 scatters light evenly, positive values scatter forward and negative values scatter backward."} %meta{string,widget,"number"}  %read{564,564} %write{2147483647,-1}
param	float	UnitMappedShader_sheen	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The weight of a sheen layer that can be used to approximate microfibers or fabrics such as velvet and satin."} %meta{string,widget,"number"}  %read{557,557} %write{2147483647,-1}
param	color	UnitMappedShader_sheen_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Sheen Color"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the sheen layer."}  %read{556,556} %write{2147483647,-1}
param	float	UnitMappedShader_sheen_roughness	0.300000012		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen Roughness"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The roughness of the sheen layer."} %meta{string,widget,"number"}  %read{556,556} %write{2147483647,-1}
param	float	UnitMappedShader_coat	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat"} %meta{string,page,"Coat"} %meta{string,help,"The weight of a reflective clear-coat layer on top of the material. Use for materials such as car paint or an oily layer."} %meta{string,widget,"number"}  %read{138,609} %write{2147483647,-1}
param	color	UnitMappedShader_coat_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Coat Color"} %meta{string,page,"Coat"} %meta{string,help,"The color of the clear-coat layer's transparency."}  %read{157,592} %write{2147483647,-1}
param	float	UnitMappedShader_coat_roughness	0.100000001		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Roughness"} %meta{string,page,"Coat"} %meta{string,help,"The roughness of the clear-coat reflections. The lower the value, the sharper the reflection."} %meta{string,widget,"number"}  %read{116,312} %write{2147483647,-1}
param	float	UnitMappedShader_coat_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Anisotropy"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the clear-coat layer."} %meta{string,widget,"number"}  %read{120,451} %write{2147483647,-1}
param	float	UnitMappedShader_coat_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Rotation"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The rotation of the anisotropic effect of the clear-coat layer."} %meta{string,widget,"number"}  %read{135,135} %write{2147483647,-1}
param	float	UnitMappedShader_coat_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Coat Index of Refraction"} %meta{string,page,"Coat"} %meta{string,help,"The index of refraction of the clear-coat layer."} %meta{string,widget,"number"}  %read{159,526} %write{2147483647,-1}
param	float	UnitMappedShader_coat_affect_color	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Color"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the saturation of diffuse reflection and subsurface scattering below the clear-coat."} %meta{string,widget,"number"}  %read{436,436} %write{2147483647,-1}
param	float	UnitMappedShader_coat_affect_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Roughness"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the roughness of the specular reflection in the layers below the clear-coat."} %meta{string,widget,"number"}  %read{138,138} %write{2147483647,-1}
param	float	UnitMappedShader_thin_film_thickness	0		%meta{float,min,0} %meta{float,slidermax,2000} %meta{string,label,"Thin Film Thickness"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The thickness of the thin film layer on a surface. Use for materials such as multitone car paint or soap bubbles (in nanometers)."} %meta{string,widget,"number"}  %read{530,542} %write{2147483647,-1}
param	float	UnitMappedShader_thin_film_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Thin Film Index of Refraction"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The index of refraction of the medium surrounding the material."} %meta{string,widget,"number"}  %read{530,542} %write{2147483647,-1}
param	float	UnitMappedShader_emission	0		%meta{float,min,0} %meta{float,slidermax,1} %meta{string,label,"Emission"} %meta{string,page,"Emission"} %meta{string,help,"The amount of emitted incandescent light."} %meta{string,widget,"number"}  %read{162,162} %write{2147483647,-1}
param	color	UnitMappedShader_emission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Emission Color"} %meta{string,page,"Emission"} %meta{string,help,"The color of the emitted light."}  %read{162,162} %write{2147483647,-1}
param	color	UnitMappedShader_opacity	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Opacity"} %meta{string,page,"Geometry"} %meta{string,help,"The opacity of the entire material."}  %read{165,165} %write{2147483647,-1}
param	int	UnitMappedShader_thin_walled	0		%meta{string,label,"Thin Walled"} %meta{string,page,"Geometry"} %meta{int,uiadvanced,1} %meta{string,help,"If true the surface is double-sided and represents an infinitely thin shell. Suitable for thin objects such as tree leaves or paper."} %meta{string,widget,"checkBox"}  %read{151,151} %write{2147483647,-1}
oparam	closure color	out			%read{2147483647,-1} %write{634,634}
global	vector	I	%read{595,595} %write{2147483647,-1}
global	normal	N	%read{4,596} %write{2147483647,-1}
global	float	u	%read{10,10} %write{2147483647,-1} %derivs
global	float	v	%read{11,11} %write{2147483647,-1} %derivs
local	float	___669_N_txclamp_color3_low_tmp.x	%read{27,27} %write{20,20} %mystruct{___669_N_txclamp_color3_low_tmp} %mystructfield{0}
local	float	___669_N_txclamp_color3_low_tmp.y	%read{30,30} %write{21,21} %mystruct{___669_N_txclamp_color3_low_tmp} %mystructfield{1}
local	float	___669_N_txclamp_color3_high_tmp.x	%read{26,26} %write{22,22} %mystruct{___669_N_txclamp_color3_high_tmp} %mystructfield{0}
local	float	___669_N_txclamp_color3_high_tmp.y	%read{29,29} %write{23,23} %mystruct{___669_N_txclamp_color3_high_tmp} %mystructfield{1}
local	float	___669_N_txclamp_color3_out.x	%read{35,43} %write{27,27} %mystruct{___669_N_txclamp_color3_out} %mystructfield{0}
local	float	___669_N_txclamp_color3_out.y	%read{37,45} %write{30,30} %mystruct{___669_N_txclamp_color3_out} %mystructfield{1}
local	int	___669_N_s_color3_index_tmp	%read{33,33} %write{31,31}
local	float	___669_N_s_color3_out	%read{47,48} %write{35,37}
local	int	___669_N_t_color3_index_tmp	%read{41,41} %write{39,39}
local	float	___669_N_t_color3_out	%read{49,49} %write{43,45}
local	color	___669_N_mixtop_color3_out	%read{49,49} %write{47,47}
local	color	___669_N_mixbot_color3_out	%read{49,49} %write{48,48}
local	color	___669_N_mix_color3_out	%read{50,50} %write{49,49}
local	color	___671_missingColor	%read{105,105} %write{101,101}
local	float	___671_st.x	%read{105,105} %write{103,103} %mystruct{___671_st} %mystructfield{0} %derivs
local	float	___671_st.y	%read{105,105} %write{104,104} %mystruct{___671_st} %mystructfield{1} %derivs
local	color	___671_rgb	%read{106,106} %write{105,105}
local	float	___673_N_mult_float_out.x	%read{57,57} %write{54,54} %mystruct{___673_N_mult_float_out} %mystructfield{0} %derivs
local	float	___673_N_mult_float_out.y	%read{58,58} %write{55,55} %mystruct{___673_N_mult_float_out} %mystructfield{1} %derivs
local	float	___673_N_sub_float_out.x	%read{60,60} %write{57,57} %mystruct{___673_N_sub_float_out} %mystructfield{0} %derivs
local	float	___673_N_sub_float_out.y	%read{61,61} %write{58,58} %mystruct{___673_N_sub_float_out} %mystructfield{1} %derivs
local	float	___673_N_divtilesize_float_out.x	%read{63,63} %write{60,60} %mystruct{___673_N_divtilesize_float_out} %mystructfield{0} %derivs
local	float	___673_N_divtilesize_float_out.y	%read{64,64} %write{61,61} %mystruct{___673_N_divtilesize_float_out} %mystructfield{1} %derivs
local	float	___673_N_multtilesize_float_out.x	%read{73,103} %write{63,63} %mystruct{___673_N_multtilesize_float_out} %mystructfield{0} %derivs
local	float	___673_N_multtilesize_float_out.y	%read{88,104} %write{64,64} %mystruct{___673_N_multtilesize_float_out} %mystructfield{1} %derivs
local	float	___673_N_img_float_out	%read{107,107} %write{65,106}
local	float	___674_roughness_sqr	%read{127,507} %write{119,493}
local	float	___675_aspect	%read{127,504} %write{126,500}
local	vector	___678_nAxis	%read{177,377} %write{173,319}
local	float	___678_s	%read{187,373} %write{174,320}
local	float	___678_c	%read{176,379} %write{175,321}
local	float	___678_oc	%read{178,376} %write{176,322}
local	float	___679_rotationRadians	%read{174,321} %write{171,317}
local	matrix	___679_m	%read{240,427} %write{234,380}
local	float	___679_trans.x	%read{284,430} %write{250,396} %mystruct{___679_trans} %mystructfield{0}
local	float	___679_trans.y	%read{284,430} %write{261,407} %mystruct{___679_trans} %mystructfield{1}
local	float	___679_trans.z	%read{284,430} %write{272,418} %mystruct{___679_trans} %mystructfield{2}
local	float	___679_trans.w	%read{2147483647,-1} %write{283,429} %mystruct{___679_trans} %mystructfield{3}
local	color	___680_r	%read{293,307} %write{292,292}
local	color	___680_r_sqrt	%read{297,298} %write{293,293}
local	color	___680_n_min	%read{300,300} %write{296,296}
local	color	___680_n_max	%read{300,300} %write{299,299}
local	color	___680_np1	%read{303,303} %write{301,301}
local	color	___680_nm1	%read{305,305} %write{302,302}
local	color	___680_k2	%read{310,311} %write{308,310}
local	color	___681_reflection_tint	%read{526,554} %write{520,549}
local	color	___681_transmission_tint	%read{526,554} %write{524,553}
local	color	___683_combine_out	%read{515,515} %write{514,514}
local	float	___695_x	%read{603,603} %write{602,602}
local	float	___696_NdotV	%read{599,599} %write{597,597}
local	color	___696_f	%read{605,605} %write{604,604}
local	closure color	___698_null_closure	%read{516,612} %write{112,112}
local	float	___698_coat_roughness_vector_out.x	%read{129,526} %write{113,132} %mystruct{___698_coat_roughness_vector_out} %mystructfield{0}
local	float	___698_coat_roughness_vector_out.y	%read{131,526} %write{114,133} %mystruct{___698_coat_roughness_vector_out} %mystructfield{1}
local	float	___698_coat_tangent_rotate_degree_in2_tmp	%read{135,135} %write{134,134}
local	float	___698_coat_tangent_rotate_degree_out	%read{171,171} %write{135,135}
local	color	___698_metal_reflectivity_out	%read{291,291} %write{136,136}
local	color	___698_metal_edgecolor_out	%read{300,300} %write{137,137}
local	float	___698_coat_affect_roughness_multiply1_out	%read{312,312} %write{138,138}
local	float	___698_tangent_rotate_degree_in2_tmp	%read{140,140} %write{139,139}
local	float	___698_tangent_rotate_degree_out	%read{317,317} %write{140,140}
local	float	___698_transmission_roughness_add_out	%read{434,434} %write{141,141}
local	float	___698_subsurface_color_nonnegative_in2_tmp	%read{143,143} %write{142,142}
local	color	___698_subsurface_color_nonnegative_out	%read{508,508} %write{144,144}
local	float	___698_coat_clamped_low_tmp	%read{149,149} %write{145,145}
local	float	___698_coat_clamped_high_tmp	%read{148,148} %write{146,146}
local	float	___698_coat_clamped_out	%read{436,436} %write{149,149}
local	color	___698_subsurface_radius_scaled_out	%read{564,564} %write{150,150}
local	float	___698_subsurface_selector_out	%read{566,568} %write{152,152}
local	float	___698_base_color_nonnegative_in2_tmp	%read{154,154} %write{153,153}
local	color	___698_base_color_nonnegative_out	%read{509,509} %write{155,155}
local	color	___698_coat_attenuation_bg_tmp	%read{157,157} %write{156,156}
local	color	___698_coat_attenuation_out	%read{589,589} %write{157,157}
local	float	___698_one_minus_coat_ior_in1_tmp	%read{159,159} %write{158,158}
local	float	___698_one_minus_coat_ior_out	%read{437,437} %write{159,159}
local	float	___698_one_plus_coat_ior_in1_tmp	%read{161,161} %write{160,160}
local	float	___698_one_plus_coat_ior_out	%read{437,437} %write{161,161}
local	color	___698_emission_weight_out	%read{591,591} %write{162,162}
local	color	___698_opacity_luminance_out	%read{440,440} %write{163,166}
local	vector	___698_coat_tangent_rotate_out	%read{441,441} %write{167,284}
local	color	___698_artistic_ior_ior	%read{301,530} %write{285,300}
local	color	___698_artistic_ior_extinction	%read{530,530} %write{286,311}
local	float	___698_coat_affect_roughness_multiply2_out	%read{443,446} %write{312,312}
local	vector	___698_tangent_rotate_out	%read{444,444} %write{313,430}
local	float	___698_transmission_roughness_clamped_low_tmp	%read{435,435} %write{431,431}
local	float	___698_transmission_roughness_clamped_high_tmp	%read{434,434} %write{432,432}
local	float	___698_transmission_roughness_clamped_out	%read{446,446} %write{435,435}
local	float	___698_coat_gamma_multiply_out	%read{448,448} %write{436,436}
local	float	___698_coat_ior_to_F0_sqrt_out	%read{449,449} %write{437,437}
local	int	___698_opacity_luminance_float_index_tmp	%read{440,440} %write{438,438}
local	float	___698_opacity_luminance_float_out	%read{618,618} %write{440,440}
local	vector	___698_coat_tangent_rotate_normalize_out	%read{454,454} %write{441,441}
local	float	___698_coat_affected_roughness_fg_tmp	%read{443,443} %write{442,442}
local	float	___698_coat_affected_roughness_out	%read{461,461} %write{443,443}
local	vector	___698_tangent_rotate_normalize_out	%read{483,483} %write{444,444}
local	float	___698_coat_affected_transmission_roughness_fg_tmp	%read{446,446} %write{445,445}
local	float	___698_coat_affected_transmission_roughness_out	%read{490,490} %write{446,446}
local	float	___698_coat_gamma_in2_tmp	%read{448,448} %write{447,447}
local	float	___698_coat_gamma_out	%read{508,509} %write{448,448}
local	float	___698_coat_ior_to_F0_out	%read{511,511} %write{449,449}
local	float	___698_coat_tangent_value2_tmp	%read{451,451} %write{450,450}
local	vector	___698_coat_tangent_out	%read{526,526} %write{454,456}
local	float	___698_main_roughness_out.x	%read{474,542} %write{458,477} %mystruct{___698_main_roughness_out} %mystructfield{0}
local	float	___698_main_roughness_out.y	%read{476,542} %write{459,478} %mystruct{___698_main_roughness_out} %mystructfield{1}
local	float	___698_main_tangent_value2_tmp	%read{480,480} %write{479,479}
local	vector	___698_main_tangent_out	%read{530,554} %write{483,485}
local	float	___698_transmission_roughness_out.x	%read{503,554} %write{487,506} %mystruct{___698_transmission_roughness_out} %mystructfield{0}
local	float	___698_transmission_roughness_out.y	%read{505,554} %write{488,507} %mystruct{___698_transmission_roughness_out} %mystructfield{1}
local	color	___698_coat_affected_subsurface_color_out	%read{559,563} %write{508,508}
local	color	___698_coat_affected_diffuse_color_out	%read{570,570} %write{509,509}
local	float	___698_one_minus_coat_ior_to_F0_in1_tmp	%read{511,511} %write{510,510}
local	float	___698_one_minus_coat_ior_to_F0_out	%read{514,514} %write{511,511}
local	color	___698_emission_color0_out	%read{604,604} %write{512,515}
local	closure color	___698_coat_bsdf_out	%read{590,590} %write{516,527}
local	float	___698_metal_bsdf_weight_tmp	%read{531,531} %write{528,528}
local	string	___698_metal_bsdf_distribution_tmp	%read{530,530} %write{529,529}
local	closure color	___698_metal_bsdf_out	%read{587,587} %write{531,531}
local	closure color	___698_specular_bsdf_out	%read{583,583} %write{532,543}
local	closure color	___698_transmission_bsdf_out	%read{581,581} %write{544,555}
local	closure color	___698_sheen_bsdf_out	%read{577,577} %write{557,557}
local	float	___698_translucent_bsdf_weight_tmp	%read{560,560} %write{558,558}
local	closure color	___698_translucent_bsdf_out	%read{568,568} %write{560,560}
local	closure color	___698_subsurface_bsdf_out	%read{567,567} %write{561,564}
local	closure color	___698_selected_subsurface_bsdf_out	%read{575,575} %write{569,569}
local	closure color	___698_diffuse_bsdf_out	%read{574,574} %write{571,571}
local	closure color	___698_subsurface_mix_out	%read{577,577} %write{576,576}
local	closure color	___698_sheen_layer_out	%read{580,580} %write{577,577}
local	closure color	___698_transmission_mix_out	%read{583,583} %write{582,582}
local	closure color	___698_specular_layer_out	%read{586,586} %write{583,583}
local	closure color	___698_metalness_mix_out	%read{589,589} %write{588,588}
local	closure color	___698_thin_film_layer_attenuated_out	%read{590,590} %write{589,589}
local	closure color	___698_coat_layer_out	%read{615,615} %write{590,590}
local	closure color	___698_emission_edf_out	%read{592,608} %write{591,591}
local	closure color	___698_coat_tinted_emission_edf_out	%read{605,605} %write{592,592}
local	closure color	___698_coat_emission_edf_out	%read{609,609} %write{593,605}
local	closure color	___698_blended_coat_emission_edf_out	%read{616,616} %write{610,610}
local	closure color	___698_shader_constructor_out.bsdf	%read{621,621} %write{611,615} %mystruct{___698_shader_constructor_out} %mystructfield{0}
local	closure color	___698_shader_constructor_out.edf	%read{622,622} %write{612,616} %mystruct{___698_shader_constructor_out} %mystructfield{1}
local	float	___698_shader_constructor_out.opacity	%read{620,623} %write{613,620} %mystruct{___698_shader_constructor_out} %mystructfield{2}
local	float	___699_opacity_weight	%read{629,631} %write{627,627}
local	closure color	null_closure	%read{108,109} %write{0,0}
local	string	tiledimage_file_.filename	%read{67,105} %write{1,1} %mystruct{tiledimage_file_} %mystructfield{0}
local	string	tiledimage_file_.colorspace	%read{2147483647,-1} %write{2,2} %mystruct{tiledimage_file_} %mystructfield{1}
local	vector	geomprop_Nworld_out1	%read{173,570} %write{4,4}
local	vector	geomprop_Tworld_out1	%read{235,485} %write{9,9}
local	float	geomprop_UV0_out1.x	%read{26,54} %write{10,10} %mystruct{geomprop_UV0_out1} %mystructfield{0} %derivs
local	float	geomprop_UV0_out1.y	%read{29,55} %write{11,11} %mystruct{geomprop_UV0_out1} %mystructfield{1} %derivs
local	float	tiledimage_realworldtilesize_unit_out.x	%read{63,63} %write{16,16} %mystruct{tiledimage_realworldtilesize_unit_out} %mystructfield{0} %derivs
local	float	tiledimage_realworldtilesize_unit_out.y	%read{64,64} %write{17,17} %mystruct{tiledimage_realworldtilesize_unit_out} %mystructfield{1} %derivs
local	color	ramp4_out	%read{136,541} %write{18,50}
local	float	tiledimage_out	%read{136,571} %write{51,107}
local	closure color	UnitMappedShader_out.bsdf	%read{628,628} %write{108,621} %mystruct{UnitMappedShader_out} %mystructfield{0}
local	closure color	UnitMappedShader_out.edf	%read{628,628} %write{109,622} %mystruct{UnitMappedShader_out} %mystructfield{1}
local	float	UnitMappedShader_out.opacity	%read{626,626} %write{110,623} %mystruct{UnitMappedShader_out} %mystructfield{2}
local	closure color	UnitMappedShaderMaterial_out	%read{634,634} %write{633,633}
const	int	$const1	0		%read{0,438} %write{2147483647,-1}
const	string	$const2	"transform"		%read{3,385} %write{2147483647,-1}
const	string	$const3	"common"		%read{4,4} %write{2147483647,-1}
temp	vector	$tmp1	%read{9,9} %write{8,8}
const	int	$const4	2		%read{5,424} %write{2147483647,-1}
temp	float	$tmp2	%read{8,8} %write{5,5}
const	float	$const5	0		%read{8,627} %write{2147483647,-1}
temp	float	$tmp3	%read{7,7} %write{6,6}
temp	float	$tmp4	%read{8,8} %write{7,7}
const	string	$const6	"__operator__mul__"		%read{12,62} %write{2147483647,-1}
temp	float	$tmp5.x	%read{16,16} %write{13,13} %derivs
temp	float	$tmp5.y	%read{17,17} %write{14,14} %derivs
const	color	$const7	0 0 0		%read{18,604} %write{2147483647,-1}
const	string	$const8	"NG_ramp4_color3"		%read{19,19} %write{2147483647,-1}
const	float	$const9	1		%read{22,631} %write{2147483647,-1}
const	string	$const10	"clamp"		%read{24,625} %write{2147483647,-1}
temp	float	$tmp6	%read{27,27} %write{26,26}
temp	float	$tmp7	%read{30,30} %write{29,29}
const	string	$const11	"mx_extract"		%read{32,439} %write{2147483647,-1}
temp	int	$tmp8	%read{34,34} %write{33,33}
const	int	$const12	1		%read{39,421} %write{2147483647,-1}
temp	int	$tmp9	%read{42,42} %write{41,41}
const	string	$const13	"NG_tiledimage_float"		%read{52,52} %write{2147483647,-1}
const	string	$const14	"__operator__sub__"		%read{56,56} %write{2147483647,-1}
const	string	$const15	"__operator__div__"		%read{59,59} %write{2147483647,-1}
const	string	$const16	""		%read{67,105} %write{2147483647,-1}
const	string	$const17	"periodic"		%read{70,105} %write{2147483647,-1}
const	string	$const18	"mx_image_float"		%read{66,66} %write{2147483647,-1}
temp	int	$tmp10	%read{68,68} %write{67,67}
temp	int	$tmp11	%read{69,83} %write{68,82}
const	string	$const19	"constant"		%read{70,85} %write{2147483647,-1}
temp	int	$tmp12	%read{71,71} %write{70,70}
temp	int	$tmp13	%read{72,81} %write{71,80}
temp	int	$tmp14	%read{74,74} %write{73,73}
temp	int	$tmp15	%read{75,79} %write{74,78}
temp	int	$tmp16	%read{77,77} %write{76,76}
temp	int	$tmp17	%read{78,78} %write{77,77}
temp	int	$tmp18	%read{80,80} %write{79,79}
temp	int	$tmp19	%read{82,82} %write{81,81}
temp	int	$tmp20	%read{84,98} %write{83,97}
temp	int	$tmp21	%read{86,86} %write{85,85}
temp	int	$tmp22	%read{87,96} %write{86,95}
temp	int	$tmp23	%read{89,89} %write{88,88}
temp	int	$tmp24	%read{90,94} %write{89,93}
temp	int	$tmp25	%read{92,92} %write{91,91}
temp	int	$tmp26	%read{93,93} %write{92,92}
temp	int	$tmp27	%read{95,95} %write{94,94}
temp	int	$tmp28	%read{97,97} %write{96,96}
const	string	$const20	"mx_transform_uv"		%read{102,102} %write{2147483647,-1}
const	string	$const21	"subimage"		%read{105,105} %write{2147483647,-1}
const	string	$const22	"interp"		%read{105,105} %write{2147483647,-1}
const	string	$const23	"missingcolor"		%read{105,105} %write{2147483647,-1}
const	string	$const24	"swrap"		%read{105,105} %write{2147483647,-1}
const	string	$const25	"twrap"		%read{105,105} %write{2147483647,-1}
const	string	$const26	"NG_standard_surface_surfaceshader_100"		%read{111,111} %write{2147483647,-1}
const	string	$const27	"mx_roughness_anisotropy"		%read{115,489} %write{2147483647,-1}
temp	float	$tmp29	%read{118,118} %write{116,116}
const	float	$const28	1e-08		%read{119,493} %write{2147483647,-1}
temp	float	$tmp30	%read{119,119} %write{118,118}
temp	int	$tmp31	%read{121,121} %write{120,120}
temp	float	$tmp32	%read{125,125} %write{124,124}
const	float	$const29	0.98		%read{123,497} %write{2147483647,-1}
temp	float	$tmp33	%read{124,124} %write{123,123}
temp	float	$tmp34	%read{126,126} %write{125,125}
temp	float	$tmp35	%read{128,128} %write{127,127}
const	float	$const30	360		%read{134,139} %write{2147483647,-1}
temp	color	$tmp36	%read{144,144} %write{143,143}
temp	float	$tmp37	%read{149,149} %write{148,148}
temp	float	$tmp38	%read{152,152} %write{151,151}
temp	color	$tmp39	%read{155,155} %write{154,154}
const	color	$const31	1 1 1		%read{156,525} %write{2147483647,-1}
const	color	$const32	0.272229 0.674082 0.053689		%read{165,165} %write{2147483647,-1}
const	string	$const33	"mx_luminance_color3"		%read{164,164} %write{2147483647,-1}
temp	float	$tmp41	%read{166,166} %write{165,165}
const	vector	$const34	0 0 0		%read{167,313} %write{2147483647,-1}
const	string	$const35	"mx_rotate_vector3"		%read{168,314} %write{2147483647,-1}
const	string	$const36	"radians"		%read{169,315} %write{2147483647,-1}
const	float	$const37	3.1415927		%read{170,316} %write{2147483647,-1}
const	float	$const38	180		%read{170,316} %write{2147483647,-1}
temp	float	$tmp42	%read{171,171} %write{170,170}
const	string	$const39	"rotationMatrix"		%read{172,318} %write{2147483647,-1}
temp	float	$tmp43	%read{178,178} %write{177,177}
temp	float	$tmp44	%read{180,180} %write{178,178}
temp	float	$tmp45	%read{180,180} %write{179,179}
temp	float	$tmp46	%read{181,181} %write{180,180}
temp	float	$tmp47	%read{234,234} %write{181,181}
temp	float	$tmp48	%read{183,183} %write{182,182}
temp	float	$tmp49	%read{185,185} %write{183,183}
temp	float	$tmp50	%read{185,185} %write{184,184}
temp	float	$tmp51	%read{188,188} %write{185,185}
temp	float	$tmp52	%read{187,187} %write{186,186}
temp	float	$tmp53	%read{188,188} %write{187,187}
temp	float	$tmp54	%read{234,234} %write{188,188}
temp	float	$tmp55	%read{190,190} %write{189,189}
temp	float	$tmp56	%read{192,192} %write{190,190}
temp	float	$tmp57	%read{192,192} %write{191,191}
temp	float	$tmp58	%read{195,195} %write{192,192}
temp	float	$tmp59	%read{194,194} %write{193,193}
temp	float	$tmp60	%read{195,195} %write{194,194}
temp	float	$tmp61	%read{234,234} %write{195,195}
temp	float	$tmp62	%read{197,197} %write{196,196}
temp	float	$tmp63	%read{199,199} %write{197,197}
temp	float	$tmp64	%read{199,199} %write{198,198}
temp	float	$tmp65	%read{202,202} %write{199,199}
temp	float	$tmp66	%read{201,201} %write{200,200}
temp	float	$tmp67	%read{202,202} %write{201,201}
temp	float	$tmp68	%read{234,234} %write{202,202}
temp	float	$tmp69	%read{204,204} %write{203,203}
temp	float	$tmp70	%read{206,206} %write{204,204}
temp	float	$tmp71	%read{206,206} %write{205,205}
temp	float	$tmp72	%read{207,207} %write{206,206}
temp	float	$tmp73	%read{234,234} %write{207,207}
temp	float	$tmp74	%read{209,209} %write{208,208}
temp	float	$tmp75	%read{211,211} %write{209,209}
temp	float	$tmp76	%read{211,211} %write{210,210}
temp	float	$tmp77	%read{214,214} %write{211,211}
temp	float	$tmp78	%read{213,213} %write{212,212}
temp	float	$tmp79	%read{214,214} %write{213,213}
temp	float	$tmp80	%read{234,234} %write{214,214}
temp	float	$tmp81	%read{216,216} %write{215,215}
temp	float	$tmp82	%read{218,218} %write{216,216}
temp	float	$tmp83	%read{218,218} %write{217,217}
temp	float	$tmp84	%read{221,221} %write{218,218}
temp	float	$tmp85	%read{220,220} %write{219,219}
temp	float	$tmp86	%read{221,221} %write{220,220}
temp	float	$tmp87	%read{234,234} %write{221,221}
temp	float	$tmp88	%read{223,223} %write{222,222}
temp	float	$tmp89	%read{225,225} %write{223,223}
temp	float	$tmp90	%read{225,225} %write{224,224}
temp	float	$tmp91	%read{228,228} %write{225,225}
temp	float	$tmp92	%read{227,227} %write{226,226}
temp	float	$tmp93	%read{228,228} %write{227,227}
temp	float	$tmp94	%read{234,234} %write{228,228}
temp	float	$tmp95	%read{230,230} %write{229,229}
temp	float	$tmp96	%read{232,232} %write{230,230}
temp	float	$tmp97	%read{232,232} %write{231,231}
temp	float	$tmp98	%read{233,233} %write{232,232}
temp	float	$tmp99	%read{234,234} %write{233,233}
temp	float	$tmp100.x	%read{241,274} %write{235,235}
temp	float	$tmp100.y	%read{243,276} %write{236,236}
temp	float	$tmp100.z	%read{246,279} %write{237,237}
temp	float	$tmp100.w	%read{249,282} %write{238,238}
temp	float	$tmp101	%read{241,241} %write{240,240}
temp	float	$tmp102	%read{244,244} %write{241,241}
temp	float	$tmp103	%read{243,243} %write{242,242}
temp	float	$tmp104	%read{244,244} %write{243,243}
temp	float	$tmp105	%read{247,247} %write{244,244}
temp	float	$tmp106	%read{246,246} %write{245,245}
temp	float	$tmp107	%read{247,247} %write{246,246}
temp	float	$tmp108	%read{250,250} %write{247,247}
const	int	$const40	3		%read{248,427} %write{2147483647,-1}
temp	float	$tmp109	%read{249,249} %write{248,248}
temp	float	$tmp110	%read{250,250} %write{249,249}
temp	float	$tmp111	%read{252,252} %write{251,251}
temp	float	$tmp112	%read{255,255} %write{252,252}
temp	float	$tmp113	%read{254,254} %write{253,253}
temp	float	$tmp114	%read{255,255} %write{254,254}
temp	float	$tmp115	%read{258,258} %write{255,255}
temp	float	$tmp116	%read{257,257} %write{256,256}
temp	float	$tmp117	%read{258,258} %write{257,257}
temp	float	$tmp118	%read{261,261} %write{258,258}
temp	float	$tmp119	%read{260,260} %write{259,259}
temp	float	$tmp120	%read{261,261} %write{260,260}
temp	float	$tmp121	%read{263,263} %write{262,262}
temp	float	$tmp122	%read{266,266} %write{263,263}
temp	float	$tmp123	%read{265,265} %write{264,264}
temp	float	$tmp124	%read{266,266} %write{265,265}
temp	float	$tmp125	%read{269,269} %write{266,266}
temp	float	$tmp126	%read{268,268} %write{267,267}
temp	float	$tmp127	%read{269,269} %write{268,268}
temp	float	$tmp128	%read{272,272} %write{269,269}
temp	float	$tmp129	%read{271,271} %write{270,270}
temp	float	$tmp130	%read{272,272} %write{271,271}
temp	float	$tmp131	%read{274,274} %write{273,273}
temp	float	$tmp132	%read{277,277} %write{274,274}
temp	float	$tmp133	%read{276,276} %write{275,275}
temp	float	$tmp134	%read{277,277} %write{276,276}
temp	float	$tmp135	%read{280,280} %write{277,277}
temp	float	$tmp136	%read{279,279} %write{278,278}
temp	float	$tmp137	%read{280,280} %write{279,279}
temp	float	$tmp138	%read{283,283} %write{280,280}
temp	float	$tmp139	%read{282,282} %write{281,281}
temp	float	$tmp140	%read{283,283} %write{282,282}
const	string	$const41	"mx_artistic_ior"		%read{287,287} %write{2147483647,-1}
temp	color	$tmp141	%read{292,292} %write{288,288}
const	float	$const42	0.99		%read{289,289} %write{2147483647,-1}
temp	color	$tmp142	%read{291,291} %write{289,289}
temp	color	$tmp143	%read{292,292} %write{291,291}
temp	color	$tmp144	%read{296,296} %write{294,294}
temp	color	$tmp145	%read{296,296} %write{295,295}
temp	color	$tmp146	%read{299,299} %write{297,297}
temp	color	$tmp147	%read{299,299} %write{298,298}
temp	color	$tmp148	%read{304,304} %write{303,303}
temp	color	$tmp149	%read{306,306} %write{304,304}
temp	color	$tmp150	%read{306,306} %write{305,305}
temp	color	$tmp151	%read{308,308} %write{306,306}
temp	color	$tmp152	%read{308,308} %write{307,307}
temp	color	$tmp153	%read{310,310} %write{309,309}
temp	float	$tmp154	%read{317,317} %write{316,316}
temp	float	$tmp155	%read{324,324} %write{323,323}
temp	float	$tmp156	%read{326,326} %write{324,324}
temp	float	$tmp157	%read{326,326} %write{325,325}
temp	float	$tmp158	%read{327,327} %write{326,326}
temp	float	$tmp159	%read{380,380} %write{327,327}
temp	float	$tmp160	%read{329,329} %write{328,328}
temp	float	$tmp161	%read{331,331} %write{329,329}
temp	float	$tmp162	%read{331,331} %write{330,330}
temp	float	$tmp163	%read{334,334} %write{331,331}
temp	float	$tmp164	%read{333,333} %write{332,332}
temp	float	$tmp165	%read{334,334} %write{333,333}
temp	float	$tmp166	%read{380,380} %write{334,334}
temp	float	$tmp167	%read{336,336} %write{335,335}
temp	float	$tmp168	%read{338,338} %write{336,336}
temp	float	$tmp169	%read{338,338} %write{337,337}
temp	float	$tmp170	%read{341,341} %write{338,338}
temp	float	$tmp171	%read{340,340} %write{339,339}
temp	float	$tmp172	%read{341,341} %write{340,340}
temp	float	$tmp173	%read{380,380} %write{341,341}
temp	float	$tmp174	%read{343,343} %write{342,342}
temp	float	$tmp175	%read{345,345} %write{343,343}
temp	float	$tmp176	%read{345,345} %write{344,344}
temp	float	$tmp177	%read{348,348} %write{345,345}
temp	float	$tmp178	%read{347,347} %write{346,346}
temp	float	$tmp179	%read{348,348} %write{347,347}
temp	float	$tmp180	%read{380,380} %write{348,348}
temp	float	$tmp181	%read{350,350} %write{349,349}
temp	float	$tmp182	%read{352,352} %write{350,350}
temp	float	$tmp183	%read{352,352} %write{351,351}
temp	float	$tmp184	%read{353,353} %write{352,352}
temp	float	$tmp185	%read{380,380} %write{353,353}
temp	float	$tmp186	%read{355,355} %write{354,354}
temp	float	$tmp187	%read{357,357} %write{355,355}
temp	float	$tmp188	%read{357,357} %write{356,356}
temp	float	$tmp189	%read{360,360} %write{357,357}
temp	float	$tmp190	%read{359,359} %write{358,358}
temp	float	$tmp191	%read{360,360} %write{359,359}
temp	float	$tmp192	%read{380,380} %write{360,360}
temp	float	$tmp193	%read{362,362} %write{361,361}
temp	float	$tmp194	%read{364,364} %write{362,362}
temp	float	$tmp195	%read{364,364} %write{363,363}
temp	float	$tmp196	%read{367,367} %write{364,364}
temp	float	$tmp197	%read{366,366} %write{365,365}
temp	float	$tmp198	%read{367,367} %write{366,366}
temp	float	$tmp199	%read{380,380} %write{367,367}
temp	float	$tmp200	%read{369,369} %write{368,368}
temp	float	$tmp201	%read{371,371} %write{369,369}
temp	float	$tmp202	%read{371,371} %write{370,370}
temp	float	$tmp203	%read{374,374} %write{371,371}
temp	float	$tmp204	%read{373,373} %write{372,372}
temp	float	$tmp205	%read{374,374} %write{373,373}
temp	float	$tmp206	%read{380,380} %write{374,374}
temp	float	$tmp207	%read{376,376} %write{375,375}
temp	float	$tmp208	%read{378,378} %write{376,376}
temp	float	$tmp209	%read{378,378} %write{377,377}
temp	float	$tmp210	%read{379,379} %write{378,378}
temp	float	$tmp211	%read{380,380} %write{379,379}
temp	float	$tmp212.x	%read{387,420} %write{381,381}
temp	float	$tmp212.y	%read{389,422} %write{382,382}
temp	float	$tmp212.z	%read{392,425} %write{383,383}
temp	float	$tmp212.w	%read{395,428} %write{384,384}
temp	float	$tmp213	%read{387,387} %write{386,386}
temp	float	$tmp214	%read{390,390} %write{387,387}
temp	float	$tmp215	%read{389,389} %write{388,388}
temp	float	$tmp216	%read{390,390} %write{389,389}
temp	float	$tmp217	%read{393,393} %write{390,390}
temp	float	$tmp218	%read{392,392} %write{391,391}
temp	float	$tmp219	%read{393,393} %write{392,392}
temp	float	$tmp220	%read{396,396} %write{393,393}
temp	float	$tmp221	%read{395,395} %write{394,394}
temp	float	$tmp222	%read{396,396} %write{395,395}
temp	float	$tmp223	%read{398,398} %write{397,397}
temp	float	$tmp224	%read{401,401} %write{398,398}
temp	float	$tmp225	%read{400,400} %write{399,399}
temp	float	$tmp226	%read{401,401} %write{400,400}
temp	float	$tmp227	%read{404,404} %write{401,401}
temp	float	$tmp228	%read{403,403} %write{402,402}
temp	float	$tmp229	%read{404,404} %write{403,403}
temp	float	$tmp230	%read{407,407} %write{404,404}
temp	float	$tmp231	%read{406,406} %write{405,405}
temp	float	$tmp232	%read{407,407} %write{406,406}
temp	float	$tmp233	%read{409,409} %write{408,408}
temp	float	$tmp234	%read{412,412} %write{409,409}
temp	float	$tmp235	%read{411,411} %write{410,410}
temp	float	$tmp236	%read{412,412} %write{411,411}
temp	float	$tmp237	%read{415,415} %write{412,412}
temp	float	$tmp238	%read{414,414} %write{413,413}
temp	float	$tmp239	%read{415,415} %write{414,414}
temp	float	$tmp240	%read{418,418} %write{415,415}
temp	float	$tmp241	%read{417,417} %write{416,416}
temp	float	$tmp242	%read{418,418} %write{417,417}
temp	float	$tmp243	%read{420,420} %write{419,419}
temp	float	$tmp244	%read{423,423} %write{420,420}
temp	float	$tmp245	%read{422,422} %write{421,421}
temp	float	$tmp246	%read{423,423} %write{422,422}
temp	float	$tmp247	%read{426,426} %write{423,423}
temp	float	$tmp248	%read{425,425} %write{424,424}
temp	float	$tmp249	%read{426,426} %write{425,425}
temp	float	$tmp250	%read{429,429} %write{426,426}
temp	float	$tmp251	%read{428,428} %write{427,427}
temp	float	$tmp252	%read{429,429} %write{428,428}
temp	float	$tmp253	%read{435,435} %write{434,434}
temp	int	$tmp254	%read{453,453} %write{451,451}
const	string	$const43	"mx_ternary"		%read{452,481} %write{2147483647,-1}
temp	float	$tmp255	%read{463,463} %write{461,461}
temp	float	$tmp256	%read{464,464} %write{463,463}
temp	int	$tmp257	%read{466,466} %write{465,465}
temp	float	$tmp258	%read{470,470} %write{469,469}
temp	float	$tmp259	%read{469,469} %write{468,468}
temp	float	$tmp260	%read{471,471} %write{470,470}
temp	float	$tmp261	%read{473,473} %write{472,472}
temp	int	$tmp262	%read{482,482} %write{480,480}
temp	float	$tmp263	%read{492,492} %write{490,490}
temp	float	$tmp264	%read{493,493} %write{492,492}
temp	int	$tmp265	%read{495,495} %write{494,494}
temp	float	$tmp266	%read{499,499} %write{498,498}
temp	float	$tmp267	%read{498,498} %write{497,497}
temp	float	$tmp268	%read{500,500} %write{499,499}
temp	float	$tmp269	%read{502,502} %write{501,501}
const	string	$const44	"NG_convert_float_color3"		%read{513,513} %write{2147483647,-1}
const	float	$const45	1.5		%read{526,554} %write{2147483647,-1}
const	string	$const46	"ggx"		%read{526,554} %write{2147483647,-1}
const	string	$const47	"R"		%read{518,550} %write{2147483647,-1}
const	string	$const48	"mx_dielectric_bsdf"		%read{517,545} %write{2147483647,-1}
const	string	$const49	"T"		%read{518,550} %write{2147483647,-1}
temp	int	$tmp271	%read{519,519} %write{518,518}
temp	int	$tmp272	%read{523,523} %write{522,522}
temp	closure color	$tmp273	%read{527,527} %write{526,526}
const	string	$const50	"thinfilm_thickness"		%read{526,554} %write{2147483647,-1}
const	string	$const51	"thinfilm_ior"		%read{526,554} %write{2147483647,-1}
const	string	$const52	"dielectric_bsdf"		%read{526,554} %write{2147483647,-1}
temp	closure color	$tmp274	%read{531,531} %write{530,530}
const	string	$const53	"conductor_bsdf"		%read{530,530} %write{2147483647,-1}
temp	int	$tmp275	%read{535,535} %write{534,534}
temp	int	$tmp276	%read{539,539} %write{538,538}
temp	closure color	$tmp277	%read{543,543} %write{542,542}
temp	int	$tmp278	%read{547,547} %write{546,546}
temp	int	$tmp279	%read{551,551} %write{550,550}
temp	closure color	$tmp280	%read{555,555} %write{554,554}
temp	closure color	$tmp281	%read{557,557} %write{556,556}
const	string	$const54	"sheen_bsdf"		%read{556,556} %write{2147483647,-1}
temp	closure color	$tmp282	%read{560,560} %write{559,559}
const	string	$const55	"translucent_bsdf"		%read{559,559} %write{2147483647,-1}
const	string	$const56	"mx_subsurface_bsdf"		%read{562,562} %write{2147483647,-1}
temp	color	$tmp283	%read{564,564} %write{563,563}
const	string	$const57	"subsurface_bssrdf"		%read{564,564} %write{2147483647,-1}
const	string	$const58	"mix"		%read{565,606} %write{2147483647,-1}
temp	float	$tmp284	%read{567,567} %write{566,566}
temp	closure color	$tmp285	%read{569,569} %write{567,567}
temp	closure color	$tmp286	%read{569,569} %write{568,568}
temp	closure color	$tmp287	%read{571,571} %write{570,570}
const	string	$const59	"oren_nayar_diffuse_bsdf"		%read{570,570} %write{2147483647,-1}
temp	float	$tmp288	%read{574,574} %write{573,573}
temp	closure color	$tmp289	%read{576,576} %write{574,574}
temp	closure color	$tmp290	%read{576,576} %write{575,575}
const	string	$const60	"layer"		%read{577,590} %write{2147483647,-1}
temp	float	$tmp291	%read{580,580} %write{579,579}
temp	closure color	$tmp292	%read{582,582} %write{580,580}
temp	closure color	$tmp293	%read{582,582} %write{581,581}
temp	float	$tmp294	%read{586,586} %write{585,585}
temp	closure color	$tmp295	%read{588,588} %write{586,586}
temp	closure color	$tmp296	%read{588,588} %write{587,587}
const	string	$const61	"uniform_edf"		%read{591,591} %write{2147483647,-1}
const	float	$const62	5		%read{603,603} %write{2147483647,-1}
const	string	$const63	"mx_generalized_schlick_edf"		%read{594,594} %write{2147483647,-1}
temp	float	$tmp298	%read{597,597} %write{596,596}
temp	vector	$tmp299	%read{596,596} %write{595,595}
const	string	$const64	"mx_fresnel_schlick"		%read{598,598} %write{2147483647,-1}
temp	float	$tmp300	%read{601,601} %write{599,599}
temp	float	$tmp301	%read{602,602} %write{601,601}
temp	float	$tmp302	%read{604,604} %write{603,603}
temp	float	$tmp303	%read{608,608} %write{607,607}
temp	closure color	$tmp304	%read{610,610} %write{608,608}
temp	closure color	$tmp305	%read{610,610} %write{609,609}
const	string	$const65	"mx_surface"		%read{614,614} %write{2147483647,-1}
temp	float	$tmp306	%read{619,619} %write{618,618}
const	string	$const66	"mx_surfacematerial"		%read{624,624} %write{2147483647,-1}
temp	float	$tmp307	%read{627,627} %write{626,626}
temp	closure color	$tmp308	%read{629,629} %write{628,628}
temp	closure color	$tmp309	%read{633,633} %write{629,629}
temp	closure color	$tmp310	%read{632,632} %write{630,630}
const	string	$const67	"transparent"		%read{630,630} %write{2147483647,-1}
temp	float	$tmp311	%read{632,632} %write{631,631}
temp	closure color	$tmp312	%read{633,633} %write{632,632}
code ___main___
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:746
#     textureresource tiledimage_file_ = {tiledimage_file, tiledimage_file_colorspace};
	assign		null_closure $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{746} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:747
#     vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
	assign		tiledimage_file_.filename tiledimage_file 	%line{747} %argrw{"wr"}
	assign		tiledimage_file_.colorspace tiledimage_file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:748
#     vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
	functioncall	$const2 5 	%line{748} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	geomprop_Nworld_out1 $const3 geomprop_Nworld_space N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:749
#     vector2 geomprop_UV0_out1 = vector2(u,v);
	compref		$tmp2 N $const4 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{749} %argrw{"wrr"}
	compref		$tmp3 N $const1 	%argrw{"wrr"}
	neg		$tmp4 $tmp3 	%argrw{"wr"}
	vector		$tmp1 $tmp2 $const5 $tmp4 	%argrw{"wrrr"}
	normalize	geomprop_Tworld_out1 $tmp1 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:750
#     vector2 tiledimage_realworldtilesize_unit_out = tiledimage_realworldtilesize_unit_in1 * tiledimage_realworldtilesize_unit_in2;
	assign		geomprop_UV0_out1.x u 	%line{750} %argrw{"wr"}
	assign		geomprop_UV0_out1.y v 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:761
# 
	functioncall	$const6 18 	%line{761} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp5.x tiledimage_realworldtilesize_unit_in2 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp5.y tiledimage_realworldtilesize_unit_in2 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:761
# 
	functioncall	$const6 18 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{761} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		tiledimage_realworldtilesize_unit_out.x tiledimage_realworldtilesize_unit_in1.x $tmp5.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{78} %argrw{"wrr"}
	mul		tiledimage_realworldtilesize_unit_out.y tiledimage_realworldtilesize_unit_in1.y $tmp5.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:752
#     NG_ramp4_color3(ramp4_valuetl, ramp4_valuetr, ramp4_valuebl, ramp4_valuebr, geomprop_UV0_out1, ramp4_out);
	assign		ramp4_out $const7 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{752} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:753
#     float tiledimage_out = 0.0;
	functioncall	$const8 51 	%line{753} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:20
#     vector2 N_txclamp_color3_high_tmp = vector2(1.000000, 1.000000);
	assign		___669_N_txclamp_color3_low_tmp.x $const5 	%line{20} %argrw{"wr"}
	assign		___669_N_txclamp_color3_low_tmp.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:21
#     vector2 N_txclamp_color3_out = clamp(texcoord, N_txclamp_color3_low_tmp, N_txclamp_color3_high_tmp);
	assign		___669_N_txclamp_color3_high_tmp.x $const9 	%line{21} %argrw{"wr"}
	assign		___669_N_txclamp_color3_high_tmp.y $const9 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:22
#     int N_s_color3_index_tmp = 0;
	functioncall	$const10 31 	%line{22} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:219
#     return vector2 (clamp(in.x, low.x, high.x),
	functioncall	$const10 28 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{219} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp6 geomprop_UV0_out1.x ___669_N_txclamp_color3_high_tmp.x 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___669_N_txclamp_color3_out.x $tmp6 ___669_N_txclamp_color3_low_tmp.x 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:220
#                     clamp(in.y, low.y, high.y));
	functioncall	$const10 31 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{220} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp7 geomprop_UV0_out1.y ___669_N_txclamp_color3_high_tmp.y 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___669_N_txclamp_color3_out.y $tmp7 ___669_N_txclamp_color3_low_tmp.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:23
#     float N_s_color3_out = mx_extract(N_txclamp_color3_out, N_s_color3_index_tmp);
	assign		___669_N_s_color3_index_tmp $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{23} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:24
#     int N_t_color3_index_tmp = 1;
	functioncall	$const11 39 	%line{24} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:118
#     if (index == 0) return in.x;
	eq		$tmp8 ___669_N_s_color3_index_tmp $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{118} %argrw{"wrr"}
	if		$tmp8 37 39 	%argrw{"r"}
	assign		___669_N_s_color3_out ___669_N_txclamp_color3_out.x 	%argrw{"wr"}
	return
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:119
#     else return in.y;
	assign		___669_N_s_color3_out ___669_N_txclamp_color3_out.y 	%line{119} %argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:25
#     float N_t_color3_out = mx_extract(N_txclamp_color3_out, N_t_color3_index_tmp);
	assign		___669_N_t_color3_index_tmp $const12 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{25} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:26
#     color N_mixtop_color3_out = mix(valuetl, valuetr, N_s_color3_out);
	functioncall	$const11 47 	%line{26} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:118
#     if (index == 0) return in.x;
	eq		$tmp9 ___669_N_t_color3_index_tmp $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{118} %argrw{"wrr"}
	if		$tmp9 45 47 	%argrw{"r"}
	assign		___669_N_t_color3_out ___669_N_txclamp_color3_out.x 	%argrw{"wr"}
	return
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:119
#     else return in.y;
	assign		___669_N_t_color3_out ___669_N_txclamp_color3_out.y 	%line{119} %argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:27
#     color N_mixbot_color3_out = mix(valuebl, valuebr, N_s_color3_out);
	mix		___669_N_mixtop_color3_out ramp4_valuetl ramp4_valuetr ___669_N_s_color3_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{27} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:28
#     color N_mix_color3_out = mix(N_mixtop_color3_out, N_mixbot_color3_out, N_t_color3_out);
	mix		___669_N_mixbot_color3_out ramp4_valuebl ramp4_valuebr ___669_N_s_color3_out 	%line{28} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:29
#     out = N_mix_color3_out;
	mix		___669_N_mix_color3_out ___669_N_mixtop_color3_out ___669_N_mixbot_color3_out ___669_N_t_color3_out 	%line{29} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:30
# }
	assign		ramp4_out ___669_N_mix_color3_out 	%line{30} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:754
#     NG_tiledimage_float(tiledimage_file_, tiledimage_default, geomprop_UV0_out1, tiledimage_uvtiling, tiledimage_uvoffset, tiledimage_realworldimagesize, tiledimage_realworldtilesize_unit_out, tiledimage_filtertype, tiledimage_framerange, tiledimage_frameoffset, tiledimage_frameendaction, tiledimage_out);
	assign		tiledimage_out $const5 	%line{754} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:755
#     surfaceshader UnitMappedShader_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const13 108 	%line{755} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:761
# 
	functioncall	$const6 56 	%line{761} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___673_N_mult_float_out.x geomprop_UV0_out1.x tiledimage_uvtiling.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___673_N_mult_float_out.y geomprop_UV0_out1.y tiledimage_uvtiling.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:761
# 
	functioncall	$const14 59 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{761} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___673_N_sub_float_out.x ___673_N_mult_float_out.x tiledimage_uvoffset.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___673_N_sub_float_out.y ___673_N_mult_float_out.y tiledimage_uvoffset.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:761
# 
	functioncall	$const15 62 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{761} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:103
#     return vector2(a.x / b.x, a.y / b.y);
	div		___673_N_divtilesize_float_out.x ___673_N_sub_float_out.x tiledimage_realworldimagesize.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{103} %argrw{"wrr"}
	div		___673_N_divtilesize_float_out.y ___673_N_sub_float_out.y tiledimage_realworldimagesize.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:761
# 
	functioncall	$const6 65 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{761} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___673_N_multtilesize_float_out.x ___673_N_divtilesize_float_out.x tiledimage_realworldtilesize_unit_out.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___673_N_multtilesize_float_out.y ___673_N_divtilesize_float_out.y tiledimage_realworldtilesize_unit_out.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:63
#     mx_image_float(file, "", default1, N_multtilesize_float_out, "periodic", "periodic", filtertype, framerange, frameoffset, frameendaction, N_img_float_out);
	assign		___673_N_img_float_out $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{63} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:64
#     out = N_img_float_out;
	functioncall	$const18 107 	%line{64} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:40
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp10 tiledimage_file_.filename $const16 	%line{40} %argrw{"wrr"}
	neq		$tmp11 $tmp10 $const1 	%argrw{"wrr"}
	if		$tmp11 70 83 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:41
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp12 $const17 $const19 	%line{41} %argrw{"wrr"}
	neq		$tmp13 $tmp12 $const1 	%argrw{"wrr"}
	if		$tmp13 81 81 	%argrw{"r"}
	lt		$tmp14 ___673_N_multtilesize_float_out.x $const5 	%argrw{"wrr"}
	neq		$tmp15 $tmp14 $const1 	%argrw{"wrr"}
	if		$tmp15 76 79 	%argrw{"r"}
	gt		$tmp16 ___673_N_multtilesize_float_out.x $const9 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const1 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	neq		$tmp18 $tmp15 $const1 	%argrw{"wrr"}
	assign		$tmp13 $tmp18 	%argrw{"wr"}
	neq		$tmp19 $tmp13 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:40
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp11 $tmp19 	%line{40} %argrw{"wr"}
	neq		$tmp20 $tmp11 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:41
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp20 85 98 	%line{41} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:42
#     {
	eq		$tmp21 $const17 $const19 	%line{42} %argrw{"wrr"}
	neq		$tmp22 $tmp21 $const1 	%argrw{"wrr"}
	if		$tmp22 96 96 	%argrw{"r"}
	lt		$tmp23 ___673_N_multtilesize_float_out.y $const5 	%argrw{"wrr"}
	neq		$tmp24 $tmp23 $const1 	%argrw{"wrr"}
	if		$tmp24 91 94 	%argrw{"r"}
	gt		$tmp25 ___673_N_multtilesize_float_out.y $const9 	%argrw{"wrr"}
	neq		$tmp26 $tmp25 $const1 	%argrw{"wrr"}
	assign		$tmp24 $tmp26 	%argrw{"wr"}
	neq		$tmp27 $tmp24 $const1 	%argrw{"wrr"}
	assign		$tmp22 $tmp27 	%argrw{"wr"}
	neq		$tmp28 $tmp22 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:41
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp20 $tmp28 	%line{41} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:40
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp20 101 101 	%line{40} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:44
#         return;
	assign		___673_N_img_float_out tiledimage_default 	%line{44} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:45
#     }
	return	%line{45}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:48
#     vector2 st = mx_transform_uv(texcoord);
	assign		___671_missingColor tiledimage_default 	%line{48} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:49
#     color rgb = texture(file.filename, st.x, st.y,
	functioncall	$const20 105 	%line{49} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:35
# }
	assign		___671_st.x ___673_N_multtilesize_float_out.x 	%line{35} %argrw{"wr"}
	assign		___671_st.y ___673_N_multtilesize_float_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:50
#                         "subimage", layer, "interp", filtertype,
	texture		___671_rgb tiledimage_file_.filename ___671_st.x ___671_st.y $const21 $const16 $const22 tiledimage_filtertype $const23 ___671_missingColor $const24 $const17 $const25 $const17 	%line{50} %argrw{"wrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:54
# }
	compref		___673_N_img_float_out ___671_rgb $const1 	%line{54} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:65
# }
	assign		tiledimage_out ___673_N_img_float_out 	%line{65} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:756
#     NG_standard_surface_surfaceshader_100(tiledimage_out, ramp4_out, UnitMappedShader_diffuse_roughness, UnitMappedShader_metalness, UnitMappedShader_specular, ramp4_out, UnitMappedShader_specular_roughness, UnitMappedShader_specular_IOR, UnitMappedShader_specular_anisotropy, UnitMappedShader_specular_rotation, UnitMappedShader_transmission, UnitMappedShader_transmission_color, UnitMappedShader_transmission_depth, UnitMappedShader_transmission_scatter, UnitMappedShader_transmission_scatter_anisotropy, UnitMappedShader_transmission_dispersion, UnitMappedShader_transmission_extra_roughness, UnitMappedShader_subsurface, UnitMappedShader_subsurface_color, UnitMappedShader_subsurface_radius, UnitMappedShader_subsurface_scale, UnitMappedShader_subsurface_anisotropy, UnitMappedShader_sheen, UnitMappedShader_sheen_color, UnitMappedShader_sheen_roughness, UnitMappedShader_coat, UnitMappedShader_coat_color, UnitMappedShader_coat_roughness, UnitMappedShader_coat_anisotropy, UnitMappedShader_coat_rotation, UnitMappedShader_coat_IOR, geomprop_Nworld_out1, UnitMappedShader_coat_affect_color, UnitMappedShader_coat_affect_roughness, UnitMappedShader_thin_film_thickness, UnitMappedShader_thin_film_IOR, UnitMappedShader_emission, UnitMappedShader_emission_color, UnitMappedShader_opacity, UnitMappedShader_thin_walled, geomprop_Nworld_out1, geomprop_Tworld_out1, UnitMappedShader_out);
	assign		UnitMappedShader_out.bsdf null_closure 	%line{756} %argrw{"wr"}
	assign		UnitMappedShader_out.edf null_closure 	%argrw{"wr"}
	assign		UnitMappedShader_out.opacity $const9 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:757
#     MATERIAL UnitMappedShaderMaterial_out = mx_surfacematerial(UnitMappedShader_out, backsurfaceshader, displacementshader1);
	functioncall	$const26 624 	%line{757} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:245
#     vector2 coat_roughness_vector_out = vector2(0.0, 0.0);
	assign		___698_null_closure $const1 	%line{245} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:246
#     mx_roughness_anisotropy(coat_roughness, coat_anisotropy, coat_roughness_vector_out);
	assign		___698_coat_roughness_vector_out.x $const5 	%line{246} %argrw{"wr"}
	assign		___698_coat_roughness_vector_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:247
#     float coat_tangent_rotate_degree_in2_tmp = 360.000000;
	functioncall	$const27 134 	%line{247} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:70
#     if (anisotropy > 0.0)
	mul		$tmp29 UnitMappedShader_coat_roughness UnitMappedShader_coat_roughness 	%line{70} %argrw{"wrr"}
	functioncall	$const10 120 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp30 $tmp29 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___674_roughness_sqr $tmp30 $const28 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:71
#     {
	gt		$tmp31 UnitMappedShader_coat_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{71} %argrw{"wrr"}
	if		$tmp31 132 134 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:73
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const10 125 	%line{73} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp33 UnitMappedShader_coat_anisotropy $const29 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp32 $tmp33 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:73
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp34 $const9 $tmp32 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{73} %argrw{"wrr"}
	sqrt		___675_aspect $tmp34 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:74
#         result.y = roughness_sqr * aspect;
	div		$tmp35 ___674_roughness_sqr ___675_aspect 	%line{74} %argrw{"wrr"}
	min		___698_coat_roughness_vector_out.x $tmp35 $const9 	%argrw{"wrr"}
	assign		___698_coat_roughness_vector_out.x ___698_coat_roughness_vector_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:75
#     }
	mul		___698_coat_roughness_vector_out.y ___674_roughness_sqr ___675_aspect 	%line{75} %argrw{"wrr"}
	assign		___698_coat_roughness_vector_out.y ___698_coat_roughness_vector_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:79
#         result.y = roughness_sqr;
	assign		___698_coat_roughness_vector_out.x ___674_roughness_sqr 	%line{79} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:80
#     }
	assign		___698_coat_roughness_vector_out.y ___674_roughness_sqr 	%line{80} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:248
#     float coat_tangent_rotate_degree_out = coat_rotation * coat_tangent_rotate_degree_in2_tmp;
	assign		___698_coat_tangent_rotate_degree_in2_tmp $const30 	%line{248} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:249
#     color metal_reflectivity_out = base_color * base;
	mul		___698_coat_tangent_rotate_degree_out UnitMappedShader_coat_rotation ___698_coat_tangent_rotate_degree_in2_tmp 	%line{249} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:250
#     color metal_edgecolor_out = specular_color * specular;
	mul		___698_metal_reflectivity_out ramp4_out tiledimage_out 	%line{250} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:251
#     float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
	mul		___698_metal_edgecolor_out ramp4_out UnitMappedShader_specular 	%line{251} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:252
#     float tangent_rotate_degree_in2_tmp = 360.000000;
	mul		___698_coat_affect_roughness_multiply1_out UnitMappedShader_coat_affect_roughness UnitMappedShader_coat 	%line{252} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:253
#     float tangent_rotate_degree_out = specular_rotation * tangent_rotate_degree_in2_tmp;
	assign		___698_tangent_rotate_degree_in2_tmp $const30 	%line{253} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:254
#     float transmission_roughness_add_out = specular_roughness + transmission_extra_roughness;
	mul		___698_tangent_rotate_degree_out UnitMappedShader_specular_rotation ___698_tangent_rotate_degree_in2_tmp 	%line{254} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:255
#     float subsurface_color_nonnegative_in2_tmp = 0.000000;
	add		___698_transmission_roughness_add_out UnitMappedShader_specular_roughness UnitMappedShader_transmission_extra_roughness 	%line{255} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:256
#     color subsurface_color_nonnegative_out = max(subsurface_color, subsurface_color_nonnegative_in2_tmp);
	assign		___698_subsurface_color_nonnegative_in2_tmp $const5 	%line{256} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:257
#     float coat_clamped_low_tmp = 0.000000;
	assign		$tmp36 ___698_subsurface_color_nonnegative_in2_tmp 	%line{257} %argrw{"wr"}
	max		___698_subsurface_color_nonnegative_out UnitMappedShader_subsurface_color $tmp36 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:258
#     float coat_clamped_high_tmp = 1.000000;
	assign		___698_coat_clamped_low_tmp $const5 	%line{258} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:259
#     float coat_clamped_out = clamp(coat, coat_clamped_low_tmp, coat_clamped_high_tmp);
	assign		___698_coat_clamped_high_tmp $const9 	%line{259} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:260
#     color subsurface_radius_scaled_out = subsurface_radius * subsurface_scale;
	functioncall	$const10 150 	%line{260} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp37 UnitMappedShader_coat ___698_coat_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___698_coat_clamped_out $tmp37 ___698_coat_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:261
#     float subsurface_selector_out = float(thin_walled);
	mul		___698_subsurface_radius_scaled_out UnitMappedShader_subsurface_radius UnitMappedShader_subsurface_scale 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{261} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:262
#     float base_color_nonnegative_in2_tmp = 0.000000;
	assign		$tmp38 UnitMappedShader_thin_walled 	%line{262} %argrw{"wr"}
	assign		___698_subsurface_selector_out $tmp38 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:263
#     color base_color_nonnegative_out = max(base_color, base_color_nonnegative_in2_tmp);
	assign		___698_base_color_nonnegative_in2_tmp $const5 	%line{263} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:264
#     color coat_attenuation_bg_tmp = color(1.000000, 1.000000, 1.000000);
	assign		$tmp39 ___698_base_color_nonnegative_in2_tmp 	%line{264} %argrw{"wr"}
	max		___698_base_color_nonnegative_out ramp4_out $tmp39 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:265
#     color coat_attenuation_out = mix(coat_attenuation_bg_tmp, coat_color, coat);
	assign		___698_coat_attenuation_bg_tmp $const31 	%line{265} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:266
#     float one_minus_coat_ior_in1_tmp = 1.000000;
	mix		___698_coat_attenuation_out ___698_coat_attenuation_bg_tmp UnitMappedShader_coat_color UnitMappedShader_coat 	%line{266} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:267
#     float one_minus_coat_ior_out = one_minus_coat_ior_in1_tmp - coat_IOR;
	assign		___698_one_minus_coat_ior_in1_tmp $const9 	%line{267} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:268
#     float one_plus_coat_ior_in1_tmp = 1.000000;
	sub		___698_one_minus_coat_ior_out ___698_one_minus_coat_ior_in1_tmp UnitMappedShader_coat_IOR 	%line{268} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:269
#     float one_plus_coat_ior_out = one_plus_coat_ior_in1_tmp + coat_IOR;
	assign		___698_one_plus_coat_ior_in1_tmp $const9 	%line{269} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:270
#     color emission_weight_out = emission_color * emission1;
	add		___698_one_plus_coat_ior_out ___698_one_plus_coat_ior_in1_tmp UnitMappedShader_coat_IOR 	%line{270} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:271
#     color opacity_luminance_out = color(0.0);
	mul		___698_emission_weight_out UnitMappedShader_emission_color UnitMappedShader_emission 	%line{271} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:272
#     mx_luminance_color3(opacity, color(0.272229, 0.674082, 0.053689), opacity_luminance_out);
	assign		___698_opacity_luminance_out $const7 	%line{272} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:273
#     vector coat_tangent_rotate_out = vector(0.0);
	functioncall	$const33 167 	%line{273} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:86
# }
	dot		$tmp41 UnitMappedShader_opacity $const32 	%line{86} %argrw{"wrr"}
	assign		___698_opacity_luminance_out $tmp41 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:274
#     mx_rotate_vector3(tangent, coat_tangent_rotate_degree_out, coat_normal, coat_tangent_rotate_out);
	assign		___698_coat_tangent_rotate_out $const34 	%line{274} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:275
#     color artistic_ior_ior = color(0.0);
	functioncall	$const35 285 	%line{275} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:104
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const36 172 	%line{104} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp42 $const37 $const38 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___679_rotationRadians ___698_coat_tangent_rotate_degree_out $tmp42 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:105
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const39 235 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{105} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:91
#     float s = sin(angle);
	normalize	___678_nAxis geomprop_Nworld_out1 	%line{91} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:92
#     float c = cos(angle);
	sin		___678_s ___679_rotationRadians 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:93
#     float oc = 1.0 - c;
	cos		___678_c ___679_rotationRadians 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:94
# 
	sub		___678_oc $const9 ___678_c 	%line{94} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:96
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp43 ___678_nAxis $const1 	%line{96} %argrw{"wrr"}
	mul		$tmp44 ___678_oc $tmp43 	%argrw{"wrr"}
	compref		$tmp45 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp46 $tmp44 $tmp45 	%argrw{"wrr"}
	add		$tmp47 $tmp46 ___678_c 	%argrw{"wrr"}
	compref		$tmp48 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp49 ___678_oc $tmp48 	%argrw{"wrr"}
	compref		$tmp50 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp51 $tmp49 $tmp50 	%argrw{"wrr"}
	compref		$tmp52 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp53 $tmp52 ___678_s 	%argrw{"wrr"}
	sub		$tmp54 $tmp51 $tmp53 	%argrw{"wrr"}
	compref		$tmp55 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp56 ___678_oc $tmp55 	%argrw{"wrr"}
	compref		$tmp57 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp58 $tmp56 $tmp57 	%argrw{"wrr"}
	compref		$tmp59 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp60 $tmp59 ___678_s 	%argrw{"wrr"}
	add		$tmp61 $tmp58 $tmp60 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:97
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp62 ___678_nAxis $const1 	%line{97} %argrw{"wrr"}
	mul		$tmp63 ___678_oc $tmp62 	%argrw{"wrr"}
	compref		$tmp64 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp65 $tmp63 $tmp64 	%argrw{"wrr"}
	compref		$tmp66 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp67 $tmp66 ___678_s 	%argrw{"wrr"}
	add		$tmp68 $tmp65 $tmp67 	%argrw{"wrr"}
	compref		$tmp69 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp70 ___678_oc $tmp69 	%argrw{"wrr"}
	compref		$tmp71 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp72 $tmp70 $tmp71 	%argrw{"wrr"}
	add		$tmp73 $tmp72 ___678_c 	%argrw{"wrr"}
	compref		$tmp74 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp75 ___678_oc $tmp74 	%argrw{"wrr"}
	compref		$tmp76 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp77 $tmp75 $tmp76 	%argrw{"wrr"}
	compref		$tmp78 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp79 $tmp78 ___678_s 	%argrw{"wrr"}
	sub		$tmp80 $tmp77 $tmp79 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:98
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp81 ___678_nAxis $const4 	%line{98} %argrw{"wrr"}
	mul		$tmp82 ___678_oc $tmp81 	%argrw{"wrr"}
	compref		$tmp83 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp84 $tmp82 $tmp83 	%argrw{"wrr"}
	compref		$tmp85 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp86 $tmp85 ___678_s 	%argrw{"wrr"}
	sub		$tmp87 $tmp84 $tmp86 	%argrw{"wrr"}
	compref		$tmp88 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp89 ___678_oc $tmp88 	%argrw{"wrr"}
	compref		$tmp90 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp91 $tmp89 $tmp90 	%argrw{"wrr"}
	compref		$tmp92 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp93 $tmp92 ___678_s 	%argrw{"wrr"}
	add		$tmp94 $tmp91 $tmp93 	%argrw{"wrr"}
	compref		$tmp95 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp96 ___678_oc $tmp95 	%argrw{"wrr"}
	compref		$tmp97 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp98 $tmp96 $tmp97 	%argrw{"wrr"}
	add		$tmp99 $tmp98 ___678_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:96
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___679_m $tmp47 $tmp54 $tmp61 $const5 $tmp68 $tmp73 $tmp80 $const5 $tmp87 $tmp94 $tmp99 $const5 $const5 $const5 $const5 $const9 	%line{96} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:106
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp100.x geomprop_Tworld_out1 $const1 	%line{106} %argrw{"wrr"}
	compref		$tmp100.y geomprop_Tworld_out1 $const12 	%argrw{"wrr"}
	compref		$tmp100.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp100.w $const9 	%argrw{"wr"}
	functioncall	$const2 284 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp101 ___679_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp102 $tmp101 $tmp100.x 	%argrw{"wrr"}
	mxcompref	$tmp103 ___679_m $const12 $const1 	%argrw{"wrrr"}
	mul		$tmp104 $tmp103 $tmp100.y 	%argrw{"wrr"}
	add		$tmp105 $tmp102 $tmp104 	%argrw{"wrr"}
	mxcompref	$tmp106 ___679_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp107 $tmp106 $tmp100.z 	%argrw{"wrr"}
	add		$tmp108 $tmp105 $tmp107 	%argrw{"wrr"}
	mxcompref	$tmp109 ___679_m $const40 $const1 	%argrw{"wrrr"}
	mul		$tmp110 $tmp109 $tmp100.w 	%argrw{"wrr"}
	add		___679_trans.x $tmp108 $tmp110 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp111 ___679_m $const1 $const12 	%line{416} %argrw{"wrrr"}
	mul		$tmp112 $tmp111 $tmp100.x 	%argrw{"wrr"}
	mxcompref	$tmp113 ___679_m $const12 $const12 	%argrw{"wrrr"}
	mul		$tmp114 $tmp113 $tmp100.y 	%argrw{"wrr"}
	add		$tmp115 $tmp112 $tmp114 	%argrw{"wrr"}
	mxcompref	$tmp116 ___679_m $const4 $const12 	%argrw{"wrrr"}
	mul		$tmp117 $tmp116 $tmp100.z 	%argrw{"wrr"}
	add		$tmp118 $tmp115 $tmp117 	%argrw{"wrr"}
	mxcompref	$tmp119 ___679_m $const40 $const12 	%argrw{"wrrr"}
	mul		$tmp120 $tmp119 $tmp100.w 	%argrw{"wrr"}
	add		___679_trans.y $tmp118 $tmp120 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp121 ___679_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp122 $tmp121 $tmp100.x 	%argrw{"wrr"}
	mxcompref	$tmp123 ___679_m $const12 $const4 	%argrw{"wrrr"}
	mul		$tmp124 $tmp123 $tmp100.y 	%argrw{"wrr"}
	add		$tmp125 $tmp122 $tmp124 	%argrw{"wrr"}
	mxcompref	$tmp126 ___679_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp127 $tmp126 $tmp100.z 	%argrw{"wrr"}
	add		$tmp128 $tmp125 $tmp127 	%argrw{"wrr"}
	mxcompref	$tmp129 ___679_m $const40 $const4 	%argrw{"wrrr"}
	mul		$tmp130 $tmp129 $tmp100.w 	%argrw{"wrr"}
	add		___679_trans.z $tmp128 $tmp130 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp131 ___679_m $const1 $const40 	%line{418} %argrw{"wrrr"}
	mul		$tmp132 $tmp131 $tmp100.x 	%argrw{"wrr"}
	mxcompref	$tmp133 ___679_m $const12 $const40 	%argrw{"wrrr"}
	mul		$tmp134 $tmp133 $tmp100.y 	%argrw{"wrr"}
	add		$tmp135 $tmp132 $tmp134 	%argrw{"wrr"}
	mxcompref	$tmp136 ___679_m $const4 $const40 	%argrw{"wrrr"}
	mul		$tmp137 $tmp136 $tmp100.z 	%argrw{"wrr"}
	add		$tmp138 $tmp135 $tmp137 	%argrw{"wrr"}
	mxcompref	$tmp139 ___679_m $const40 $const40 	%argrw{"wrrr"}
	mul		$tmp140 $tmp139 $tmp100.w 	%argrw{"wrr"}
	add		___679_trans.w $tmp138 $tmp140 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:107
# }
	vector		___698_coat_tangent_rotate_out ___679_trans.x ___679_trans.y ___679_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{107} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:276
#     color artistic_ior_extinction = color(0.0);
	assign		___698_artistic_ior_ior $const7 	%line{276} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:277
#     mx_artistic_ior(metal_reflectivity_out, metal_edgecolor_out, artistic_ior_ior, artistic_ior_extinction);
	assign		___698_artistic_ior_extinction $const7 	%line{277} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:278
#     float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
	functioncall	$const41 312 	%line{278} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:115
#     color r_sqrt = sqrt(r);
	assign		$tmp141 $const5 	%line{115} %argrw{"wr"}
	assign		$tmp142 $const42 	%argrw{"wr"}
	functioncall	$const10 293 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:140
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp143 ___698_metal_reflectivity_out $tmp142 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{140} %argrw{"wrr"}
	max		___680_r $tmp143 $tmp141 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:116
#     color n_min = (1.0 - r) / (1.0 + r);
	sqrt		___680_r_sqrt ___680_r 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{116} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:117
#     color n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
	sub		$tmp144 $const9 ___680_r 	%line{117} %argrw{"wrr"}
	add		$tmp145 $const9 ___680_r 	%argrw{"wrr"}
	div		___680_n_min $tmp144 $tmp145 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:118
#     ior = mix(n_max, n_min, edge_color);
	add		$tmp146 $const9 ___680_r_sqrt 	%line{118} %argrw{"wrr"}
	sub		$tmp147 $const9 ___680_r_sqrt 	%argrw{"wrr"}
	div		___680_n_max $tmp146 $tmp147 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:119
# 
	mix		___698_artistic_ior_ior ___680_n_max ___680_n_min ___698_metal_edgecolor_out 	%line{119} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:121
#     color nm1 = ior - 1.0;
	add		___680_np1 ___698_artistic_ior_ior $const9 	%line{121} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:122
#     color k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
	sub		___680_nm1 ___698_artistic_ior_ior $const9 	%line{122} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:123
#     k2 = max(k2, 0.0);
	mul		$tmp148 ___680_np1 ___680_np1 	%line{123} %argrw{"wrr"}
	mul		$tmp149 $tmp148 ___680_r 	%argrw{"wrr"}
	mul		$tmp150 ___680_nm1 ___680_nm1 	%argrw{"wrr"}
	sub		$tmp151 $tmp149 $tmp150 	%argrw{"wrr"}
	sub		$tmp152 $const9 ___680_r 	%argrw{"wrr"}
	div		___680_k2 $tmp151 $tmp152 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:124
#     extinction = sqrt(k2);
	assign		$tmp153 $const5 	%line{124} %argrw{"wr"}
	max		___680_k2 ___680_k2 $tmp153 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:125
# }
	sqrt		___698_artistic_ior_extinction ___680_k2 	%line{125} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:279
#     vector tangent_rotate_out = vector(0.0);
	mul		___698_coat_affect_roughness_multiply2_out ___698_coat_affect_roughness_multiply1_out UnitMappedShader_coat_roughness 	%line{279} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:280
#     mx_rotate_vector3(tangent, tangent_rotate_degree_out, normal1, tangent_rotate_out);
	assign		___698_tangent_rotate_out $const34 	%line{280} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:281
#     float transmission_roughness_clamped_low_tmp = 0.000000;
	functioncall	$const35 431 	%line{281} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:104
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const36 318 	%line{104} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp154 $const37 $const38 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___679_rotationRadians ___698_tangent_rotate_degree_out $tmp154 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:105
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const39 381 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{105} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:91
#     float s = sin(angle);
	normalize	___678_nAxis geomprop_Nworld_out1 	%line{91} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:92
#     float c = cos(angle);
	sin		___678_s ___679_rotationRadians 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:93
#     float oc = 1.0 - c;
	cos		___678_c ___679_rotationRadians 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:94
# 
	sub		___678_oc $const9 ___678_c 	%line{94} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:96
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp155 ___678_nAxis $const1 	%line{96} %argrw{"wrr"}
	mul		$tmp156 ___678_oc $tmp155 	%argrw{"wrr"}
	compref		$tmp157 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp158 $tmp156 $tmp157 	%argrw{"wrr"}
	add		$tmp159 $tmp158 ___678_c 	%argrw{"wrr"}
	compref		$tmp160 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp161 ___678_oc $tmp160 	%argrw{"wrr"}
	compref		$tmp162 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp163 $tmp161 $tmp162 	%argrw{"wrr"}
	compref		$tmp164 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp165 $tmp164 ___678_s 	%argrw{"wrr"}
	sub		$tmp166 $tmp163 $tmp165 	%argrw{"wrr"}
	compref		$tmp167 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp168 ___678_oc $tmp167 	%argrw{"wrr"}
	compref		$tmp169 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp170 $tmp168 $tmp169 	%argrw{"wrr"}
	compref		$tmp171 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp172 $tmp171 ___678_s 	%argrw{"wrr"}
	add		$tmp173 $tmp170 $tmp172 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:97
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp174 ___678_nAxis $const1 	%line{97} %argrw{"wrr"}
	mul		$tmp175 ___678_oc $tmp174 	%argrw{"wrr"}
	compref		$tmp176 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp177 $tmp175 $tmp176 	%argrw{"wrr"}
	compref		$tmp178 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp179 $tmp178 ___678_s 	%argrw{"wrr"}
	add		$tmp180 $tmp177 $tmp179 	%argrw{"wrr"}
	compref		$tmp181 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp182 ___678_oc $tmp181 	%argrw{"wrr"}
	compref		$tmp183 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp184 $tmp182 $tmp183 	%argrw{"wrr"}
	add		$tmp185 $tmp184 ___678_c 	%argrw{"wrr"}
	compref		$tmp186 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp187 ___678_oc $tmp186 	%argrw{"wrr"}
	compref		$tmp188 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp189 $tmp187 $tmp188 	%argrw{"wrr"}
	compref		$tmp190 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp191 $tmp190 ___678_s 	%argrw{"wrr"}
	sub		$tmp192 $tmp189 $tmp191 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:98
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp193 ___678_nAxis $const4 	%line{98} %argrw{"wrr"}
	mul		$tmp194 ___678_oc $tmp193 	%argrw{"wrr"}
	compref		$tmp195 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp196 $tmp194 $tmp195 	%argrw{"wrr"}
	compref		$tmp197 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp198 $tmp197 ___678_s 	%argrw{"wrr"}
	sub		$tmp199 $tmp196 $tmp198 	%argrw{"wrr"}
	compref		$tmp200 ___678_nAxis $const12 	%argrw{"wrr"}
	mul		$tmp201 ___678_oc $tmp200 	%argrw{"wrr"}
	compref		$tmp202 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp203 $tmp201 $tmp202 	%argrw{"wrr"}
	compref		$tmp204 ___678_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp205 $tmp204 ___678_s 	%argrw{"wrr"}
	add		$tmp206 $tmp203 $tmp205 	%argrw{"wrr"}
	compref		$tmp207 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp208 ___678_oc $tmp207 	%argrw{"wrr"}
	compref		$tmp209 ___678_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp210 $tmp208 $tmp209 	%argrw{"wrr"}
	add		$tmp211 $tmp210 ___678_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:96
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___679_m $tmp159 $tmp166 $tmp173 $const5 $tmp180 $tmp185 $tmp192 $const5 $tmp199 $tmp206 $tmp211 $const5 $const5 $const5 $const5 $const9 	%line{96} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:106
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp212.x geomprop_Tworld_out1 $const1 	%line{106} %argrw{"wrr"}
	compref		$tmp212.y geomprop_Tworld_out1 $const12 	%argrw{"wrr"}
	compref		$tmp212.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp212.w $const9 	%argrw{"wr"}
	functioncall	$const2 430 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp213 ___679_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp214 $tmp213 $tmp212.x 	%argrw{"wrr"}
	mxcompref	$tmp215 ___679_m $const12 $const1 	%argrw{"wrrr"}
	mul		$tmp216 $tmp215 $tmp212.y 	%argrw{"wrr"}
	add		$tmp217 $tmp214 $tmp216 	%argrw{"wrr"}
	mxcompref	$tmp218 ___679_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp219 $tmp218 $tmp212.z 	%argrw{"wrr"}
	add		$tmp220 $tmp217 $tmp219 	%argrw{"wrr"}
	mxcompref	$tmp221 ___679_m $const40 $const1 	%argrw{"wrrr"}
	mul		$tmp222 $tmp221 $tmp212.w 	%argrw{"wrr"}
	add		___679_trans.x $tmp220 $tmp222 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp223 ___679_m $const1 $const12 	%line{416} %argrw{"wrrr"}
	mul		$tmp224 $tmp223 $tmp212.x 	%argrw{"wrr"}
	mxcompref	$tmp225 ___679_m $const12 $const12 	%argrw{"wrrr"}
	mul		$tmp226 $tmp225 $tmp212.y 	%argrw{"wrr"}
	add		$tmp227 $tmp224 $tmp226 	%argrw{"wrr"}
	mxcompref	$tmp228 ___679_m $const4 $const12 	%argrw{"wrrr"}
	mul		$tmp229 $tmp228 $tmp212.z 	%argrw{"wrr"}
	add		$tmp230 $tmp227 $tmp229 	%argrw{"wrr"}
	mxcompref	$tmp231 ___679_m $const40 $const12 	%argrw{"wrrr"}
	mul		$tmp232 $tmp231 $tmp212.w 	%argrw{"wrr"}
	add		___679_trans.y $tmp230 $tmp232 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp233 ___679_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp234 $tmp233 $tmp212.x 	%argrw{"wrr"}
	mxcompref	$tmp235 ___679_m $const12 $const4 	%argrw{"wrrr"}
	mul		$tmp236 $tmp235 $tmp212.y 	%argrw{"wrr"}
	add		$tmp237 $tmp234 $tmp236 	%argrw{"wrr"}
	mxcompref	$tmp238 ___679_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp239 $tmp238 $tmp212.z 	%argrw{"wrr"}
	add		$tmp240 $tmp237 $tmp239 	%argrw{"wrr"}
	mxcompref	$tmp241 ___679_m $const40 $const4 	%argrw{"wrrr"}
	mul		$tmp242 $tmp241 $tmp212.w 	%argrw{"wrr"}
	add		___679_trans.z $tmp240 $tmp242 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp243 ___679_m $const1 $const40 	%line{418} %argrw{"wrrr"}
	mul		$tmp244 $tmp243 $tmp212.x 	%argrw{"wrr"}
	mxcompref	$tmp245 ___679_m $const12 $const40 	%argrw{"wrrr"}
	mul		$tmp246 $tmp245 $tmp212.y 	%argrw{"wrr"}
	add		$tmp247 $tmp244 $tmp246 	%argrw{"wrr"}
	mxcompref	$tmp248 ___679_m $const4 $const40 	%argrw{"wrrr"}
	mul		$tmp249 $tmp248 $tmp212.z 	%argrw{"wrr"}
	add		$tmp250 $tmp247 $tmp249 	%argrw{"wrr"}
	mxcompref	$tmp251 ___679_m $const40 $const40 	%argrw{"wrrr"}
	mul		$tmp252 $tmp251 $tmp212.w 	%argrw{"wrr"}
	add		___679_trans.w $tmp250 $tmp252 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:107
# }
	vector		___698_tangent_rotate_out ___679_trans.x ___679_trans.y ___679_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{107} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:282
#     float transmission_roughness_clamped_high_tmp = 1.000000;
	assign		___698_transmission_roughness_clamped_low_tmp $const5 	%line{282} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:283
#     float transmission_roughness_clamped_out = clamp(transmission_roughness_add_out, transmission_roughness_clamped_low_tmp, transmission_roughness_clamped_high_tmp);
	assign		___698_transmission_roughness_clamped_high_tmp $const9 	%line{283} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:284
#     float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
	functioncall	$const10 436 	%line{284} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp253 ___698_transmission_roughness_add_out ___698_transmission_roughness_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___698_transmission_roughness_clamped_out $tmp253 ___698_transmission_roughness_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:285
#     float coat_ior_to_F0_sqrt_out = one_minus_coat_ior_out / one_plus_coat_ior_out;
	mul		___698_coat_gamma_multiply_out ___698_coat_clamped_out UnitMappedShader_coat_affect_color 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{285} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:286
#     int opacity_luminance_float_index_tmp = 0;
	div		___698_coat_ior_to_F0_sqrt_out ___698_one_minus_coat_ior_out ___698_one_plus_coat_ior_out 	%line{286} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:287
#     float opacity_luminance_float_out = mx_extract(opacity_luminance_out, opacity_luminance_float_index_tmp);
	assign		___698_opacity_luminance_float_index_tmp $const1 	%line{287} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:288
#     vector coat_tangent_rotate_normalize_out = normalize(coat_tangent_rotate_out);
	functioncall	$const11 441 	%line{288} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___698_opacity_luminance_float_out ___698_opacity_luminance_out ___698_opacity_luminance_float_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:289
#     float coat_affected_roughness_fg_tmp = 1.000000;
	normalize	___698_coat_tangent_rotate_normalize_out ___698_coat_tangent_rotate_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{289} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:290
#     float coat_affected_roughness_out = mix(specular_roughness, coat_affected_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___698_coat_affected_roughness_fg_tmp $const9 	%line{290} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:291
#     vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
	mix		___698_coat_affected_roughness_out UnitMappedShader_specular_roughness ___698_coat_affected_roughness_fg_tmp ___698_coat_affect_roughness_multiply2_out 	%line{291} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:292
#     float coat_affected_transmission_roughness_fg_tmp = 1.000000;
	normalize	___698_tangent_rotate_normalize_out ___698_tangent_rotate_out 	%line{292} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:293
#     float coat_affected_transmission_roughness_out = mix(transmission_roughness_clamped_out, coat_affected_transmission_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___698_coat_affected_transmission_roughness_fg_tmp $const9 	%line{293} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:294
#     float coat_gamma_in2_tmp = 1.000000;
	mix		___698_coat_affected_transmission_roughness_out ___698_transmission_roughness_clamped_out ___698_coat_affected_transmission_roughness_fg_tmp ___698_coat_affect_roughness_multiply2_out 	%line{294} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:295
#     float coat_gamma_out = coat_gamma_multiply_out + coat_gamma_in2_tmp;
	assign		___698_coat_gamma_in2_tmp $const9 	%line{295} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:296
#     float coat_ior_to_F0_out = coat_ior_to_F0_sqrt_out * coat_ior_to_F0_sqrt_out;
	add		___698_coat_gamma_out ___698_coat_gamma_multiply_out ___698_coat_gamma_in2_tmp 	%line{296} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:297
#     float coat_tangent_value2_tmp = 0.000000;
	mul		___698_coat_ior_to_F0_out ___698_coat_ior_to_F0_sqrt_out ___698_coat_ior_to_F0_sqrt_out 	%line{297} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:298
#     vector coat_tangent_out = mx_ternary(coat_anisotropy > coat_tangent_value2_tmp, coat_tangent_rotate_normalize_out, tangent);
	assign		___698_coat_tangent_value2_tmp $const5 	%line{298} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:299
#     vector2 main_roughness_out = vector2(0.0, 0.0);
	gt		$tmp254 UnitMappedShader_coat_anisotropy ___698_coat_tangent_value2_tmp 	%line{299} %argrw{"wrr"}
	functioncall	$const43 458 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp254 456 458 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___698_coat_tangent_out ___698_coat_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___698_coat_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:300
#     mx_roughness_anisotropy(coat_affected_roughness_out, specular_anisotropy, main_roughness_out);
	assign		___698_main_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{300} %argrw{"wr"}
	assign		___698_main_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:301
#     float main_tangent_value2_tmp = 0.000000;
	functioncall	$const27 479 	%line{301} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:70
#     if (anisotropy > 0.0)
	mul		$tmp255 ___698_coat_affected_roughness_out ___698_coat_affected_roughness_out 	%line{70} %argrw{"wrr"}
	functioncall	$const10 465 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp256 $tmp255 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___674_roughness_sqr $tmp256 $const28 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:71
#     {
	gt		$tmp257 UnitMappedShader_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{71} %argrw{"wrr"}
	if		$tmp257 477 479 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:73
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const10 470 	%line{73} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp259 UnitMappedShader_specular_anisotropy $const29 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp258 $tmp259 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:73
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp260 $const9 $tmp258 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{73} %argrw{"wrr"}
	sqrt		___675_aspect $tmp260 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:74
#         result.y = roughness_sqr * aspect;
	div		$tmp261 ___674_roughness_sqr ___675_aspect 	%line{74} %argrw{"wrr"}
	min		___698_main_roughness_out.x $tmp261 $const9 	%argrw{"wrr"}
	assign		___698_main_roughness_out.x ___698_main_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:75
#     }
	mul		___698_main_roughness_out.y ___674_roughness_sqr ___675_aspect 	%line{75} %argrw{"wrr"}
	assign		___698_main_roughness_out.y ___698_main_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:79
#         result.y = roughness_sqr;
	assign		___698_main_roughness_out.x ___674_roughness_sqr 	%line{79} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:80
#     }
	assign		___698_main_roughness_out.y ___674_roughness_sqr 	%line{80} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:302
#     vector main_tangent_out = mx_ternary(specular_anisotropy > main_tangent_value2_tmp, tangent_rotate_normalize_out, tangent);
	assign		___698_main_tangent_value2_tmp $const5 	%line{302} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:303
#     vector2 transmission_roughness_out = vector2(0.0, 0.0);
	gt		$tmp262 UnitMappedShader_specular_anisotropy ___698_main_tangent_value2_tmp 	%line{303} %argrw{"wrr"}
	functioncall	$const43 487 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp262 485 487 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___698_main_tangent_out ___698_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___698_main_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:304
#     mx_roughness_anisotropy(coat_affected_transmission_roughness_out, specular_anisotropy, transmission_roughness_out);
	assign		___698_transmission_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{304} %argrw{"wr"}
	assign		___698_transmission_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:305
#     color coat_affected_subsurface_color_out = pow(subsurface_color_nonnegative_out, coat_gamma_out);
	functioncall	$const27 508 	%line{305} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:70
#     if (anisotropy > 0.0)
	mul		$tmp263 ___698_coat_affected_transmission_roughness_out ___698_coat_affected_transmission_roughness_out 	%line{70} %argrw{"wrr"}
	functioncall	$const10 494 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp264 $tmp263 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___674_roughness_sqr $tmp264 $const28 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:71
#     {
	gt		$tmp265 UnitMappedShader_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{71} %argrw{"wrr"}
	if		$tmp265 506 508 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:73
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const10 499 	%line{73} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp267 UnitMappedShader_specular_anisotropy $const29 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp266 $tmp267 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:73
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp268 $const9 $tmp266 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{73} %argrw{"wrr"}
	sqrt		___675_aspect $tmp268 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:74
#         result.y = roughness_sqr * aspect;
	div		$tmp269 ___674_roughness_sqr ___675_aspect 	%line{74} %argrw{"wrr"}
	min		___698_transmission_roughness_out.x $tmp269 $const9 	%argrw{"wrr"}
	assign		___698_transmission_roughness_out.x ___698_transmission_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:75
#     }
	mul		___698_transmission_roughness_out.y ___674_roughness_sqr ___675_aspect 	%line{75} %argrw{"wrr"}
	assign		___698_transmission_roughness_out.y ___698_transmission_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:79
#         result.y = roughness_sqr;
	assign		___698_transmission_roughness_out.x ___674_roughness_sqr 	%line{79} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:80
#     }
	assign		___698_transmission_roughness_out.y ___674_roughness_sqr 	%line{80} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:306
#     color coat_affected_diffuse_color_out = pow(base_color_nonnegative_out, coat_gamma_out);
	pow		___698_coat_affected_subsurface_color_out ___698_subsurface_color_nonnegative_out ___698_coat_gamma_out 	%line{306} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:307
#     float one_minus_coat_ior_to_F0_in1_tmp = 1.000000;
	pow		___698_coat_affected_diffuse_color_out ___698_base_color_nonnegative_out ___698_coat_gamma_out 	%line{307} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:308
#     float one_minus_coat_ior_to_F0_out = one_minus_coat_ior_to_F0_in1_tmp - coat_ior_to_F0_out;
	assign		___698_one_minus_coat_ior_to_F0_in1_tmp $const9 	%line{308} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:309
#     color emission_color0_out = color(0.0);
	sub		___698_one_minus_coat_ior_to_F0_out ___698_one_minus_coat_ior_to_F0_in1_tmp ___698_coat_ior_to_F0_out 	%line{309} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:310
#     NG_convert_float_color3(one_minus_coat_ior_to_F0_out, emission_color0_out);
	assign		___698_emission_color0_out $const7 	%line{310} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:311
#     BSDF coat_bsdf_out = null_closure;
	functioncall	$const44 516 	%line{311} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:146
#     out = combine_out;
	color		___683_combine_out ___698_one_minus_coat_ior_to_F0_out ___698_one_minus_coat_ior_to_F0_out ___698_one_minus_coat_ior_to_F0_out 	%line{146} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:147
# }
	assign		___698_emission_color0_out ___683_combine_out 	%line{147} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:312
#     mx_dielectric_bsdf(coat, color(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, 0.000000, 1.500000, coat_normal, coat_tangent_out, "ggx", "R", coat_bsdf_out);
	assign		___698_coat_bsdf_out ___698_null_closure 	%line{312} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:313
#     float metal_bsdf_weight_tmp = 1.000000;
	functioncall	$const48 528 	%line{313} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:130
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp271 $const47 $const49 	%line{130} %argrw{"wrr"}
	if		$tmp271 521 522 	%argrw{"r"}
	assign		___681_reflection_tint $const7 	%argrw{"wr"}
	assign		___681_reflection_tint $const31 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:131
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp272 $const47 $const47 	%line{131} %argrw{"wrr"}
	if		$tmp272 525 526 	%argrw{"r"}
	assign		___681_transmission_tint $const7 	%argrw{"wr"}
	assign		___681_transmission_tint $const31 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:132
# }
	closure		$tmp273 $const52 geomprop_Nworld_out1 ___698_coat_tangent_out ___681_reflection_tint ___681_transmission_tint ___698_coat_roughness_vector_out.x ___698_coat_roughness_vector_out.y UnitMappedShader_coat_IOR $const46 $const50 $const5 $const51 $const45 	%line{132} %argrw{"wrrrrrrrrrrrrr"}
	mul		___698_coat_bsdf_out $tmp273 UnitMappedShader_coat 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:314
#     string metal_bsdf_distribution_tmp = "ggx";
	assign		___698_metal_bsdf_weight_tmp $const9 	%line{314} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:315
#     BSDF metal_bsdf_out = metal_bsdf_weight_tmp * conductor_bsdf(normal1, main_tangent_out, main_roughness_out.x, main_roughness_out.y, artistic_ior_ior, artistic_ior_extinction, metal_bsdf_distribution_tmp, "thinfilm_thickness", thin_film_thickness, "thinfilm_ior", thin_film_IOR);
	assign		___698_metal_bsdf_distribution_tmp $const46 	%line{315} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:316
#     BSDF specular_bsdf_out = null_closure;
	closure		$tmp274 $const53 geomprop_Nworld_out1 ___698_main_tangent_out ___698_main_roughness_out.x ___698_main_roughness_out.y ___698_artistic_ior_ior ___698_artistic_ior_extinction ___698_metal_bsdf_distribution_tmp $const50 UnitMappedShader_thin_film_thickness $const51 UnitMappedShader_thin_film_IOR 	%line{316} %argrw{"wrrrrrrrrrrrr"}
	mul		___698_metal_bsdf_out $tmp274 ___698_metal_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:317
#     mx_dielectric_bsdf(specular, specular_color, specular_IOR, main_roughness_out, thin_film_thickness, thin_film_IOR, normal1, main_tangent_out, "ggx", "R", specular_bsdf_out);
	assign		___698_specular_bsdf_out ___698_null_closure 	%line{317} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:318
#     BSDF transmission_bsdf_out = null_closure;
	functioncall	$const48 544 	%line{318} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:130
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp275 $const47 $const49 	%line{130} %argrw{"wrr"}
	if		$tmp275 537 538 	%argrw{"r"}
	assign		___681_reflection_tint $const7 	%argrw{"wr"}
	assign		___681_reflection_tint ramp4_out 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:131
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp276 $const47 $const47 	%line{131} %argrw{"wrr"}
	if		$tmp276 541 542 	%argrw{"r"}
	assign		___681_transmission_tint $const7 	%argrw{"wr"}
	assign		___681_transmission_tint ramp4_out 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:132
# }
	closure		$tmp277 $const52 geomprop_Nworld_out1 ___698_main_tangent_out ___681_reflection_tint ___681_transmission_tint ___698_main_roughness_out.x ___698_main_roughness_out.y UnitMappedShader_specular_IOR $const46 $const50 UnitMappedShader_thin_film_thickness $const51 UnitMappedShader_thin_film_IOR 	%line{132} %argrw{"wrrrrrrrrrrrrr"}
	mul		___698_specular_bsdf_out $tmp277 UnitMappedShader_specular 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:319
#     mx_dielectric_bsdf(1.000000, transmission_color, specular_IOR, transmission_roughness_out, 0.000000, 1.500000, normal1, main_tangent_out, "ggx", "T", transmission_bsdf_out);
	assign		___698_transmission_bsdf_out ___698_null_closure 	%line{319} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:320
#     BSDF sheen_bsdf_out = sheen1 * sheen_bsdf(normal1, sheen_color, sheen_roughness);
	functioncall	$const48 556 	%line{320} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:130
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp278 $const49 $const49 	%line{130} %argrw{"wrr"}
	if		$tmp278 549 550 	%argrw{"r"}
	assign		___681_reflection_tint $const7 	%argrw{"wr"}
	assign		___681_reflection_tint UnitMappedShader_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:131
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp279 $const49 $const47 	%line{131} %argrw{"wrr"}
	if		$tmp279 553 554 	%argrw{"r"}
	assign		___681_transmission_tint $const7 	%argrw{"wr"}
	assign		___681_transmission_tint UnitMappedShader_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:132
# }
	closure		$tmp280 $const52 geomprop_Nworld_out1 ___698_main_tangent_out ___681_reflection_tint ___681_transmission_tint ___698_transmission_roughness_out.x ___698_transmission_roughness_out.y UnitMappedShader_specular_IOR $const46 $const50 $const5 $const51 $const45 	%line{132} %argrw{"wrrrrrrrrrrrrr"}
	mul		___698_transmission_bsdf_out $tmp280 $const9 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:321
#     float translucent_bsdf_weight_tmp = 1.000000;
	closure		$tmp281 $const54 geomprop_Nworld_out1 UnitMappedShader_sheen_color UnitMappedShader_sheen_roughness 	%line{321} %argrw{"wrrrr"}
	mul		___698_sheen_bsdf_out $tmp281 UnitMappedShader_sheen 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:322
#     BSDF translucent_bsdf_out = translucent_bsdf_weight_tmp * translucent_bsdf(normal1, coat_affected_subsurface_color_out);
	assign		___698_translucent_bsdf_weight_tmp $const9 	%line{322} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:323
#     BSDF subsurface_bsdf_out = null_closure;
	closure		$tmp282 $const55 geomprop_Nworld_out1 ___698_coat_affected_subsurface_color_out 	%line{323} %argrw{"wrrr"}
	mul		___698_translucent_bsdf_out $tmp282 ___698_translucent_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:324
#     mx_subsurface_bsdf(1.000000, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal1, subsurface_bsdf_out);
	assign		___698_subsurface_bsdf_out ___698_null_closure 	%line{324} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:325
#     BSDF selected_subsurface_bsdf_out = mix(subsurface_bsdf_out, translucent_bsdf_out, subsurface_selector_out);
	functioncall	$const56 565 	%line{325} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:140
# #endif
	mul		$tmp283 $const9 ___698_coat_affected_subsurface_color_out 	%line{140} %argrw{"wrr"}
	closure		___698_subsurface_bsdf_out $const57 geomprop_Nworld_out1 $tmp283 $const9 ___698_subsurface_radius_scaled_out UnitMappedShader_subsurface_anisotropy 	%argrw{"wrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:326
#     BSDF diffuse_bsdf_out = base * oren_nayar_diffuse_bsdf(normal1, coat_affected_diffuse_color_out, diffuse_roughness);
	functioncall	$const58 570 	%line{326} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp284 $const9 ___698_subsurface_selector_out 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp285 ___698_subsurface_bsdf_out $tmp284 	%argrw{"wrr"}
	mul		$tmp286 ___698_translucent_bsdf_out ___698_subsurface_selector_out 	%argrw{"wrr"}
	add		___698_selected_subsurface_bsdf_out $tmp285 $tmp286 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:327
#     BSDF subsurface_mix_out = mix(diffuse_bsdf_out, selected_subsurface_bsdf_out, subsurface1);
	closure		$tmp287 $const59 geomprop_Nworld_out1 ___698_coat_affected_diffuse_color_out UnitMappedShader_diffuse_roughness 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{327} %argrw{"wrrrr"}
	mul		___698_diffuse_bsdf_out $tmp287 tiledimage_out 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:328
#     BSDF sheen_layer_out = layer(sheen_bsdf_out, subsurface_mix_out);
	functioncall	$const58 577 	%line{328} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp288 $const9 UnitMappedShader_subsurface 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp289 ___698_diffuse_bsdf_out $tmp288 	%argrw{"wrr"}
	mul		$tmp290 ___698_selected_subsurface_bsdf_out UnitMappedShader_subsurface 	%argrw{"wrr"}
	add		___698_subsurface_mix_out $tmp289 $tmp290 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:329
#     BSDF transmission_mix_out = mix(sheen_layer_out, transmission_bsdf_out, transmission);
	closure		___698_sheen_layer_out $const60 ___698_sheen_bsdf_out ___698_subsurface_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{329} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:330
#     BSDF specular_layer_out = layer(specular_bsdf_out, transmission_mix_out);
	functioncall	$const58 583 	%line{330} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp291 $const9 UnitMappedShader_transmission 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp292 ___698_sheen_layer_out $tmp291 	%argrw{"wrr"}
	mul		$tmp293 ___698_transmission_bsdf_out UnitMappedShader_transmission 	%argrw{"wrr"}
	add		___698_transmission_mix_out $tmp292 $tmp293 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:331
#     BSDF metalness_mix_out = mix(specular_layer_out, metal_bsdf_out, metalness);
	closure		___698_specular_layer_out $const60 ___698_specular_bsdf_out ___698_transmission_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{331} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:332
#     BSDF thin_film_layer_attenuated_out = (coat_attenuation_out * metalness_mix_out);
	functioncall	$const58 589 	%line{332} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp294 $const9 UnitMappedShader_metalness 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp295 ___698_specular_layer_out $tmp294 	%argrw{"wrr"}
	mul		$tmp296 ___698_metal_bsdf_out UnitMappedShader_metalness 	%argrw{"wrr"}
	add		___698_metalness_mix_out $tmp295 $tmp296 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:333
#     BSDF coat_layer_out = layer(coat_bsdf_out, thin_film_layer_attenuated_out);
	mul		___698_thin_film_layer_attenuated_out ___698_metalness_mix_out ___698_coat_attenuation_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{333} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:334
#     EDF emission_edf_out = uniform_edf(emission_weight_out);
	closure		___698_coat_layer_out $const60 ___698_coat_bsdf_out ___698_thin_film_layer_attenuated_out 	%line{334} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:335
#     EDF coat_tinted_emission_edf_out = (coat_color * emission_edf_out);
	closure		___698_emission_edf_out $const61 ___698_emission_weight_out 	%line{335} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:336
#     EDF coat_emission_edf_out = null_closure;
	mul		___698_coat_tinted_emission_edf_out ___698_emission_edf_out UnitMappedShader_coat_color 	%line{336} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:337
#     mx_generalized_schlick_edf(emission_color0_out, color(0.000000, 0.000000, 0.000000), 5.000000, coat_tinted_emission_edf_out, coat_emission_edf_out);
	assign		___698_coat_emission_edf_out ___698_null_closure 	%line{337} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:338
#     EDF blended_coat_emission_edf_out = mix(emission_edf_out, coat_emission_edf_out, coat);
	functioncall	$const63 606 	%line{338} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:231
#     color f = mx_fresnel_schlick(NdotV, color0, color90, exponent);
	neg		$tmp299 I 	%line{231} %argrw{"wr"}
	dot		$tmp298 N $tmp299 	%argrw{"wrr"}
	fabs		___696_NdotV $tmp298 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:232
#     result = base * f;
	functioncall	$const64 605 	%line{232} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:225
#     return mix(f0, f90, pow(x, exponent));
	sub		$tmp300 $const9 ___696_NdotV 	%line{225} %argrw{"wrr"}
	functioncall	$const10 603 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp301 $tmp300 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___695_x $tmp301 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:226
# }
	pow		$tmp302 ___695_x $const62 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{226} %argrw{"wrr"}
	mix		___696_f ___698_emission_color0_out $const7 $tmp302 	%argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:233
# }
	mul		___698_coat_emission_edf_out ___698_coat_tinted_emission_edf_out ___696_f 	%line{233} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:339
#     surfaceshader shader_constructor_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const58 611 	%line{339} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp303 $const9 UnitMappedShader_coat 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp304 ___698_emission_edf_out $tmp303 	%argrw{"wrr"}
	mul		$tmp305 ___698_coat_emission_edf_out UnitMappedShader_coat 	%argrw{"wrr"}
	add		___698_blended_coat_emission_edf_out $tmp304 $tmp305 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:340
#     mx_surface(coat_layer_out, blended_coat_emission_edf_out, opacity_luminance_float_out, 0, shader_constructor_out);
	assign		___698_shader_constructor_out.bsdf ___698_null_closure 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{340} %argrw{"wr"}
	assign		___698_shader_constructor_out.edf ___698_null_closure 	%argrw{"wr"}
	assign		___698_shader_constructor_out.opacity $const9 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:341
#     out = shader_constructor_out;
	functioncall	$const65 621 	%line{341} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:238
#     result.edf     = edf;
	assign		___698_shader_constructor_out.bsdf ___698_coat_layer_out 	%line{238} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:239
#     result.opacity = clamp(opacity, 0.0, 1.0);
	assign		___698_shader_constructor_out.edf ___698_blended_coat_emission_edf_out 	%line{239} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:240
# }
	functioncall	$const10 620 	%line{240} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp306 ___698_opacity_luminance_float_out $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___698_shader_constructor_out.opacity $tmp306 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:240
# }
	assign		___698_shader_constructor_out.opacity ___698_shader_constructor_out.opacity 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{240} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:342
# }
	assign		UnitMappedShader_out.bsdf ___698_shader_constructor_out.bsdf 	%line{342} %argrw{"wr"}
	assign		UnitMappedShader_out.edf ___698_shader_constructor_out.edf 	%argrw{"wr"}
	assign		UnitMappedShader_out.opacity ___698_shader_constructor_out.opacity 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:758
#     out = UnitMappedShaderMaterial_out;
	functioncall	$const66 634 	%line{758} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:347
#     return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
	functioncall	$const10 628 	%line{347} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp307 UnitMappedShader_out.opacity $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___699_opacity_weight $tmp307 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:348
# }
	add		$tmp308 UnitMappedShader_out.bsdf UnitMappedShader_out.edf 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl"} %line{348} %argrw{"wrr"}
	mul		$tmp309 $tmp308 ___699_opacity_weight 	%argrw{"wrr"}
	closure		$tmp310 $const67 	%argrw{"wr"}
	sub		$tmp311 $const9 ___699_opacity_weight 	%argrw{"wrr"}
	mul		$tmp312 $tmp310 $tmp311 	%argrw{"wrr"}
	add		UnitMappedShaderMaterial_out $tmp309 $tmp312 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\mapped_surfaceshader\\UnitMappedShaderMaterial.osl:759
# }
	assign		out UnitMappedShaderMaterial_out 	%line{759} %argrw{"wr"}
	end
