#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/TestSuite/pbrlib/surfaceshader\\surface_ops_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "nodegraph1_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            token inputs:bg
            token inputs:fg
            float inputs:mix = 0.5
            token outputs:mtlx:surface.connect = </MaterialX/Materials/nodegraph1_out/mix_surface1.outputs:surface>

            def Shader "mix_surface1" (
                prepend references = </MaterialX/Shaders/mix_surface1>
            )
            {
                token inputs:bg.connect = </MaterialX/Materials/nodegraph1_out.inputs:bg>
                token inputs:fg.connect = </MaterialX/Materials/nodegraph1_out.inputs:fg>
                float inputs:mix.connect = </MaterialX/Materials/nodegraph1_out.inputs:mix>
            }

            def "NodeGraphs" (
                prepend references = </MaterialX/NodeGraphs>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "mix_surface1"
        {
            uniform token info:id = "ND_mix_surfaceshader"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/nodegraph1_out>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

