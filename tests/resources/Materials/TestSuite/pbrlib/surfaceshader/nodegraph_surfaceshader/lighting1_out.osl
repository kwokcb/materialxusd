#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

surface lighting1_out
[[
    string mtlx_category = "output",
    string mtlx_name = "out"
]]
(
    string geomprop_Nworld_space = "world",
    float diffusebsdf1_weight = 1.000000
    [[
        float min = 0.000000,
        float max = 1.000000,
        string widget = "number"
    ]],
    color diffusebsdf1_color = color(0.300000, 0.300000, 1.000000),
    float diffusebsdf1_roughness = 0.800000
    [[
        string widget = "number"
    ]],
    int diffusebsdf1_energy_compensation = 0
    [[
        string widget = "checkBox"
    ]],
    float surface1_opacity = 1.000000
    [[
        string help = "Surface cutout opacity",
        string widget = "number"
    ]],
    int surface1_thin_walled = 0
    [[
        string help = "Option to make the surface thin-walled.",
        string widget = "checkBox"
    ]],
    output closure color out = 0
)
{
    closure color null_closure = 0;
    vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
    BSDF diffusebsdf1_out = diffusebsdf1_weight * oren_nayar_diffuse_bsdf(geomprop_Nworld_out1, diffusebsdf1_color, diffusebsdf1_roughness);
    surfaceshader surface1_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(diffusebsdf1_out, null_closure, surface1_opacity, surface1_thin_walled, surface1_out);
    {
        float opacity_weight = clamp(surface1_out.opacity, 0.0, 1.0);
        out = (surface1_out.bsdf + surface1_out.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
    }
}

