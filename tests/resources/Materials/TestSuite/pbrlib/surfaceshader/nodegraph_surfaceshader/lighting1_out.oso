OpenShadingLanguage 1.00
# Compiled by oslc 1.13.3.0dev
# options: -q -ID:\Work\materialx\OSL_ILM\bin\shaders -o D:\Work\materialx\bernard_MaterialX_3\build\bin\resources\Materials\TestSuite\pbrlib\surfaceshader\nodegraph_surfaceshader\lighting1_out.oso
surface lighting1_out	%meta{string,mtlx_category,"output"} %meta{string,mtlx_name,"out"} 
param	string	geomprop_Nworld_space	"world"		%read{2,2} %write{2147483647,-1}
param	float	diffusebsdf1_weight	1		%meta{float,min,0} %meta{float,max,1} %meta{string,widget,"number"}  %read{4,4} %write{2147483647,-1}
param	color	diffusebsdf1_color	0.300000012 0.300000012 1		%read{3,3} %write{2147483647,-1}
param	float	diffusebsdf1_roughness	0.800000012		%meta{string,widget,"number"}  %read{3,3} %write{2147483647,-1}
param	int	diffusebsdf1_energy_compensation	0		%meta{string,widget,"checkBox"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	surface1_opacity	1		%meta{string,help,"Surface cutout opacity"} %meta{string,widget,"number"}  %read{12,12} %write{2147483647,-1}
param	int	surface1_thin_walled	0		%meta{string,help,"Option to make the surface thin-walled."} %meta{string,widget,"checkBox"}  %read{2147483647,-1} %write{2147483647,-1}
oparam	closure color	out			%read{2147483647,-1} %write{23,23}
global	normal	N	%read{2,2} %write{2147483647,-1}
local	closure color	null_closure	%read{5,10} %write{0,0}
local	vector	geomprop_Nworld_out1	%read{3,3} %write{2,2}
local	closure color	diffusebsdf1_out	%read{9,9} %write{4,4}
local	closure color	surface1_out.bsdf	%read{18,18} %write{5,9} %mystruct{surface1_out} %mystructfield{0}
local	closure color	surface1_out.edf	%read{18,18} %write{6,10} %mystruct{surface1_out} %mystructfield{1}
local	float	surface1_out.opacity	%read{14,16} %write{7,14} %mystruct{surface1_out} %mystructfield{2}
local	float	___670_opacity_weight	%read{19,21} %write{17,17}
const	int	$const1	0		%read{0,0} %write{2147483647,-1}
const	string	$const2	"transform"		%read{1,1} %write{2147483647,-1}
const	string	$const3	"common"		%read{2,2} %write{2147483647,-1}
temp	closure color	$tmp1	%read{4,4} %write{3,3}
const	string	$const4	"oren_nayar_diffuse_bsdf"		%read{3,3} %write{2147483647,-1}
const	float	$const5	1		%read{7,21} %write{2147483647,-1}
const	string	$const6	"mx_surface"		%read{8,8} %write{2147483647,-1}
const	float	$const7	0		%read{13,17} %write{2147483647,-1}
const	string	$const8	"clamp"		%read{11,15} %write{2147483647,-1}
temp	float	$tmp2	%read{13,13} %write{12,12}
temp	float	$tmp3	%read{17,17} %write{16,16}
temp	closure color	$tmp4	%read{19,19} %write{18,18}
temp	closure color	$tmp5	%read{23,23} %write{19,19}
temp	closure color	$tmp6	%read{22,22} %write{20,20}
const	string	$const9	"transparent"		%read{20,20} %write{2147483647,-1}
temp	float	$tmp7	%read{22,22} %write{21,21}
temp	closure color	$tmp8	%read{23,23} %write{22,22}
code ___main___
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:60
#     vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
	assign		null_closure $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl"} %line{60} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:61
#     BSDF diffusebsdf1_out = diffusebsdf1_weight * oren_nayar_diffuse_bsdf(geomprop_Nworld_out1, diffusebsdf1_color, diffusebsdf1_roughness);
	functioncall	$const2 3 	%line{61} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	geomprop_Nworld_out1 $const3 geomprop_Nworld_space N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:62
#     surfaceshader surface1_out = surfaceshader(null_closure, null_closure, 1.0);
	closure		$tmp1 $const4 geomprop_Nworld_out1 diffusebsdf1_color diffusebsdf1_roughness 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl"} %line{62} %argrw{"wrrrr"}
	mul		diffusebsdf1_out $tmp1 diffusebsdf1_weight 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:63
#     mx_surface(diffusebsdf1_out, null_closure, surface1_opacity, surface1_thin_walled, surface1_out);
	assign		surface1_out.bsdf null_closure 	%line{63} %argrw{"wr"}
	assign		surface1_out.edf null_closure 	%argrw{"wr"}
	assign		surface1_out.opacity $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:64
#     {
	functioncall	$const6 15 	%line{64} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:20
#     result.edf     = edf;
	assign		surface1_out.bsdf diffusebsdf1_out 	%line{20} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:21
#     result.opacity = clamp(opacity, 0.0, 1.0);
	assign		surface1_out.edf null_closure 	%line{21} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:22
# }
	functioncall	$const8 14 	%line{22} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp2 surface1_opacity $const5 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		surface1_out.opacity $tmp2 $const7 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:22
# }
	assign		surface1_out.opacity surface1_out.opacity 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl"} %line{22} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:66
#         out = (surface1_out.bsdf + surface1_out.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
	functioncall	$const8 18 	%line{66} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp3 surface1_out.opacity $const5 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___670_opacity_weight $tmp3 $const7 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl:67
#     }
	add		$tmp4 surface1_out.bsdf surface1_out.edf 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\pbrlib\\surfaceshader\\nodegraph_surfaceshader\\lighting1_out.osl"} %line{67} %argrw{"wrr"}
	mul		$tmp5 $tmp4 ___670_opacity_weight 	%argrw{"wrr"}
	closure		$tmp6 $const9 	%argrw{"wr"}
	sub		$tmp7 $const5 ___670_opacity_weight 	%argrw{"wrr"}
	mul		$tmp8 $tmp6 $tmp7 	%argrw{"wrr"}
	add		out $tmp5 $tmp8 	%argrw{"wrr"}
	end
