#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

shader NG_checker_float_out
[[
    string mtlx_category = "output",
    string mtlx_name = "out"
]]
(
    vector2 scale = {8.000000, 8.000000},
    int texcoord1_index = 0
    [[
        string widget = "number"
    ]],
    int mult1_x_index = 0
    [[
        int min = 0,
        int max = 1,
        string widget = "number"
    ]],
    int mult1_y_index = 1
    [[
        int min = 0,
        int max = 1,
        string widget = "number"
    ]],
    float mod1_in2 = 2.000000
    [[
        string widget = "number"
    ]],
    output float out = 0.0
)
{
    vector2 texcoord1_out = vector2(u,v);
    vector2 mult1_out = texcoord1_out * scale;
    float mult1_x_out = mx_extract(mult1_out, mult1_x_index);
    float mult1_y_out = mx_extract(mult1_out, mult1_y_index);
    float floor1_out = floor(mult1_x_out);
    float floor2_out = floor(mult1_y_out);
    float add1_out = floor1_out + floor2_out;
    float mod1_out = mod(add1_out, mod1_in2);
    out = mod1_out;
}

