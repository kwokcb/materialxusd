#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void mx_surface(BSDF bsdf, EDF edf, float opacity, int thin_walled, output surfaceshader result)
{
    result.bsdf    = bsdf;
    result.edf     = edf;
    result.opacity = clamp(opacity, 0.0, 1.0);
}

void IMP_sheen_surface(float diffuse1, color diffuse_color, float sheen1, color sheen_color, float sheen_roughness, output surfaceshader out)
{
    closure color null_closure = 0;
    string geomprop_Nworld_space_tmp = "world";
    vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space_tmp, N);
    BSDF sheen1__layer_top_out = sheen1 * sheen_bsdf(geomprop_Nworld_out1, sheen_color, sheen_roughness);
    float diffuse1_roughness_tmp = 0.000000;
    BSDF diffuse1_out = diffuse1 * oren_nayar_diffuse_bsdf(geomprop_Nworld_out1, diffuse_color, diffuse1_roughness_tmp);
    BSDF sheen1_out = layer(sheen1__layer_top_out, diffuse1_out);
    surfaceshader surface1_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface(sheen1_out, null_closure, 1.000000, 0, surface1_out);
    out = surface1_out;
}

MATERIAL mx_surfacematerial(surfaceshader surface, surfaceshader backsurface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader M_sheen
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "M_sheen"
]]
(
    surfaceshader backsurfaceshader = { 0, 0, 1.0 },
    displacementshader displacementshader1 = vector(0.0),
    float SR_sheen_diffuse = 1.000000
    [[
        string widget = "number"
    ]],
    color SR_sheen_diffuse_color = color(0.000000, 0.000000, 0.950000),
    float SR_sheen_sheen = 1.000000
    [[
        string widget = "number"
    ]],
    color SR_sheen_sheen_color = color(0.516000, 0.524000, 0.778000),
    float SR_sheen_sheen_roughness = 0.300000
    [[
        string widget = "number"
    ]],
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    surfaceshader SR_sheen_out = surfaceshader(null_closure, null_closure, 1.0);
    IMP_sheen_surface(SR_sheen_diffuse, SR_sheen_diffuse_color, SR_sheen_sheen, SR_sheen_sheen_color, SR_sheen_sheen_roughness, SR_sheen_out);
    MATERIAL M_sheen_out = mx_surfacematerial(SR_sheen_out, backsurfaceshader, displacementshader1);
    out = M_sheen_out;
}

