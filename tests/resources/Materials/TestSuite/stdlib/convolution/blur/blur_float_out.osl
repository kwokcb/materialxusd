#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

vector2 mx_transform_uv(vector2 texcoord)
{
    return texcoord;
}

void mx_image_float(textureresource file, string layer, float default_value, vector2 texcoord, string uaddressmode, string vaddressmode, string filtertype, string framerange, int frameoffset, string frameendaction, output float out)
{
    if (file.filename == "" ||
        (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
        (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
    {
        out = default_value;
        return;
    }

    color missingColor = color(default_value);
    vector2 st = mx_transform_uv(texcoord);
    color rgb = texture(file.filename, st.x, st.y,
                        "subimage", layer, "interp", filtertype,
                        "missingcolor", missingColor,
                        "swrap", uaddressmode, "twrap", vaddressmode);
    out = rgb[0];
}

// Restrict to 7x7 kernel size for performance reasons
#define MX_MAX_SAMPLE_COUNT 49
// Size of all weights for all levels (including level 1)
#define MX_WEIGHT_ARRAY_SIZE 84

//
// Function to compute the sample size relative to a texture coordinate
//
vector2 mx_compute_sample_size_uv(vector2 uv, float filterSize, float filterOffset)
{
   vector derivUVx = Dx(vector(uv.x, uv.y, 0.0)) * 0.5;
   vector derivUVy = Dy(vector(uv.x, uv.y, 0.0)) * 0.5;
   float derivX = abs(derivUVx[0]) + abs(derivUVy[0]);
   float derivY = abs(derivUVx[1]) + abs(derivUVy[1]);
   float sampleSizeU = filterSize * derivX + filterOffset;
   if (sampleSizeU < 1.0E-05)
       sampleSizeU = 1.0E-05;
   float sampleSizeV = filterSize * derivY + filterOffset;
   if (sampleSizeV < 1.0E-05)
       sampleSizeV = 1.0E-05;
   return vector2(sampleSizeU, sampleSizeV);
}

// Kernel weights for box filter
void mx_get_box_weights(output float W[MX_MAX_SAMPLE_COUNT], int filterSize)
{
    int sampleCount = filterSize*filterSize;
    float value = 1.0 / float(sampleCount);
    for (int i=0; i<sampleCount; i++)
    {
        W[i] = value;
    }
}

// Kernel weights for Gaussian filter. Sigma is assumed to be 1.
void mx_get_gaussian_weights(output float W[MX_MAX_SAMPLE_COUNT], int filterSize)
{
    if (filterSize >= 7)
    {
        W[0] = 0.000036;  W[1] = 0.000363;  W[2] = 0.001446;  W[3] = 0.002291;  W[4] = 0.001446;  W[5] = 0.000363;  W[6] = 0.000036;
        W[7] = 0.000363;  W[8] = 0.003676;  W[9] = 0.014662;  W[10] = 0.023226; W[11] = 0.014662; W[12] = 0.003676; W[13] = 0.000363;
        W[14] = 0.001446; W[15] = 0.014662; W[16] = 0.058488; W[17] = 0.092651; W[18] = 0.058488; W[19] = 0.014662; W[20] = 0.001446;
        W[21] = 0.002291; W[22] = 0.023226; W[23] = 0.092651; W[24] = 0.146768; W[25] = 0.092651; W[26] = 0.023226; W[27] = 0.002291;
        W[28] = 0.001446; W[29] = 0.014662; W[30] = 0.058488; W[31] = 0.092651; W[32] = 0.058488; W[33] = 0.014662; W[34] = 0.001446;
        W[35] = 0.000363; W[36] = 0.003676; W[37] = 0.014662; W[38] = 0.023226; W[39] = 0.014662; W[40] = 0.003676; W[41] = 0.000363;
        W[42] = 0.000036; W[43] = 0.000363; W[44] = 0.001446; W[45] = 0.002291; W[46] = 0.001446; W[47] = 0.000363; W[48] = 0.000036;
    }
    else if (filterSize >= 5)
    {
        W[0] = 0.003765;  W[1] = 0.015019;  W[2] = 0.023792;  W[3] = 0.015019;  W[4] = 0.003765;
        W[5] = 0.015019;  W[6] = 0.059912;  W[7] = 0.094907;  W[8] = 0.059912;  W[9] = 0.015019;
        W[10] = 0.023792; W[11] = 0.094907; W[12] = 0.150342; W[13] = 0.094907; W[14] = 0.023792;
        W[15] = 0.015019; W[16] = 0.059912; W[17] = 0.094907; W[18] = 0.059912; W[19] = 0.015019;
        W[20] = 0.003765; W[21] = 0.015019; W[22] = 0.023792; W[23] = 0.015019; W[24] = 0.003765;
    }
    else if (filterSize >= 3)
    {
        W[0] = 0.0625; W[1] = 0.125; W[2] = 0.0625;
        W[3] = 0.125;  W[4] = 0.25;  W[5] = 0.125;
        W[6] = 0.0625; W[7] = 0.125; W[8] = 0.0625;
    }
    else
    {
        W[0] = 1.0;
    }
}

//
// Apply filter for float samples S, using weights W.
// sampleCount should be a square of a odd number in the range { 1, 3, 5, 7 }
//
float mx_convolution_float(float S[MX_MAX_SAMPLE_COUNT], float W[MX_WEIGHT_ARRAY_SIZE], int offset, int sampleCount)
{
    float result = 0.0;
    for (int i = 0;  i < sampleCount; i++)
    {
        result += S[i]*W[i+offset];
    }
    return result;
}

//
// Apply filter for vector2 samples S, using weights W.
// sampleCount should be a square of a odd number in the range { 1, 3, 5, 7 }
//
vector2 mx_convolution_vector2(vector2 S[MX_MAX_SAMPLE_COUNT], float W[MX_WEIGHT_ARRAY_SIZE], int offset, int sampleCount)
{
    vector2 result = vector2(0.0, 0.0);
    for (int i=0;  i<sampleCount; i++)
    {
        result += S[i]*W[i+offset];
    }
    return result;
}

//
// Apply filter for vector samples S, using weights W.
// sampleCount should be a square of a odd number in the range { 1, 3, 5, 7 }
//
vector mx_convolution_vector(vector S[MX_MAX_SAMPLE_COUNT], float W[MX_WEIGHT_ARRAY_SIZE], int offset, int sampleCount)
{
    vector result = vector(0.0, 0.0, 0.0);
    for (int i=0;  i<sampleCount; i++)
    {
        result += S[i]*W[i+offset];
    }
    return result;
}

//
// Apply filter for vector4 samples S, using weights W.
// sampleCount should be a square of a odd number { 1, 3, 5, 7 }
//
vector4 mx_convolution_vector4(vector4 S[MX_MAX_SAMPLE_COUNT], float W[MX_WEIGHT_ARRAY_SIZE], int offset, int sampleCount)
{
    vector4 result = vector4(0.0, 0.0, 0.0, 0.0);
    for (int i=0;  i<sampleCount; i++)
    {
        result += S[i]*W[i+offset];
    }
    return result;
}

//
// Apply filter for color samples S, using weights W.
// sampleCount should be a square of a odd number in the range { 1, 3, 5, 7 }
//
color mx_convolution_color(color S[MX_MAX_SAMPLE_COUNT], float W[MX_WEIGHT_ARRAY_SIZE], int offset, int sampleCount)
{
    color result = color(0.0);
    for (int i=0;  i<sampleCount; i++)
    {
        result += S[i]*W[i+offset];
    }
    return result;
}

//
// Apply filter for color4 samples S, using weights W.
// sampleCount should be a square of a odd number { 1, 3, 5, 7 }
//
color4 mx_convolution_color4(color4 S[MX_MAX_SAMPLE_COUNT], float W[MX_WEIGHT_ARRAY_SIZE], int offset, int sampleCount)
{
    color4 result = color4(color(0.0, 0.0, 0.0), 0.0);
    for (int i=0;  i<sampleCount; i++)
    {
        result += S[i]*W[i+offset];
    }
    return result;
}

shader blur_float_out1
[[
    string mtlx_category = "output",
    string mtlx_name = "out"
]]
(
    int geomprop_UV0_index = 0
    [[
        string widget = "number"
    ]],
    string image1_file = "D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Images/grid.png"
    [[
        string label = "Filename",
        string widget = "filename"
    ]],
    string image1_file_colorspace = ""
    [[
        string widget = "colorspace"
    ]],
    string image1_layer = ""
    [[
        string label = "Layer"
    ]],
    float image1_default = 0.000000
    [[
        string label = "Default Color",
        string widget = "number"
    ]],
    string image1_uaddressmode = "periodic"
    [[
        string label = "Address Mode U"
    ]],
    string image1_vaddressmode = "periodic"
    [[
        string label = "Address Mode V"
    ]],
    string image1_filtertype = "linear"
    [[
        string label = "Filter Type"
    ]],
    string image1_framerange = ""
    [[
        string label = "Frame Range"
    ]],
    int image1_frameoffset = 0
    [[
        string label = "Frame Offset",
        string widget = "number"
    ]],
    string image1_frameendaction = "constant"
    [[
        string label = "Frame End Action"
    ]],
    float blur_float_size = 0.500000
    [[
        string widget = "number"
    ]],
    string blur_float_filtertype = "box",
    output float out = 0.0
)
{
    float c_box_filter_weights[84] = {1.000000, 0.111111, 0.111111, 0.111111, 0.111111, 0.111111, 0.111111, 0.111111, 0.111111, 0.111111, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.040000, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408, 0.020408};
    float c_gaussian_filter_weights[84] = {1.000000, 0.077847, 0.123317, 0.077847, 0.123317, 0.195346, 0.123317, 0.077847, 0.123317, 0.077847, 0.003765, 0.015019, 0.023792, 0.015019, 0.003765, 0.015019, 0.059912, 0.094907, 0.059912, 0.015019, 0.023792, 0.094907, 0.150342, 0.094907, 0.023792, 0.015019, 0.059912, 0.094907, 0.059912, 0.015019, 0.003765, 0.015019, 0.023792, 0.015019, 0.003765, 0.000036, 0.000363, 0.001446, 0.002291, 0.001446, 0.000363, 0.000036, 0.000363, 0.003676, 0.014662, 0.023226, 0.014662, 0.003676, 0.000363, 0.001446, 0.014662, 0.058488, 0.092651, 0.058488, 0.014662, 0.001446, 0.002291, 0.023226, 0.092651, 0.146768, 0.092651, 0.023226, 0.002291, 0.001446, 0.014662, 0.058488, 0.092651, 0.058488, 0.014662, 0.001446, 0.000363, 0.003676, 0.014662, 0.023226, 0.014662, 0.003676, 0.000363, 0.000036, 0.000363, 0.001446, 0.002291, 0.001446, 0.000363, 0.000036};

    textureresource image1_file_ = {image1_file, image1_file_colorspace};
    vector2 geomprop_UV0_out1 = vector2(u,v);
    float image1_out = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1, image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out);
    vector2 blur_float_out_sample_size = mx_compute_sample_size_uv(geomprop_UV0_out1,1.000000,0.000000);
    float image1_out_blur_float_out0 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-2.000000,-2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out0);
    float image1_out_blur_float_out1 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-1.000000,-2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out1);
    float image1_out_blur_float_out2 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(0.000000,-2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out2);
    float image1_out_blur_float_out3 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(1.000000,-2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out3);
    float image1_out_blur_float_out4 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(2.000000,-2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out4);
    float image1_out_blur_float_out5 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-2.000000,-1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out5);
    float image1_out_blur_float_out6 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-1.000000,-1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out6);
    float image1_out_blur_float_out7 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(0.000000,-1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out7);
    float image1_out_blur_float_out8 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(1.000000,-1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out8);
    float image1_out_blur_float_out9 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(2.000000,-1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out9);
    float image1_out_blur_float_out10 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-2.000000,0.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out10);
    float image1_out_blur_float_out11 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-1.000000,0.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out11);
    float image1_out_blur_float_out12 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(0.000000,0.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out12);
    float image1_out_blur_float_out13 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(1.000000,0.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out13);
    float image1_out_blur_float_out14 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(2.000000,0.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out14);
    float image1_out_blur_float_out15 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-2.000000,1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out15);
    float image1_out_blur_float_out16 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-1.000000,1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out16);
    float image1_out_blur_float_out17 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(0.000000,1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out17);
    float image1_out_blur_float_out18 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(1.000000,1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out18);
    float image1_out_blur_float_out19 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(2.000000,1.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out19);
    float image1_out_blur_float_out20 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-2.000000,2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out20);
    float image1_out_blur_float_out21 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(-1.000000,2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out21);
    float image1_out_blur_float_out22 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(0.000000,2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out22);
    float image1_out_blur_float_out23 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(1.000000,2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out23);
    float image1_out_blur_float_out24 = 0.0;
    mx_image_float(image1_file_, image1_layer, image1_default, geomprop_UV0_out1 + blur_float_out_sample_size * vector2(2.000000,2.000000), image1_uaddressmode, image1_vaddressmode, image1_filtertype, image1_framerange, image1_frameoffset, image1_frameendaction, image1_out_blur_float_out24);
    float blur_float_out_samples[MX_MAX_SAMPLE_COUNT];
    blur_float_out_samples[0] = image1_out_blur_float_out0;
    blur_float_out_samples[1] = image1_out_blur_float_out1;
    blur_float_out_samples[2] = image1_out_blur_float_out2;
    blur_float_out_samples[3] = image1_out_blur_float_out3;
    blur_float_out_samples[4] = image1_out_blur_float_out4;
    blur_float_out_samples[5] = image1_out_blur_float_out5;
    blur_float_out_samples[6] = image1_out_blur_float_out6;
    blur_float_out_samples[7] = image1_out_blur_float_out7;
    blur_float_out_samples[8] = image1_out_blur_float_out8;
    blur_float_out_samples[9] = image1_out_blur_float_out9;
    blur_float_out_samples[10] = image1_out_blur_float_out10;
    blur_float_out_samples[11] = image1_out_blur_float_out11;
    blur_float_out_samples[12] = image1_out_blur_float_out12;
    blur_float_out_samples[13] = image1_out_blur_float_out13;
    blur_float_out_samples[14] = image1_out_blur_float_out14;
    blur_float_out_samples[15] = image1_out_blur_float_out15;
    blur_float_out_samples[16] = image1_out_blur_float_out16;
    blur_float_out_samples[17] = image1_out_blur_float_out17;
    blur_float_out_samples[18] = image1_out_blur_float_out18;
    blur_float_out_samples[19] = image1_out_blur_float_out19;
    blur_float_out_samples[20] = image1_out_blur_float_out20;
    blur_float_out_samples[21] = image1_out_blur_float_out21;
    blur_float_out_samples[22] = image1_out_blur_float_out22;
    blur_float_out_samples[23] = image1_out_blur_float_out23;
    blur_float_out_samples[24] = image1_out_blur_float_out24;
    float blur_float_out;
    if (blur_float_filtertype == "gaussian")
    {
        blur_float_out = mx_convolution_float(blur_float_out_samples, c_gaussian_filter_weights, 10, 25);
    }
    else
    {
        blur_float_out = mx_convolution_float(blur_float_out_samples, c_box_filter_weights, 10, 25);
    }
    out = blur_float_out;
}

