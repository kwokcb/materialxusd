#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/TestSuite/stdlib/convolution/blur_converted.mtlx, /Users/bernardkwok/work/materialxusd/tests/data/sphere.usd, /Users/bernardkwok/work/materialxusd/tests/data/san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "blur_color3_graph_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/blur_color3_graph_out/shader_blur_color3_graph_out.outputs:surface>

            def Shader "shader_blur_color3_graph_out" (
                prepend references = </MaterialX/Shaders/shader_blur_color3_graph_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/blur_color3_graph_out.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/blur_color3_graph_out/blur_color3_graph.outputs:out>
                float inputs:opacity.connect = </MaterialX/Materials/blur_color3_graph_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/blur_color3_graph_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/blur_color3_graph_out.inputs:transmission_color>
            }

            def "blur_color3_graph" (
                prepend references = </MaterialX/NodeGraphs/blur_color3_graph>
            )
            {
            }
        }

        def Material "blur_color4_graph_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/blur_color4_graph_out/shader_blur_color4_graph_out.outputs:surface>

            def Shader "shader_blur_color4_graph_out" (
                prepend references = </MaterialX/Shaders/shader_blur_color4_graph_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/blur_color4_graph_out.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/blur_color4_graph_out/blur_color4_graph.outputs:out>
                float inputs:opacity.connect = </MaterialX/Materials/blur_color4_graph_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/blur_color4_graph_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/blur_color4_graph_out.inputs:transmission_color>
            }

            def "blur_color4_graph" (
                prepend references = </MaterialX/NodeGraphs/blur_color4_graph>
            )
            {
            }
        }

        def Material "blur_float_graph_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/blur_float_graph_out/shader_blur_float_graph_out.outputs:surface>

            def Shader "shader_blur_float_graph_out" (
                prepend references = </MaterialX/Shaders/shader_blur_float_graph_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/blur_float_graph_out/blur_float_graph.outputs:out>
                color3f inputs:emission_color.connect = </MaterialX/Materials/blur_float_graph_out.inputs:emission_color>
                float inputs:opacity.connect = </MaterialX/Materials/blur_float_graph_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/blur_float_graph_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/blur_float_graph_out.inputs:transmission_color>
            }

            def "blur_float_graph" (
                prepend references = </MaterialX/NodeGraphs/blur_float_graph>
            )
            {
            }
        }

        def Material "blur_vector2_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/blur_vector2_out/shader_blur_vector2_out.outputs:surface>

            def Shader "shader_blur_vector2_out" (
                prepend references = </MaterialX/Shaders/shader_blur_vector2_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/blur_vector2_out.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/blur_vector2_out/blur_vector2.outputs:out>
                float inputs:opacity.connect = </MaterialX/Materials/blur_vector2_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/blur_vector2_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/blur_vector2_out.inputs:transmission_color>
            }

            def "blur_vector2" (
                prepend references = </MaterialX/NodeGraphs/blur_vector2>
            )
            {
            }
        }

        def Material "blur_vector3_graph_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/blur_vector3_graph_out/shader_blur_vector3_graph_out.outputs:surface>

            def Shader "shader_blur_vector3_graph_out" (
                prepend references = </MaterialX/Shaders/shader_blur_vector3_graph_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/blur_vector3_graph_out.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/blur_vector3_graph_out/blur_vector3_graph.outputs:out>
                float inputs:opacity.connect = </MaterialX/Materials/blur_vector3_graph_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/blur_vector3_graph_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/blur_vector3_graph_out.inputs:transmission_color>
            }

            def "blur_vector3_graph" (
                prepend references = </MaterialX/NodeGraphs/blur_vector3_graph>
            )
            {
            }
        }

        def Material "blur_vector4_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/blur_vector4_out/shader_blur_vector4_out.outputs:surface>

            def Shader "shader_blur_vector4_out" (
                prepend references = </MaterialX/Shaders/shader_blur_vector4_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/blur_vector4_out.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/blur_vector4_out/blur_vector4.outputs:out>
                float inputs:opacity.connect = </MaterialX/Materials/blur_vector4_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/blur_vector4_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/blur_vector4_out.inputs:transmission_color>
            }

            def "blur_vector4" (
                prepend references = </MaterialX/NodeGraphs/blur_vector4>
            )
            {
            }
        }

        def Material "blur_cellnoise_graph_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/blur_cellnoise_graph_out/shader_blur_cellnoise_graph_out.outputs:surface>

            def Shader "shader_blur_cellnoise_graph_out" (
                prepend references = </MaterialX/Shaders/shader_blur_cellnoise_graph_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/blur_cellnoise_graph_out/blur_cellnoise_graph.outputs:out>
                color3f inputs:emission_color.connect = </MaterialX/Materials/blur_cellnoise_graph_out.inputs:emission_color>
                float inputs:opacity.connect = </MaterialX/Materials/blur_cellnoise_graph_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/blur_cellnoise_graph_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/blur_cellnoise_graph_out.inputs:transmission_color>
            }

            def "blur_cellnoise_graph" (
                prepend references = </MaterialX/NodeGraphs/blur_cellnoise_graph>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "shader_blur_color3_graph_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }

        def Shader "shader_blur_color4_graph_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }

        def Shader "shader_blur_float_graph_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }

        def Shader "shader_blur_vector2_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }

        def Shader "shader_blur_vector3_graph_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }

        def Shader "shader_blur_vector4_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }

        def Shader "shader_blur_cellnoise_graph_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "blur_color3_graph"
        {
            color3f outputs:out.connect = </MaterialX/NodeGraphs/blur_color3_graph/blur_color3.outputs:out>

            def Shader "image1"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @resources/Images/grid.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/blur_color3_graph/UV0.outputs:out>
                color3f outputs:out
            }

            def Shader "blur_color3"
            {
                uniform token info:id = "ND_blur_color3"
                string inputs:filtertype = "gaussian"
                color3f inputs:in.connect = </MaterialX/NodeGraphs/blur_color3_graph/image1.outputs:out>
                float inputs:size = 0.5
                color3f outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }
        }

        def NodeGraph "blur_color4_graph"
        {
            color3f outputs:out.connect = </MaterialX/NodeGraphs/blur_color4_graph/convert_blur_color4.outputs:out>

            def Shader "tiledimage1"
            {
                uniform token info:id = "ND_tiledimage_color4"
                asset inputs:file = @resources/Images/grid.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/blur_color4_graph/UV0.outputs:out>
                color4f outputs:out
            }

            def Shader "blur_color4"
            {
                uniform token info:id = "ND_blur_color4"
                string inputs:filtertype = "gaussian"
                color4f inputs:in.connect = </MaterialX/NodeGraphs/blur_color4_graph/tiledimage1.outputs:out>
                float inputs:size = 0.5
                color4f outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "convert_blur_color4"
            {
                uniform token info:id = "ND_convert_color4_color3"
                color4f inputs:in.connect = </MaterialX/NodeGraphs/blur_color4_graph/blur_color4.outputs:out>
                color3f outputs:out
            }
        }

        def NodeGraph "blur_float_graph"
        {
            float outputs:out.connect = </MaterialX/NodeGraphs/blur_float_graph/blur_float.outputs:out>

            def Shader "image1"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @resources/Images/grid.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/blur_float_graph/UV0.outputs:out>
                float outputs:out
            }

            def Shader "blur_float"
            {
                uniform token info:id = "ND_blur_float"
                string inputs:filtertype = "box"
                float inputs:in.connect = </MaterialX/NodeGraphs/blur_float_graph/image1.outputs:out>
                float inputs:size = 0.5
                float outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }
        }

        def NodeGraph "blur_vector2"
        {
            color3f outputs:out.connect = </MaterialX/NodeGraphs/blur_vector2/convert_blur_vector2.outputs:out>

            def Shader "tiledimage1"
            {
                uniform token info:id = "ND_tiledimage_vector2"
                asset inputs:file = @resources/Images/grid.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/blur_vector2/UV0.outputs:out>
                float2 outputs:out
            }

            def Shader "blur_vector2"
            {
                uniform token info:id = "ND_blur_vector2"
                string inputs:filtertype = "box"
                float2 inputs:in.connect = </MaterialX/NodeGraphs/blur_vector2/tiledimage1.outputs:out>
                float inputs:size = 0.5
                float2 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "convert_blur_vector2"
            {
                uniform token info:id = "ND_convert_vector2_color3"
                float2 inputs:in.connect = </MaterialX/NodeGraphs/blur_vector2/blur_vector2.outputs:out>
                color3f outputs:out
            }
        }

        def NodeGraph "blur_vector3_graph"
        {
            color3f outputs:out.connect = </MaterialX/NodeGraphs/blur_vector3_graph/convert_blur_vector3.outputs:out>

            def Shader "tiledimage1"
            {
                uniform token info:id = "ND_tiledimage_vector3"
                asset inputs:file = @resources/Images/grid.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/blur_vector3_graph/UV0.outputs:out>
                float3 outputs:out
            }

            def Shader "blur_vector3"
            {
                uniform token info:id = "ND_blur_vector3"
                string inputs:filtertype = "box"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/blur_vector3_graph/tiledimage1.outputs:out>
                float inputs:size = 0.5
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "convert_blur_vector3"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/blur_vector3_graph/blur_vector3.outputs:out>
                color3f outputs:out
            }
        }

        def NodeGraph "blur_vector4"
        {
            color3f outputs:out.connect = </MaterialX/NodeGraphs/blur_vector4/convert_blur_vector4.outputs:out>

            def Shader "tiledimage1"
            {
                uniform token info:id = "ND_tiledimage_vector4"
                asset inputs:file = @resources/Images/grid.png@
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/blur_vector4/UV0.outputs:out>
                float4 outputs:out
            }

            def Shader "blur_vector4"
            {
                uniform token info:id = "ND_blur_vector4"
                string inputs:filtertype = "box"
                float4 inputs:in.connect = </MaterialX/NodeGraphs/blur_vector4/tiledimage1.outputs:out>
                float inputs:size = 0.5
                float4 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "convert_blur_vector4"
            {
                uniform token info:id = "ND_convert_vector4_color3"
                float4 inputs:in.connect = </MaterialX/NodeGraphs/blur_vector4/blur_vector4.outputs:out>
                color3f outputs:out
            }
        }

        def NodeGraph "blur_cellnoise_graph"
        {
            float outputs:out.connect = </MaterialX/NodeGraphs/blur_cellnoise_graph/blur_cellnoise.outputs:out>

            def Shader "texcoord1"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
            }

            def Shader "multiply1"
            {
                uniform token info:id = "ND_multiply_vector2FA"
                float2 inputs:in1.connect = </MaterialX/NodeGraphs/blur_cellnoise_graph/texcoord1.outputs:out>
                float inputs:in2 = 100
                float2 outputs:out
            }

            def Shader "cellnoise2d1"
            {
                uniform token info:id = "ND_cellnoise2d_float"
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/blur_cellnoise_graph/multiply1.outputs:out>
                float outputs:out
            }

            def Shader "blur_cellnoise"
            {
                uniform token info:id = "ND_blur_float"
                string inputs:filtertype = "gaussian"
                float inputs:in.connect = </MaterialX/NodeGraphs/blur_cellnoise_graph/cellnoise2d1.outputs:out>
                float inputs:size = 0.5
                float outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @/Users/bernardkwok/work/materialxusd/tests/data/sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/blur_vector4_out>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @/Users/bernardkwok/work/materialxusd/tests/data/san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @/Users/bernardkwok/work/materialxusd/tests/data/camera_sphere.usda@
    )
    {
    }
}

