OpenShadingLanguage 1.00
# Compiled by oslc 1.13.3.0dev
# options: -q -ID:\Work\materialx\OSL_ILM\bin\shaders -o D:\Work\materialx\bernard_MaterialX_3\build\bin\resources\Materials\TestSuite\stdlib\convolution\heighttonormal\heighttonormal_surface1_out.oso
surface heighttonormal_surface1_out	%meta{string,mtlx_category,"output"} %meta{string,mtlx_name,"surface1_out"} 
param	string	file	"D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Images/plain_heightmap.png"		%meta{string,widget,"filename"}  %read{1,1} %write{2147483647,-1} %derivs
param	string	file_colorspace	""		%meta{string,widget,"colorspace"}  %read{2,2} %write{2147483647,-1}
param	string	geomprop_Nworld_space	"world"		%read{4,4} %write{2147483647,-1}
param	string	geomprop_Tworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Tworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Bworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Bworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_UV0_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	tiledimage_default	0		%meta{string,widget,"number"}  %read{66,68} %write{2147483647,-1} %derivs
param	struct vector2	tiledimage_uvtiling			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_uvtiling.x	10		%read{21,21} %write{2147483647,-1} %mystruct{tiledimage_uvtiling} %mystructfield{0} %derivs
param	float	tiledimage_uvtiling.y	10		%read{22,22} %write{2147483647,-1} %mystruct{tiledimage_uvtiling} %mystructfield{1} %derivs
param	struct vector2	tiledimage_uvoffset			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_uvoffset.x	0		%read{24,24} %write{2147483647,-1} %mystruct{tiledimage_uvoffset} %mystructfield{0} %derivs
param	float	tiledimage_uvoffset.y	0		%read{25,25} %write{2147483647,-1} %mystruct{tiledimage_uvoffset} %mystructfield{1} %derivs
param	struct vector2	tiledimage_realworldimagesize			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_realworldimagesize.x	1		%read{27,27} %write{2147483647,-1} %mystruct{tiledimage_realworldimagesize} %mystructfield{0} %derivs
param	float	tiledimage_realworldimagesize.y	1		%read{28,28} %write{2147483647,-1} %mystruct{tiledimage_realworldimagesize} %mystructfield{1} %derivs
param	struct vector2	tiledimage_realworldtilesize			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	tiledimage_realworldtilesize.x	1		%read{30,30} %write{2147483647,-1} %mystruct{tiledimage_realworldtilesize} %mystructfield{0} %derivs
param	float	tiledimage_realworldtilesize.y	1		%read{31,31} %write{2147483647,-1} %mystruct{tiledimage_realworldtilesize} %mystructfield{1} %derivs
param	string	tiledimage_filtertype	"linear"		%read{72,72} %write{2147483647,-1} %derivs
param	string	tiledimage_framerange	""		%read{2147483647,-1} %write{2147483647,-1}
param	int	tiledimage_frameoffset	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	tiledimage_frameendaction	"constant"		%read{2147483647,-1} %write{2147483647,-1}
param	float	heighttonormal_scale	0.200000003		%meta{string,widget,"number"}  %read{80,80} %write{2147483647,-1}
param	float	normalmap_scale	1		%meta{string,widget,"number"}  %read{94,95} %write{2147483647,-1}
param	float	standard_surface_base	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Base"} %meta{string,page,"Base"} %meta{string,help,"Multiplier on the intensity of the diffuse reflection."} %meta{string,widget,"number"}  %read{141,576} %write{2147483647,-1}
param	color	standard_surface_base_color	0.800000012 0.800000012 0.800000012		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Base Color"} %meta{string,page,"Base"} %meta{string,help,"Color of the diffuse reflection."}  %read{141,160} %write{2147483647,-1}
param	float	standard_surface_diffuse_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Diffuse Roughness"} %meta{string,page,"Base"} %meta{int,uiadvanced,1} %meta{string,help,"Roughness of the diffuse reflection. Higher values cause the surface to appear flatter and darker."} %meta{string,widget,"number"}  %read{575,575} %write{2147483647,-1}
param	float	standard_surface_metalness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Metalness"} %meta{string,page,"Base"} %meta{string,help,"Specifies how metallic the material appears. At its maximum, the surface behaves like a metal, using fully specular reflection and complex fresnel."} %meta{string,widget,"number"}  %read{590,592} %write{2147483647,-1}
param	float	standard_surface_specular	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular"} %meta{string,page,"Specular"} %meta{string,help,"Multiplier on the intensity of the specular reflection."} %meta{string,widget,"number"}  %read{142,548} %write{2147483647,-1}
param	color	standard_surface_specular_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Specular Color"} %meta{string,page,"Specular"} %meta{string,help,"Color tint on the specular reflection."}  %read{142,546} %write{2147483647,-1}
param	float	standard_surface_specular_roughness	0.200000003		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Roughness"} %meta{string,page,"Specular"} %meta{string,help,"The roughness of the specular reflection. Lower numbers produce sharper reflections, higher numbers produce blurrier reflections."} %meta{string,widget,"number"}  %read{146,448} %write{2147483647,-1}
param	float	standard_surface_specular_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Index of Refraction"} %meta{string,page,"Specular"} %meta{string,help,"Index of refraction for specular reflection."} %meta{string,widget,"number"}  %read{547,559} %write{2147483647,-1}
param	float	standard_surface_specular_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Anisotropy"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"The directional bias of reflected and transmitted light resulting in materials appearing rougher or glossier in certain directions."} %meta{string,widget,"number"}  %read{470,502} %write{2147483647,-1}
param	float	standard_surface_specular_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Rotation"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"Rotation of the axis of specular anisotropy around the surface normal."} %meta{string,widget,"number"}  %read{145,145} %write{2147483647,-1}
param	float	standard_surface_transmission	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Transmission of light through the surface for materials such as glass or water. The greater the value the more transparent the material."} %meta{string,widget,"number"}  %read{584,586} %write{2147483647,-1}
param	color	standard_surface_transmission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Color"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Color tint on the transmitted light."}  %read{554,558} %write{2147483647,-1}
param	float	standard_surface_transmission_depth	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Depth"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Specifies the distance light travels inside the material before its becomes exactly the transmission color according to Beer's law."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	standard_surface_transmission_scatter	0 0 0		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Scatter"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Scattering coefficient of the interior medium. Suitable for a large body of liquid or one that is fairly thick, such as an ocean, honey, ice, or frosted glass."}  %read{2147483647,-1} %write{2147483647,-1}
param	float	standard_surface_transmission_scatter_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission Anisotropy"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the scattering."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	standard_surface_transmission_dispersion	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Dispersion"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Dispersion amount, describing how much the index of refraction varies across wavelengths."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	standard_surface_transmission_extra_roughness	0		%meta{float,min,-1} %meta{float,slidermin,0} %meta{float,max,1} %meta{string,label,"Transmission Roughness"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Additional roughness on top of specular roughness. Positive values blur refractions more than reflections, and negative values blur refractions less."} %meta{string,widget,"number"}  %read{146,146} %write{2147483647,-1}
param	float	standard_surface_subsurface	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Subsurface"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The blend between diffuse reflection and subsurface scattering. A value of 1.0 indicates full subsurface scattering and a value 0 for diffuse reflection only."} %meta{string,widget,"number"}  %read{578,580} %write{2147483647,-1}
param	color	standard_surface_subsurface_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Color"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the subsurface scattering effect."}  %read{149,149} %write{2147483647,-1}
param	color	standard_surface_subsurface_radius	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Radius"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The mean free path. The distance which light can travel before being scattered inside the surface."}  %read{155,155} %write{2147483647,-1}
param	float	standard_surface_subsurface_scale	1		%meta{float,min,0} %meta{float,slidermax,10} %meta{string,label,"Subsurface Scale"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"Scalar weight for the subsurface radius value."} %meta{string,widget,"number"}  %read{155,155} %write{2147483647,-1}
param	float	standard_surface_subsurface_anisotropy	0		%meta{float,min,-1} %meta{float,max,1} %meta{string,label,"Subsurface Anisotropy"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The direction of subsurface scattering. 0 scatters light evenly, positive values scatter forward and negative values scatter backward."} %meta{string,widget,"number"}  %read{569,569} %write{2147483647,-1}
param	float	standard_surface_sheen	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The weight of a sheen layer that can be used to approximate microfibers or fabrics such as velvet and satin."} %meta{string,widget,"number"}  %read{562,562} %write{2147483647,-1}
param	color	standard_surface_sheen_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Sheen Color"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the sheen layer."}  %read{561,561} %write{2147483647,-1}
param	float	standard_surface_sheen_roughness	0.300000012		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen Roughness"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The roughness of the sheen layer."} %meta{string,widget,"number"}  %read{561,561} %write{2147483647,-1}
param	float	standard_surface_coat	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat"} %meta{string,page,"Coat"} %meta{string,help,"The weight of a reflective clear-coat layer on top of the material. Use for materials such as car paint or an oily layer."} %meta{string,widget,"number"}  %read{143,614} %write{2147483647,-1}
param	color	standard_surface_coat_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Coat Color"} %meta{string,page,"Coat"} %meta{string,help,"The color of the clear-coat layer's transparency."}  %read{162,597} %write{2147483647,-1}
param	float	standard_surface_coat_roughness	0.100000001		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Roughness"} %meta{string,page,"Coat"} %meta{string,help,"The roughness of the clear-coat reflections. The lower the value, the sharper the reflection."} %meta{string,widget,"number"}  %read{121,317} %write{2147483647,-1}
param	float	standard_surface_coat_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Anisotropy"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the clear-coat layer."} %meta{string,widget,"number"}  %read{125,456} %write{2147483647,-1}
param	float	standard_surface_coat_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Rotation"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The rotation of the anisotropic effect of the clear-coat layer."} %meta{string,widget,"number"}  %read{140,140} %write{2147483647,-1}
param	float	standard_surface_coat_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Coat Index of Refraction"} %meta{string,page,"Coat"} %meta{string,help,"The index of refraction of the clear-coat layer."} %meta{string,widget,"number"}  %read{164,531} %write{2147483647,-1}
param	float	standard_surface_coat_affect_color	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Color"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the saturation of diffuse reflection and subsurface scattering below the clear-coat."} %meta{string,widget,"number"}  %read{441,441} %write{2147483647,-1}
param	float	standard_surface_coat_affect_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Roughness"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the roughness of the specular reflection in the layers below the clear-coat."} %meta{string,widget,"number"}  %read{143,143} %write{2147483647,-1}
param	float	standard_surface_thin_film_thickness	0		%meta{float,min,0} %meta{float,slidermax,2000} %meta{string,label,"Thin Film Thickness"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The thickness of the thin film layer on a surface. Use for materials such as multitone car paint or soap bubbles (in nanometers)."} %meta{string,widget,"number"}  %read{535,547} %write{2147483647,-1}
param	float	standard_surface_thin_film_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Thin Film Index of Refraction"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The index of refraction of the medium surrounding the material."} %meta{string,widget,"number"}  %read{535,547} %write{2147483647,-1}
param	float	standard_surface_emission	0		%meta{float,min,0} %meta{float,slidermax,1} %meta{string,label,"Emission"} %meta{string,page,"Emission"} %meta{string,help,"The amount of emitted incandescent light."} %meta{string,widget,"number"}  %read{167,167} %write{2147483647,-1}
param	color	standard_surface_emission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Emission Color"} %meta{string,page,"Emission"} %meta{string,help,"The color of the emitted light."}  %read{167,167} %write{2147483647,-1}
param	color	standard_surface_opacity	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Opacity"} %meta{string,page,"Geometry"} %meta{string,help,"The opacity of the entire material."}  %read{170,170} %write{2147483647,-1}
param	int	standard_surface_thin_walled	0		%meta{string,label,"Thin Walled"} %meta{string,page,"Geometry"} %meta{int,uiadvanced,1} %meta{string,help,"If true the surface is double-sided and represents an infinitely thin shell. Suitable for thin objects such as tree leaves or paper."} %meta{string,widget,"checkBox"}  %read{156,156} %write{2147483647,-1}
oparam	closure color	surface1_out			%read{2147483647,-1} %write{637,637}
global	vector	I	%read{600,600} %write{2147483647,-1}
global	normal	N	%read{4,601} %write{2147483647,-1}
global	float	u	%read{16,16} %write{2147483647,-1} %derivs
global	float	v	%read{17,17} %write{2147483647,-1} %derivs
local	color	___670_missingColor	%read{72,72} %write{68,68} %derivs
local	float	___670_st.x	%read{72,72} %write{70,70} %mystruct{___670_st} %mystructfield{0} %derivs
local	float	___670_st.y	%read{72,72} %write{71,71} %mystruct{___670_st} %mystructfield{1} %derivs
local	color	___670_rgb	%read{73,73} %write{72,72} %derivs
local	float	___672_N_mult_float_out.x	%read{24,24} %write{21,21} %mystruct{___672_N_mult_float_out} %mystructfield{0} %derivs
local	float	___672_N_mult_float_out.y	%read{25,25} %write{22,22} %mystruct{___672_N_mult_float_out} %mystructfield{1} %derivs
local	float	___672_N_sub_float_out.x	%read{27,27} %write{24,24} %mystruct{___672_N_sub_float_out} %mystructfield{0} %derivs
local	float	___672_N_sub_float_out.y	%read{28,28} %write{25,25} %mystruct{___672_N_sub_float_out} %mystructfield{1} %derivs
local	float	___672_N_divtilesize_float_out.x	%read{30,30} %write{27,27} %mystruct{___672_N_divtilesize_float_out} %mystructfield{0} %derivs
local	float	___672_N_divtilesize_float_out.y	%read{31,31} %write{28,28} %mystruct{___672_N_divtilesize_float_out} %mystructfield{1} %derivs
local	float	___672_N_multtilesize_float_out.x	%read{40,70} %write{30,30} %mystruct{___672_N_multtilesize_float_out} %mystructfield{0} %derivs
local	float	___672_N_multtilesize_float_out.y	%read{55,71} %write{31,31} %mystruct{___672_N_multtilesize_float_out} %mystructfield{1} %derivs
local	float	___672_N_img_float_out	%read{74,74} %write{32,73} %derivs
local	float	___673_dx	%read{81,88} %write{78,78}
local	float	___673_dy	%read{83,88} %write{79,79}
local	float	___673_dz	%read{88,88} %write{87,87}
local	vector	___673_dir	%read{90,90} %write{89,89}
local	vector	___674_decodedValue	%read{102,109} %write{99,101}
local	float	___678_roughness_sqr	%read{132,512} %write{124,498}
local	float	___679_aspect	%read{132,509} %write{131,505}
local	vector	___682_nAxis	%read{182,382} %write{178,324}
local	float	___682_s	%read{192,378} %write{179,325}
local	float	___682_c	%read{181,384} %write{180,326}
local	float	___682_oc	%read{183,381} %write{181,327}
local	float	___683_rotationRadians	%read{179,326} %write{176,322}
local	matrix	___683_m	%read{245,432} %write{239,385}
local	float	___683_trans.x	%read{289,435} %write{255,401} %mystruct{___683_trans} %mystructfield{0}
local	float	___683_trans.y	%read{289,435} %write{266,412} %mystruct{___683_trans} %mystructfield{1}
local	float	___683_trans.z	%read{289,435} %write{277,423} %mystruct{___683_trans} %mystructfield{2}
local	float	___683_trans.w	%read{2147483647,-1} %write{288,434} %mystruct{___683_trans} %mystructfield{3}
local	color	___684_r	%read{298,312} %write{297,297}
local	color	___684_r_sqrt	%read{302,303} %write{298,298}
local	color	___684_n_min	%read{305,305} %write{301,301}
local	color	___684_n_max	%read{305,305} %write{304,304}
local	color	___684_np1	%read{308,308} %write{306,306}
local	color	___684_nm1	%read{310,310} %write{307,307}
local	color	___684_k2	%read{315,316} %write{313,315}
local	color	___685_reflection_tint	%read{531,559} %write{525,554}
local	color	___685_transmission_tint	%read{531,559} %write{529,558}
local	color	___687_combine_out	%read{520,520} %write{519,519}
local	float	___699_x	%read{608,608} %write{607,607}
local	float	___700_NdotV	%read{604,604} %write{602,602}
local	color	___700_f	%read{610,610} %write{609,609}
local	closure color	___702_null_closure	%read{521,617} %write{117,117}
local	float	___702_coat_roughness_vector_out.x	%read{134,531} %write{118,137} %mystruct{___702_coat_roughness_vector_out} %mystructfield{0}
local	float	___702_coat_roughness_vector_out.y	%read{136,531} %write{119,138} %mystruct{___702_coat_roughness_vector_out} %mystructfield{1}
local	float	___702_coat_tangent_rotate_degree_in2_tmp	%read{140,140} %write{139,139}
local	float	___702_coat_tangent_rotate_degree_out	%read{176,176} %write{140,140}
local	color	___702_metal_reflectivity_out	%read{296,296} %write{141,141}
local	color	___702_metal_edgecolor_out	%read{305,305} %write{142,142}
local	float	___702_coat_affect_roughness_multiply1_out	%read{317,317} %write{143,143}
local	float	___702_tangent_rotate_degree_in2_tmp	%read{145,145} %write{144,144}
local	float	___702_tangent_rotate_degree_out	%read{322,322} %write{145,145}
local	float	___702_transmission_roughness_add_out	%read{439,439} %write{146,146}
local	float	___702_subsurface_color_nonnegative_in2_tmp	%read{148,148} %write{147,147}
local	color	___702_subsurface_color_nonnegative_out	%read{513,513} %write{149,149}
local	float	___702_coat_clamped_low_tmp	%read{154,154} %write{150,150}
local	float	___702_coat_clamped_high_tmp	%read{153,153} %write{151,151}
local	float	___702_coat_clamped_out	%read{441,441} %write{154,154}
local	color	___702_subsurface_radius_scaled_out	%read{569,569} %write{155,155}
local	float	___702_subsurface_selector_out	%read{571,573} %write{157,157}
local	float	___702_base_color_nonnegative_in2_tmp	%read{159,159} %write{158,158}
local	color	___702_base_color_nonnegative_out	%read{514,514} %write{160,160}
local	color	___702_coat_attenuation_bg_tmp	%read{162,162} %write{161,161}
local	color	___702_coat_attenuation_out	%read{594,594} %write{162,162}
local	float	___702_one_minus_coat_ior_in1_tmp	%read{164,164} %write{163,163}
local	float	___702_one_minus_coat_ior_out	%read{442,442} %write{164,164}
local	float	___702_one_plus_coat_ior_in1_tmp	%read{166,166} %write{165,165}
local	float	___702_one_plus_coat_ior_out	%read{442,442} %write{166,166}
local	color	___702_emission_weight_out	%read{596,596} %write{167,167}
local	color	___702_opacity_luminance_out	%read{445,445} %write{168,171}
local	vector	___702_coat_tangent_rotate_out	%read{446,446} %write{172,289}
local	color	___702_artistic_ior_ior	%read{306,535} %write{290,305}
local	color	___702_artistic_ior_extinction	%read{535,535} %write{291,316}
local	float	___702_coat_affect_roughness_multiply2_out	%read{448,451} %write{317,317}
local	vector	___702_tangent_rotate_out	%read{449,449} %write{318,435}
local	float	___702_transmission_roughness_clamped_low_tmp	%read{440,440} %write{436,436}
local	float	___702_transmission_roughness_clamped_high_tmp	%read{439,439} %write{437,437}
local	float	___702_transmission_roughness_clamped_out	%read{451,451} %write{440,440}
local	float	___702_coat_gamma_multiply_out	%read{453,453} %write{441,441}
local	float	___702_coat_ior_to_F0_sqrt_out	%read{454,454} %write{442,442}
local	int	___702_opacity_luminance_float_index_tmp	%read{445,445} %write{443,443}
local	float	___702_opacity_luminance_float_out	%read{623,623} %write{445,445}
local	vector	___702_coat_tangent_rotate_normalize_out	%read{459,459} %write{446,446}
local	float	___702_coat_affected_roughness_fg_tmp	%read{448,448} %write{447,447}
local	float	___702_coat_affected_roughness_out	%read{466,466} %write{448,448}
local	vector	___702_tangent_rotate_normalize_out	%read{488,488} %write{449,449}
local	float	___702_coat_affected_transmission_roughness_fg_tmp	%read{451,451} %write{450,450}
local	float	___702_coat_affected_transmission_roughness_out	%read{495,495} %write{451,451}
local	float	___702_coat_gamma_in2_tmp	%read{453,453} %write{452,452}
local	float	___702_coat_gamma_out	%read{513,514} %write{453,453}
local	float	___702_coat_ior_to_F0_out	%read{516,516} %write{454,454}
local	float	___702_coat_tangent_value2_tmp	%read{456,456} %write{455,455}
local	vector	___702_coat_tangent_out	%read{531,531} %write{459,461}
local	float	___702_main_roughness_out.x	%read{479,547} %write{463,482} %mystruct{___702_main_roughness_out} %mystructfield{0}
local	float	___702_main_roughness_out.y	%read{481,547} %write{464,483} %mystruct{___702_main_roughness_out} %mystructfield{1}
local	float	___702_main_tangent_value2_tmp	%read{485,485} %write{484,484}
local	vector	___702_main_tangent_out	%read{535,559} %write{488,490}
local	float	___702_transmission_roughness_out.x	%read{508,559} %write{492,511} %mystruct{___702_transmission_roughness_out} %mystructfield{0}
local	float	___702_transmission_roughness_out.y	%read{510,559} %write{493,512} %mystruct{___702_transmission_roughness_out} %mystructfield{1}
local	color	___702_coat_affected_subsurface_color_out	%read{564,568} %write{513,513}
local	color	___702_coat_affected_diffuse_color_out	%read{575,575} %write{514,514}
local	float	___702_one_minus_coat_ior_to_F0_in1_tmp	%read{516,516} %write{515,515}
local	float	___702_one_minus_coat_ior_to_F0_out	%read{519,519} %write{516,516}
local	color	___702_emission_color0_out	%read{609,609} %write{517,520}
local	closure color	___702_coat_bsdf_out	%read{595,595} %write{521,532}
local	float	___702_metal_bsdf_weight_tmp	%read{536,536} %write{533,533}
local	string	___702_metal_bsdf_distribution_tmp	%read{535,535} %write{534,534}
local	closure color	___702_metal_bsdf_out	%read{592,592} %write{536,536}
local	closure color	___702_specular_bsdf_out	%read{588,588} %write{537,548}
local	closure color	___702_transmission_bsdf_out	%read{586,586} %write{549,560}
local	closure color	___702_sheen_bsdf_out	%read{582,582} %write{562,562}
local	float	___702_translucent_bsdf_weight_tmp	%read{565,565} %write{563,563}
local	closure color	___702_translucent_bsdf_out	%read{573,573} %write{565,565}
local	closure color	___702_subsurface_bsdf_out	%read{572,572} %write{566,569}
local	closure color	___702_selected_subsurface_bsdf_out	%read{580,580} %write{574,574}
local	closure color	___702_diffuse_bsdf_out	%read{579,579} %write{576,576}
local	closure color	___702_subsurface_mix_out	%read{582,582} %write{581,581}
local	closure color	___702_sheen_layer_out	%read{585,585} %write{582,582}
local	closure color	___702_transmission_mix_out	%read{588,588} %write{587,587}
local	closure color	___702_specular_layer_out	%read{591,591} %write{588,588}
local	closure color	___702_metalness_mix_out	%read{594,594} %write{593,593}
local	closure color	___702_thin_film_layer_attenuated_out	%read{595,595} %write{594,594}
local	closure color	___702_coat_layer_out	%read{620,620} %write{595,595}
local	closure color	___702_emission_edf_out	%read{597,613} %write{596,596}
local	closure color	___702_coat_tinted_emission_edf_out	%read{610,610} %write{597,597}
local	closure color	___702_coat_emission_edf_out	%read{614,614} %write{598,610}
local	closure color	___702_blended_coat_emission_edf_out	%read{621,621} %write{615,615}
local	closure color	___702_shader_constructor_out.bsdf	%read{626,626} %write{616,620} %mystruct{___702_shader_constructor_out} %mystructfield{0}
local	closure color	___702_shader_constructor_out.edf	%read{627,627} %write{617,621} %mystruct{___702_shader_constructor_out} %mystructfield{1}
local	float	___702_shader_constructor_out.opacity	%read{625,628} %write{618,625} %mystruct{___702_shader_constructor_out} %mystructfield{2}
local	closure color	null_closure	%read{113,114} %write{0,0}
local	string	file_.filename	%read{34,72} %write{1,1} %mystruct{file_} %mystructfield{0} %derivs
local	string	file_.colorspace	%read{2147483647,-1} %write{2,2} %mystruct{file_} %mystructfield{1}
local	vector	geomprop_Nworld_out1	%read{110,531} %write{4,4}
local	vector	geomprop_Tworld_out1	%read{103,490} %write{9,9}
local	vector	geomprop_Bworld_out1	%read{106,106} %write{15,15}
local	float	geomprop_UV0_out1.x	%read{21,21} %write{16,16} %mystruct{geomprop_UV0_out1} %mystructfield{0} %derivs
local	float	geomprop_UV0_out1.y	%read{22,22} %write{17,17} %mystruct{geomprop_UV0_out1} %mystructfield{1} %derivs
local	float	tiledimage_out	%read{77,79} %write{18,74} %derivs
local	vector	heighttonormal_out	%read{97,100} %write{75,91}
local	vector	normalmap_out	%read{324,575} %write{92,112}
local	closure color	standard_surface_out.bsdf	%read{632,632} %write{113,626} %mystruct{standard_surface_out} %mystructfield{0}
local	closure color	standard_surface_out.edf	%read{632,632} %write{114,627} %mystruct{standard_surface_out} %mystructfield{1}
local	float	standard_surface_out.opacity	%read{630,630} %write{115,628} %mystruct{standard_surface_out} %mystructfield{2}
local	float	___703_opacity_weight	%read{633,635} %write{631,631}
const	int	$const1	0		%read{0,443} %write{2147483647,-1}
const	string	$const2	"transform"		%read{3,390} %write{2147483647,-1}
const	string	$const3	"common"		%read{4,4} %write{2147483647,-1}
temp	vector	$tmp1	%read{9,9} %write{8,8}
const	int	$const4	2		%read{5,429} %write{2147483647,-1}
temp	float	$tmp2	%read{8,8} %write{5,5}
const	float	$const5	0		%read{8,631} %write{2147483647,-1}
temp	float	$tmp3	%read{7,7} %write{6,6}
temp	float	$tmp4	%read{8,8} %write{7,7}
temp	vector	$tmp5	%read{15,15} %write{14,14}
temp	vector	$tmp6	%read{14,14} %write{13,13}
temp	float	$tmp7	%read{13,13} %write{10,10}
temp	float	$tmp8	%read{12,12} %write{11,11}
temp	float	$tmp9	%read{13,13} %write{12,12}
const	string	$const6	"NG_tiledimage_float"		%read{19,19} %write{2147483647,-1}
const	string	$const7	"__operator__mul__"		%read{20,29} %write{2147483647,-1}
const	string	$const8	"__operator__sub__"		%read{23,23} %write{2147483647,-1}
const	string	$const9	"__operator__div__"		%read{26,26} %write{2147483647,-1}
const	string	$const10	""		%read{34,72} %write{2147483647,-1}
const	string	$const11	"periodic"		%read{37,72} %write{2147483647,-1}
const	string	$const12	"mx_image_float"		%read{33,33} %write{2147483647,-1}
temp	int	$tmp10	%read{35,35} %write{34,34}
temp	int	$tmp11	%read{36,50} %write{35,49}
const	string	$const13	"constant"		%read{37,52} %write{2147483647,-1}
temp	int	$tmp12	%read{38,38} %write{37,37}
temp	int	$tmp13	%read{39,48} %write{38,47}
temp	int	$tmp14	%read{41,41} %write{40,40}
temp	int	$tmp15	%read{42,46} %write{41,45}
const	float	$const14	1		%read{43,635} %write{2147483647,-1}
temp	int	$tmp16	%read{44,44} %write{43,43}
temp	int	$tmp17	%read{45,45} %write{44,44}
temp	int	$tmp18	%read{47,47} %write{46,46}
temp	int	$tmp19	%read{49,49} %write{48,48}
temp	int	$tmp20	%read{51,65} %write{50,64}
temp	int	$tmp21	%read{53,53} %write{52,52}
temp	int	$tmp22	%read{54,63} %write{53,62}
temp	int	$tmp23	%read{56,56} %write{55,55}
temp	int	$tmp24	%read{57,61} %write{56,60}
temp	int	$tmp25	%read{59,59} %write{58,58}
temp	int	$tmp26	%read{60,60} %write{59,59}
temp	int	$tmp27	%read{62,62} %write{61,61}
temp	int	$tmp28	%read{64,64} %write{63,63}
const	string	$const15	"mx_transform_uv"		%read{69,69} %write{2147483647,-1}
const	string	$const16	"subimage"		%read{72,72} %write{2147483647,-1}
const	string	$const17	"interp"		%read{72,72} %write{2147483647,-1}
const	string	$const18	"missingcolor"		%read{72,72} %write{2147483647,-1}
const	string	$const19	"swrap"		%read{72,72} %write{2147483647,-1}
const	string	$const20	"twrap"		%read{72,72} %write{2147483647,-1}
const	vector	$const21	0 0 0		%read{75,318} %write{2147483647,-1}
const	string	$const22	"mx_heighttonormal_vector3"		%read{76,76} %write{2147483647,-1}
temp	float	$tmp29	%read{78,78} %write{77,77}
temp	float	$tmp30	%read{87,87} %write{80,80}
const	float	$const23	1e-05		%read{80,85} %write{2147483647,-1}
temp	float	$tmp31	%read{87,87} %write{86,86}
temp	float	$tmp32	%read{86,86} %write{85,85}
temp	float	$tmp33	%read{82,82} %write{81,81}
temp	float	$tmp34	%read{84,84} %write{82,82}
temp	float	$tmp35	%read{84,84} %write{83,83}
temp	float	$tmp36	%read{85,85} %write{84,84}
temp	vector	$tmp37	%read{89,89} %write{88,88}
const	vector	$const24	0.5 0.5 0.5		%read{90,91} %write{2147483647,-1}
temp	vector	$tmp39	%read{91,91} %write{90,90}
const	string	$const25	"mx_normalmap_float"		%read{93,93} %write{2147483647,-1}
temp	float	$tmp41.x	%read{104,104} %write{94,94}
temp	float	$tmp41.y	%read{107,107} %write{95,95}
const	string	$const26	"mx_normalmap_vector2"		%read{96,96} %write{2147483647,-1}
temp	int	$tmp43	%read{98,98} %write{97,97}
const	vector	$const27	0 0 1		%read{99,99} %write{2147483647,-1}
const	float	$const28	2		%read{100,100} %write{2147483647,-1}
temp	vector	$tmp44	%read{101,101} %write{100,100}
temp	float	$tmp45	%read{103,103} %write{102,102}
temp	vector	$tmp46	%read{104,104} %write{103,103}
temp	vector	$tmp47	%read{108,108} %write{104,104}
const	int	$const29	1		%read{105,426} %write{2147483647,-1}
temp	float	$tmp48	%read{106,106} %write{105,105}
temp	vector	$tmp49	%read{107,107} %write{106,106}
temp	vector	$tmp50	%read{108,108} %write{107,107}
temp	vector	$tmp51	%read{111,111} %write{108,108}
temp	float	$tmp52	%read{110,110} %write{109,109}
temp	vector	$tmp53	%read{111,111} %write{110,110}
temp	vector	$tmp54	%read{112,112} %write{111,111}
const	string	$const30	"NG_standard_surface_surfaceshader_100"		%read{116,116} %write{2147483647,-1}
const	string	$const31	"mx_roughness_anisotropy"		%read{120,494} %write{2147483647,-1}
temp	float	$tmp55	%read{123,123} %write{121,121}
const	float	$const32	1e-08		%read{124,498} %write{2147483647,-1}
const	string	$const33	"clamp"		%read{122,629} %write{2147483647,-1}
temp	float	$tmp56	%read{124,124} %write{123,123}
temp	int	$tmp57	%read{126,126} %write{125,125}
temp	float	$tmp58	%read{130,130} %write{129,129}
const	float	$const34	0.98		%read{128,502} %write{2147483647,-1}
temp	float	$tmp59	%read{129,129} %write{128,128}
temp	float	$tmp60	%read{131,131} %write{130,130}
temp	float	$tmp61	%read{133,133} %write{132,132}
const	float	$const35	360		%read{139,144} %write{2147483647,-1}
temp	color	$tmp62	%read{149,149} %write{148,148}
temp	float	$tmp63	%read{154,154} %write{153,153}
temp	float	$tmp64	%read{157,157} %write{156,156}
temp	color	$tmp65	%read{160,160} %write{159,159}
const	color	$const36	1 1 1		%read{161,530} %write{2147483647,-1}
const	color	$const37	0 0 0		%read{168,609} %write{2147483647,-1}
const	color	$const38	0.272229 0.674082 0.053689		%read{170,170} %write{2147483647,-1}
const	string	$const39	"mx_luminance_color3"		%read{169,169} %write{2147483647,-1}
temp	float	$tmp67	%read{171,171} %write{170,170}
const	string	$const40	"mx_rotate_vector3"		%read{173,319} %write{2147483647,-1}
const	string	$const41	"radians"		%read{174,320} %write{2147483647,-1}
const	float	$const42	3.1415927		%read{175,321} %write{2147483647,-1}
const	float	$const43	180		%read{175,321} %write{2147483647,-1}
temp	float	$tmp68	%read{176,176} %write{175,175}
const	string	$const44	"rotationMatrix"		%read{177,323} %write{2147483647,-1}
temp	float	$tmp69	%read{183,183} %write{182,182}
temp	float	$tmp70	%read{185,185} %write{183,183}
temp	float	$tmp71	%read{185,185} %write{184,184}
temp	float	$tmp72	%read{186,186} %write{185,185}
temp	float	$tmp73	%read{239,239} %write{186,186}
temp	float	$tmp74	%read{188,188} %write{187,187}
temp	float	$tmp75	%read{190,190} %write{188,188}
temp	float	$tmp76	%read{190,190} %write{189,189}
temp	float	$tmp77	%read{193,193} %write{190,190}
temp	float	$tmp78	%read{192,192} %write{191,191}
temp	float	$tmp79	%read{193,193} %write{192,192}
temp	float	$tmp80	%read{239,239} %write{193,193}
temp	float	$tmp81	%read{195,195} %write{194,194}
temp	float	$tmp82	%read{197,197} %write{195,195}
temp	float	$tmp83	%read{197,197} %write{196,196}
temp	float	$tmp84	%read{200,200} %write{197,197}
temp	float	$tmp85	%read{199,199} %write{198,198}
temp	float	$tmp86	%read{200,200} %write{199,199}
temp	float	$tmp87	%read{239,239} %write{200,200}
temp	float	$tmp88	%read{202,202} %write{201,201}
temp	float	$tmp89	%read{204,204} %write{202,202}
temp	float	$tmp90	%read{204,204} %write{203,203}
temp	float	$tmp91	%read{207,207} %write{204,204}
temp	float	$tmp92	%read{206,206} %write{205,205}
temp	float	$tmp93	%read{207,207} %write{206,206}
temp	float	$tmp94	%read{239,239} %write{207,207}
temp	float	$tmp95	%read{209,209} %write{208,208}
temp	float	$tmp96	%read{211,211} %write{209,209}
temp	float	$tmp97	%read{211,211} %write{210,210}
temp	float	$tmp98	%read{212,212} %write{211,211}
temp	float	$tmp99	%read{239,239} %write{212,212}
temp	float	$tmp100	%read{214,214} %write{213,213}
temp	float	$tmp101	%read{216,216} %write{214,214}
temp	float	$tmp102	%read{216,216} %write{215,215}
temp	float	$tmp103	%read{219,219} %write{216,216}
temp	float	$tmp104	%read{218,218} %write{217,217}
temp	float	$tmp105	%read{219,219} %write{218,218}
temp	float	$tmp106	%read{239,239} %write{219,219}
temp	float	$tmp107	%read{221,221} %write{220,220}
temp	float	$tmp108	%read{223,223} %write{221,221}
temp	float	$tmp109	%read{223,223} %write{222,222}
temp	float	$tmp110	%read{226,226} %write{223,223}
temp	float	$tmp111	%read{225,225} %write{224,224}
temp	float	$tmp112	%read{226,226} %write{225,225}
temp	float	$tmp113	%read{239,239} %write{226,226}
temp	float	$tmp114	%read{228,228} %write{227,227}
temp	float	$tmp115	%read{230,230} %write{228,228}
temp	float	$tmp116	%read{230,230} %write{229,229}
temp	float	$tmp117	%read{233,233} %write{230,230}
temp	float	$tmp118	%read{232,232} %write{231,231}
temp	float	$tmp119	%read{233,233} %write{232,232}
temp	float	$tmp120	%read{239,239} %write{233,233}
temp	float	$tmp121	%read{235,235} %write{234,234}
temp	float	$tmp122	%read{237,237} %write{235,235}
temp	float	$tmp123	%read{237,237} %write{236,236}
temp	float	$tmp124	%read{238,238} %write{237,237}
temp	float	$tmp125	%read{239,239} %write{238,238}
temp	float	$tmp126.x	%read{246,279} %write{240,240}
temp	float	$tmp126.y	%read{248,281} %write{241,241}
temp	float	$tmp126.z	%read{251,284} %write{242,242}
temp	float	$tmp126.w	%read{254,287} %write{243,243}
temp	float	$tmp127	%read{246,246} %write{245,245}
temp	float	$tmp128	%read{249,249} %write{246,246}
temp	float	$tmp129	%read{248,248} %write{247,247}
temp	float	$tmp130	%read{249,249} %write{248,248}
temp	float	$tmp131	%read{252,252} %write{249,249}
temp	float	$tmp132	%read{251,251} %write{250,250}
temp	float	$tmp133	%read{252,252} %write{251,251}
temp	float	$tmp134	%read{255,255} %write{252,252}
const	int	$const45	3		%read{253,432} %write{2147483647,-1}
temp	float	$tmp135	%read{254,254} %write{253,253}
temp	float	$tmp136	%read{255,255} %write{254,254}
temp	float	$tmp137	%read{257,257} %write{256,256}
temp	float	$tmp138	%read{260,260} %write{257,257}
temp	float	$tmp139	%read{259,259} %write{258,258}
temp	float	$tmp140	%read{260,260} %write{259,259}
temp	float	$tmp141	%read{263,263} %write{260,260}
temp	float	$tmp142	%read{262,262} %write{261,261}
temp	float	$tmp143	%read{263,263} %write{262,262}
temp	float	$tmp144	%read{266,266} %write{263,263}
temp	float	$tmp145	%read{265,265} %write{264,264}
temp	float	$tmp146	%read{266,266} %write{265,265}
temp	float	$tmp147	%read{268,268} %write{267,267}
temp	float	$tmp148	%read{271,271} %write{268,268}
temp	float	$tmp149	%read{270,270} %write{269,269}
temp	float	$tmp150	%read{271,271} %write{270,270}
temp	float	$tmp151	%read{274,274} %write{271,271}
temp	float	$tmp152	%read{273,273} %write{272,272}
temp	float	$tmp153	%read{274,274} %write{273,273}
temp	float	$tmp154	%read{277,277} %write{274,274}
temp	float	$tmp155	%read{276,276} %write{275,275}
temp	float	$tmp156	%read{277,277} %write{276,276}
temp	float	$tmp157	%read{279,279} %write{278,278}
temp	float	$tmp158	%read{282,282} %write{279,279}
temp	float	$tmp159	%read{281,281} %write{280,280}
temp	float	$tmp160	%read{282,282} %write{281,281}
temp	float	$tmp161	%read{285,285} %write{282,282}
temp	float	$tmp162	%read{284,284} %write{283,283}
temp	float	$tmp163	%read{285,285} %write{284,284}
temp	float	$tmp164	%read{288,288} %write{285,285}
temp	float	$tmp165	%read{287,287} %write{286,286}
temp	float	$tmp166	%read{288,288} %write{287,287}
const	string	$const46	"mx_artistic_ior"		%read{292,292} %write{2147483647,-1}
temp	color	$tmp167	%read{297,297} %write{293,293}
const	float	$const47	0.99		%read{294,294} %write{2147483647,-1}
temp	color	$tmp168	%read{296,296} %write{294,294}
temp	color	$tmp169	%read{297,297} %write{296,296}
temp	color	$tmp170	%read{301,301} %write{299,299}
temp	color	$tmp171	%read{301,301} %write{300,300}
temp	color	$tmp172	%read{304,304} %write{302,302}
temp	color	$tmp173	%read{304,304} %write{303,303}
temp	color	$tmp174	%read{309,309} %write{308,308}
temp	color	$tmp175	%read{311,311} %write{309,309}
temp	color	$tmp176	%read{311,311} %write{310,310}
temp	color	$tmp177	%read{313,313} %write{311,311}
temp	color	$tmp178	%read{313,313} %write{312,312}
temp	color	$tmp179	%read{315,315} %write{314,314}
temp	float	$tmp180	%read{322,322} %write{321,321}
temp	float	$tmp181	%read{329,329} %write{328,328}
temp	float	$tmp182	%read{331,331} %write{329,329}
temp	float	$tmp183	%read{331,331} %write{330,330}
temp	float	$tmp184	%read{332,332} %write{331,331}
temp	float	$tmp185	%read{385,385} %write{332,332}
temp	float	$tmp186	%read{334,334} %write{333,333}
temp	float	$tmp187	%read{336,336} %write{334,334}
temp	float	$tmp188	%read{336,336} %write{335,335}
temp	float	$tmp189	%read{339,339} %write{336,336}
temp	float	$tmp190	%read{338,338} %write{337,337}
temp	float	$tmp191	%read{339,339} %write{338,338}
temp	float	$tmp192	%read{385,385} %write{339,339}
temp	float	$tmp193	%read{341,341} %write{340,340}
temp	float	$tmp194	%read{343,343} %write{341,341}
temp	float	$tmp195	%read{343,343} %write{342,342}
temp	float	$tmp196	%read{346,346} %write{343,343}
temp	float	$tmp197	%read{345,345} %write{344,344}
temp	float	$tmp198	%read{346,346} %write{345,345}
temp	float	$tmp199	%read{385,385} %write{346,346}
temp	float	$tmp200	%read{348,348} %write{347,347}
temp	float	$tmp201	%read{350,350} %write{348,348}
temp	float	$tmp202	%read{350,350} %write{349,349}
temp	float	$tmp203	%read{353,353} %write{350,350}
temp	float	$tmp204	%read{352,352} %write{351,351}
temp	float	$tmp205	%read{353,353} %write{352,352}
temp	float	$tmp206	%read{385,385} %write{353,353}
temp	float	$tmp207	%read{355,355} %write{354,354}
temp	float	$tmp208	%read{357,357} %write{355,355}
temp	float	$tmp209	%read{357,357} %write{356,356}
temp	float	$tmp210	%read{358,358} %write{357,357}
temp	float	$tmp211	%read{385,385} %write{358,358}
temp	float	$tmp212	%read{360,360} %write{359,359}
temp	float	$tmp213	%read{362,362} %write{360,360}
temp	float	$tmp214	%read{362,362} %write{361,361}
temp	float	$tmp215	%read{365,365} %write{362,362}
temp	float	$tmp216	%read{364,364} %write{363,363}
temp	float	$tmp217	%read{365,365} %write{364,364}
temp	float	$tmp218	%read{385,385} %write{365,365}
temp	float	$tmp219	%read{367,367} %write{366,366}
temp	float	$tmp220	%read{369,369} %write{367,367}
temp	float	$tmp221	%read{369,369} %write{368,368}
temp	float	$tmp222	%read{372,372} %write{369,369}
temp	float	$tmp223	%read{371,371} %write{370,370}
temp	float	$tmp224	%read{372,372} %write{371,371}
temp	float	$tmp225	%read{385,385} %write{372,372}
temp	float	$tmp226	%read{374,374} %write{373,373}
temp	float	$tmp227	%read{376,376} %write{374,374}
temp	float	$tmp228	%read{376,376} %write{375,375}
temp	float	$tmp229	%read{379,379} %write{376,376}
temp	float	$tmp230	%read{378,378} %write{377,377}
temp	float	$tmp231	%read{379,379} %write{378,378}
temp	float	$tmp232	%read{385,385} %write{379,379}
temp	float	$tmp233	%read{381,381} %write{380,380}
temp	float	$tmp234	%read{383,383} %write{381,381}
temp	float	$tmp235	%read{383,383} %write{382,382}
temp	float	$tmp236	%read{384,384} %write{383,383}
temp	float	$tmp237	%read{385,385} %write{384,384}
temp	float	$tmp238.x	%read{392,425} %write{386,386}
temp	float	$tmp238.y	%read{394,427} %write{387,387}
temp	float	$tmp238.z	%read{397,430} %write{388,388}
temp	float	$tmp238.w	%read{400,433} %write{389,389}
temp	float	$tmp239	%read{392,392} %write{391,391}
temp	float	$tmp240	%read{395,395} %write{392,392}
temp	float	$tmp241	%read{394,394} %write{393,393}
temp	float	$tmp242	%read{395,395} %write{394,394}
temp	float	$tmp243	%read{398,398} %write{395,395}
temp	float	$tmp244	%read{397,397} %write{396,396}
temp	float	$tmp245	%read{398,398} %write{397,397}
temp	float	$tmp246	%read{401,401} %write{398,398}
temp	float	$tmp247	%read{400,400} %write{399,399}
temp	float	$tmp248	%read{401,401} %write{400,400}
temp	float	$tmp249	%read{403,403} %write{402,402}
temp	float	$tmp250	%read{406,406} %write{403,403}
temp	float	$tmp251	%read{405,405} %write{404,404}
temp	float	$tmp252	%read{406,406} %write{405,405}
temp	float	$tmp253	%read{409,409} %write{406,406}
temp	float	$tmp254	%read{408,408} %write{407,407}
temp	float	$tmp255	%read{409,409} %write{408,408}
temp	float	$tmp256	%read{412,412} %write{409,409}
temp	float	$tmp257	%read{411,411} %write{410,410}
temp	float	$tmp258	%read{412,412} %write{411,411}
temp	float	$tmp259	%read{414,414} %write{413,413}
temp	float	$tmp260	%read{417,417} %write{414,414}
temp	float	$tmp261	%read{416,416} %write{415,415}
temp	float	$tmp262	%read{417,417} %write{416,416}
temp	float	$tmp263	%read{420,420} %write{417,417}
temp	float	$tmp264	%read{419,419} %write{418,418}
temp	float	$tmp265	%read{420,420} %write{419,419}
temp	float	$tmp266	%read{423,423} %write{420,420}
temp	float	$tmp267	%read{422,422} %write{421,421}
temp	float	$tmp268	%read{423,423} %write{422,422}
temp	float	$tmp269	%read{425,425} %write{424,424}
temp	float	$tmp270	%read{428,428} %write{425,425}
temp	float	$tmp271	%read{427,427} %write{426,426}
temp	float	$tmp272	%read{428,428} %write{427,427}
temp	float	$tmp273	%read{431,431} %write{428,428}
temp	float	$tmp274	%read{430,430} %write{429,429}
temp	float	$tmp275	%read{431,431} %write{430,430}
temp	float	$tmp276	%read{434,434} %write{431,431}
temp	float	$tmp277	%read{433,433} %write{432,432}
temp	float	$tmp278	%read{434,434} %write{433,433}
temp	float	$tmp279	%read{440,440} %write{439,439}
const	string	$const48	"mx_extract"		%read{444,444} %write{2147483647,-1}
temp	int	$tmp280	%read{458,458} %write{456,456}
const	string	$const49	"mx_ternary"		%read{457,486} %write{2147483647,-1}
temp	float	$tmp281	%read{468,468} %write{466,466}
temp	float	$tmp282	%read{469,469} %write{468,468}
temp	int	$tmp283	%read{471,471} %write{470,470}
temp	float	$tmp284	%read{475,475} %write{474,474}
temp	float	$tmp285	%read{474,474} %write{473,473}
temp	float	$tmp286	%read{476,476} %write{475,475}
temp	float	$tmp287	%read{478,478} %write{477,477}
temp	int	$tmp288	%read{487,487} %write{485,485}
temp	float	$tmp289	%read{497,497} %write{495,495}
temp	float	$tmp290	%read{498,498} %write{497,497}
temp	int	$tmp291	%read{500,500} %write{499,499}
temp	float	$tmp292	%read{504,504} %write{503,503}
temp	float	$tmp293	%read{503,503} %write{502,502}
temp	float	$tmp294	%read{505,505} %write{504,504}
temp	float	$tmp295	%read{507,507} %write{506,506}
const	string	$const50	"NG_convert_float_color3"		%read{518,518} %write{2147483647,-1}
const	float	$const51	1.5		%read{531,559} %write{2147483647,-1}
const	string	$const52	"ggx"		%read{531,559} %write{2147483647,-1}
const	string	$const53	"R"		%read{523,555} %write{2147483647,-1}
const	string	$const54	"mx_dielectric_bsdf"		%read{522,550} %write{2147483647,-1}
const	string	$const55	"T"		%read{523,555} %write{2147483647,-1}
temp	int	$tmp297	%read{524,524} %write{523,523}
temp	int	$tmp298	%read{528,528} %write{527,527}
temp	closure color	$tmp299	%read{532,532} %write{531,531}
const	string	$const56	"thinfilm_thickness"		%read{531,559} %write{2147483647,-1}
const	string	$const57	"thinfilm_ior"		%read{531,559} %write{2147483647,-1}
const	string	$const58	"dielectric_bsdf"		%read{531,559} %write{2147483647,-1}
temp	closure color	$tmp300	%read{536,536} %write{535,535}
const	string	$const59	"conductor_bsdf"		%read{535,535} %write{2147483647,-1}
temp	int	$tmp301	%read{540,540} %write{539,539}
temp	int	$tmp302	%read{544,544} %write{543,543}
temp	closure color	$tmp303	%read{548,548} %write{547,547}
temp	int	$tmp304	%read{552,552} %write{551,551}
temp	int	$tmp305	%read{556,556} %write{555,555}
temp	closure color	$tmp306	%read{560,560} %write{559,559}
temp	closure color	$tmp307	%read{562,562} %write{561,561}
const	string	$const60	"sheen_bsdf"		%read{561,561} %write{2147483647,-1}
temp	closure color	$tmp308	%read{565,565} %write{564,564}
const	string	$const61	"translucent_bsdf"		%read{564,564} %write{2147483647,-1}
const	string	$const62	"mx_subsurface_bsdf"		%read{567,567} %write{2147483647,-1}
temp	color	$tmp309	%read{569,569} %write{568,568}
const	string	$const63	"subsurface_bssrdf"		%read{569,569} %write{2147483647,-1}
const	string	$const64	"mix"		%read{570,611} %write{2147483647,-1}
temp	float	$tmp310	%read{572,572} %write{571,571}
temp	closure color	$tmp311	%read{574,574} %write{572,572}
temp	closure color	$tmp312	%read{574,574} %write{573,573}
temp	closure color	$tmp313	%read{576,576} %write{575,575}
const	string	$const65	"oren_nayar_diffuse_bsdf"		%read{575,575} %write{2147483647,-1}
temp	float	$tmp314	%read{579,579} %write{578,578}
temp	closure color	$tmp315	%read{581,581} %write{579,579}
temp	closure color	$tmp316	%read{581,581} %write{580,580}
const	string	$const66	"layer"		%read{582,595} %write{2147483647,-1}
temp	float	$tmp317	%read{585,585} %write{584,584}
temp	closure color	$tmp318	%read{587,587} %write{585,585}
temp	closure color	$tmp319	%read{587,587} %write{586,586}
temp	float	$tmp320	%read{591,591} %write{590,590}
temp	closure color	$tmp321	%read{593,593} %write{591,591}
temp	closure color	$tmp322	%read{593,593} %write{592,592}
const	string	$const67	"uniform_edf"		%read{596,596} %write{2147483647,-1}
const	float	$const68	5		%read{608,608} %write{2147483647,-1}
const	string	$const69	"mx_generalized_schlick_edf"		%read{599,599} %write{2147483647,-1}
temp	float	$tmp324	%read{602,602} %write{601,601}
temp	vector	$tmp325	%read{601,601} %write{600,600}
const	string	$const70	"mx_fresnel_schlick"		%read{603,603} %write{2147483647,-1}
temp	float	$tmp326	%read{606,606} %write{604,604}
temp	float	$tmp327	%read{607,607} %write{606,606}
temp	float	$tmp328	%read{609,609} %write{608,608}
temp	float	$tmp329	%read{613,613} %write{612,612}
temp	closure color	$tmp330	%read{615,615} %write{613,613}
temp	closure color	$tmp331	%read{615,615} %write{614,614}
const	string	$const71	"mx_surface"		%read{619,619} %write{2147483647,-1}
temp	float	$tmp332	%read{624,624} %write{623,623}
temp	float	$tmp333	%read{631,631} %write{630,630}
temp	closure color	$tmp334	%read{633,633} %write{632,632}
temp	closure color	$tmp335	%read{637,637} %write{633,633}
temp	closure color	$tmp336	%read{636,636} %write{634,634}
const	string	$const72	"transparent"		%read{634,634} %write{2147483647,-1}
temp	float	$tmp337	%read{636,636} %write{635,635}
temp	closure color	$tmp338	%read{637,637} %write{636,636}
code ___main___
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:782
#     textureresource file_ = {file, file_colorspace};
	assign		null_closure $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{782} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:783
#     vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
	assign		file_.filename file 	%line{783} %argrw{"wr"}
	assign		file_.colorspace file_colorspace 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:784
#     vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
	functioncall	$const2 5 	%line{784} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	geomprop_Nworld_out1 $const3 geomprop_Nworld_space N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:785
#     vector geomprop_Bworld_out1 = normalize(cross(N, vector(N[2], 0, -N[0])));
	compref		$tmp2 N $const4 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{785} %argrw{"wrr"}
	compref		$tmp3 N $const1 	%argrw{"wrr"}
	neg		$tmp4 $tmp3 	%argrw{"wr"}
	vector		$tmp1 $tmp2 $const5 $tmp4 	%argrw{"wrrr"}
	normalize	geomprop_Tworld_out1 $tmp1 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:786
#     vector2 geomprop_UV0_out1 = vector2(u,v);
	compref		$tmp7 N $const4 	%line{786} %argrw{"wrr"}
	compref		$tmp8 N $const1 	%argrw{"wrr"}
	neg		$tmp9 $tmp8 	%argrw{"wr"}
	vector		$tmp6 $tmp7 $const5 $tmp9 	%argrw{"wrrr"}
	cross		$tmp5 N $tmp6 	%argrw{"wrr"}
	normalize	geomprop_Bworld_out1 $tmp5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:787
#     float tiledimage_out = 0.0;
	assign		geomprop_UV0_out1.x u 	%line{787} %argrw{"wr"}
	assign		geomprop_UV0_out1.y v 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:788
#     NG_tiledimage_float(file_, tiledimage_default, geomprop_UV0_out1, tiledimage_uvtiling, tiledimage_uvoffset, tiledimage_realworldimagesize, tiledimage_realworldtilesize, tiledimage_filtertype, tiledimage_framerange, tiledimage_frameoffset, tiledimage_frameendaction, tiledimage_out);
	assign		tiledimage_out $const5 	%line{788} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:789
#     vector heighttonormal_out = vector(0.0);
	functioncall	$const6 75 	%line{789} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:801
# 
	functioncall	$const7 23 	%line{801} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___672_N_mult_float_out.x geomprop_UV0_out1.x tiledimage_uvtiling.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___672_N_mult_float_out.y geomprop_UV0_out1.y tiledimage_uvtiling.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:801
# 
	functioncall	$const8 26 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{801} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___672_N_sub_float_out.x ___672_N_mult_float_out.x tiledimage_uvoffset.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___672_N_sub_float_out.y ___672_N_mult_float_out.y tiledimage_uvoffset.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:801
# 
	functioncall	$const9 29 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{801} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:103
#     return vector2(a.x / b.x, a.y / b.y);
	div		___672_N_divtilesize_float_out.x ___672_N_sub_float_out.x tiledimage_realworldimagesize.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{103} %argrw{"wrr"}
	div		___672_N_divtilesize_float_out.y ___672_N_sub_float_out.y tiledimage_realworldimagesize.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:801
# 
	functioncall	$const7 32 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{801} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___672_N_multtilesize_float_out.x ___672_N_divtilesize_float_out.x tiledimage_realworldtilesize.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___672_N_multtilesize_float_out.y ___672_N_divtilesize_float_out.y tiledimage_realworldtilesize.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:48
#     mx_image_float(file, "", default1, N_multtilesize_float_out, "periodic", "periodic", filtertype, framerange, frameoffset, frameendaction, N_img_float_out);
	assign		___672_N_img_float_out $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{48} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:49
#     out = N_img_float_out;
	functioncall	$const12 74 	%line{49} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	eq		$tmp10 file_.filename $const10 	%line{25} %argrw{"wrr"}
	neq		$tmp11 $tmp10 $const1 	%argrw{"wrr"}
	if		$tmp11 37 50 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	eq		$tmp12 $const11 $const13 	%line{26} %argrw{"wrr"}
	neq		$tmp13 $tmp12 $const1 	%argrw{"wrr"}
	if		$tmp13 48 48 	%argrw{"r"}
	lt		$tmp14 ___672_N_multtilesize_float_out.x $const5 	%argrw{"wrr"}
	neq		$tmp15 $tmp14 $const1 	%argrw{"wrr"}
	if		$tmp15 43 46 	%argrw{"r"}
	gt		$tmp16 ___672_N_multtilesize_float_out.x $const14 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const1 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	neq		$tmp18 $tmp15 $const1 	%argrw{"wrr"}
	assign		$tmp13 $tmp18 	%argrw{"wr"}
	neq		$tmp19 $tmp13 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	assign		$tmp11 $tmp19 	%line{25} %argrw{"wr"}
	neq		$tmp20 $tmp11 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	if		$tmp20 52 65 	%line{26} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:27
#     {
	eq		$tmp21 $const11 $const13 	%line{27} %argrw{"wrr"}
	neq		$tmp22 $tmp21 $const1 	%argrw{"wrr"}
	if		$tmp22 63 63 	%argrw{"r"}
	lt		$tmp23 ___672_N_multtilesize_float_out.y $const5 	%argrw{"wrr"}
	neq		$tmp24 $tmp23 $const1 	%argrw{"wrr"}
	if		$tmp24 58 61 	%argrw{"r"}
	gt		$tmp25 ___672_N_multtilesize_float_out.y $const14 	%argrw{"wrr"}
	neq		$tmp26 $tmp25 $const1 	%argrw{"wrr"}
	assign		$tmp24 $tmp26 	%argrw{"wr"}
	neq		$tmp27 $tmp24 $const1 	%argrw{"wrr"}
	assign		$tmp22 $tmp27 	%argrw{"wr"}
	neq		$tmp28 $tmp22 $const1 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:26
#         (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
	assign		$tmp20 $tmp28 	%line{26} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:25
#         (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
	if		$tmp20 68 68 	%line{25} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:29
#         return;
	assign		___672_N_img_float_out tiledimage_default 	%line{29} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:30
#     }
	return	%line{30}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:33
#     vector2 st = mx_transform_uv(texcoord);
	assign		___670_missingColor tiledimage_default 	%line{33} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:34
#     color rgb = texture(file.filename, st.x, st.y,
	functioncall	$const15 72 	%line{34} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:20
# }
	assign		___670_st.x ___672_N_multtilesize_float_out.x 	%line{20} %argrw{"wr"}
	assign		___670_st.y ___672_N_multtilesize_float_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:35
#                         "subimage", layer, "interp", filtertype,
	texture		___670_rgb file_.filename ___670_st.x ___670_st.y $const16 $const10 $const17 tiledimage_filtertype $const18 ___670_missingColor $const19 $const11 $const20 $const11 	%line{35} %argrw{"wrrrrrrrrrrrrr"} %argderivs{2,3}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:39
# }
	compref		___672_N_img_float_out ___670_rgb $const1 	%line{39} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:50
# }
	assign		tiledimage_out ___672_N_img_float_out 	%line{50} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:790
#     mx_heighttonormal_vector3(tiledimage_out, heighttonormal_scale, heighttonormal_out);
	assign		heighttonormal_out $const21 	%line{790} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:791
#     vector normalmap_out = vector(0.0);
	functioncall	$const22 92 	%line{791} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:55
#     float dy = Dy(in);
	Dx		$tmp29 tiledimage_out 	%line{55} %argrw{"wr"} %argderivs{1}
	neg		___673_dx $tmp29 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:56
#     float dz = max(scale, 1.0E-05) * sqrt(max(1.0 - dx*dx - dy*dy, 1.0E-05));
	Dy		___673_dy tiledimage_out 	%line{56} %argrw{"wr"} %argderivs{1}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:57
#     vector dir = normalize(vector(dx, dy, dz));
	max		$tmp30 heighttonormal_scale $const23 	%line{57} %argrw{"wrr"}
	mul		$tmp33 ___673_dx ___673_dx 	%argrw{"wrr"}
	sub		$tmp34 $const14 $tmp33 	%argrw{"wrr"}
	mul		$tmp35 ___673_dy ___673_dy 	%argrw{"wrr"}
	sub		$tmp36 $tmp34 $tmp35 	%argrw{"wrr"}
	max		$tmp32 $tmp36 $const23 	%argrw{"wrr"}
	sqrt		$tmp31 $tmp32 	%argrw{"wr"}
	mul		___673_dz $tmp30 $tmp31 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:58
#     result = dir * vector(0.5) + vector(0.5);
	vector		$tmp37 ___673_dx ___673_dy ___673_dz 	%line{58} %argrw{"wrrr"}
	normalize	___673_dir $tmp37 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:59
# }
	mul		$tmp39 ___673_dir $const24 	%line{59} %argrw{"wrr"}
	add		heighttonormal_out $tmp39 $const24 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:792
#     mx_normalmap_float(heighttonormal_out, normalmap_scale, geomprop_Nworld_out1, geomprop_Tworld_out1, geomprop_Bworld_out1, normalmap_out);
	assign		normalmap_out $const21 	%line{792} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:793
#     surfaceshader standard_surface_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const25 113 	%line{793} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:79
# }
	assign		$tmp41.x normalmap_scale 	%line{79} %argrw{"wr"}
	assign		$tmp41.y normalmap_scale 	%argrw{"wr"}
	functioncall	$const26 113 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:65
#     {
	eq		$tmp43 heighttonormal_out $const21 	%line{65} %argrw{"wrr"}
	if		$tmp43 100 102 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:67
#     }
	assign		___674_decodedValue $const27 	%line{67} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:71
#     }
	mul		$tmp44 heighttonormal_out $const28 	%line{71} %argrw{"wrr"}
	sub		___674_decodedValue $tmp44 $const14 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:74
# }
	compref		$tmp45 ___674_decodedValue $const1 	%line{74} %argrw{"wrr"}
	mul		$tmp46 geomprop_Tworld_out1 $tmp45 	%argrw{"wrr"}
	mul		$tmp47 $tmp46 $tmp41.x 	%argrw{"wrr"}
	compref		$tmp48 ___674_decodedValue $const29 	%argrw{"wrr"}
	mul		$tmp49 geomprop_Bworld_out1 $tmp48 	%argrw{"wrr"}
	mul		$tmp50 $tmp49 $tmp41.y 	%argrw{"wrr"}
	add		$tmp51 $tmp47 $tmp50 	%argrw{"wrr"}
	compref		$tmp52 ___674_decodedValue $const4 	%argrw{"wrr"}
	mul		$tmp53 geomprop_Nworld_out1 $tmp52 	%argrw{"wrr"}
	add		$tmp54 $tmp51 $tmp53 	%argrw{"wrr"}
	normalize	normalmap_out $tmp54 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:794
#     NG_standard_surface_surfaceshader_100(standard_surface_base, standard_surface_base_color, standard_surface_diffuse_roughness, standard_surface_metalness, standard_surface_specular, standard_surface_specular_color, standard_surface_specular_roughness, standard_surface_specular_IOR, standard_surface_specular_anisotropy, standard_surface_specular_rotation, standard_surface_transmission, standard_surface_transmission_color, standard_surface_transmission_depth, standard_surface_transmission_scatter, standard_surface_transmission_scatter_anisotropy, standard_surface_transmission_dispersion, standard_surface_transmission_extra_roughness, standard_surface_subsurface, standard_surface_subsurface_color, standard_surface_subsurface_radius, standard_surface_subsurface_scale, standard_surface_subsurface_anisotropy, standard_surface_sheen, standard_surface_sheen_color, standard_surface_sheen_roughness, standard_surface_coat, standard_surface_coat_color, standard_surface_coat_roughness, standard_surface_coat_anisotropy, standard_surface_coat_rotation, standard_surface_coat_IOR, geomprop_Nworld_out1, standard_surface_coat_affect_color, standard_surface_coat_affect_roughness, standard_surface_thin_film_thickness, standard_surface_thin_film_IOR, standard_surface_emission, standard_surface_emission_color, standard_surface_opacity, standard_surface_thin_walled, normalmap_out, geomprop_Tworld_out1, standard_surface_out);
	assign		standard_surface_out.bsdf null_closure 	%line{794} %argrw{"wr"}
	assign		standard_surface_out.edf null_closure 	%argrw{"wr"}
	assign		standard_surface_out.opacity $const14 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:795
#     {
	functioncall	$const30 629 	%line{795} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:259
#     vector2 coat_roughness_vector_out = vector2(0.0, 0.0);
	assign		___702_null_closure $const1 	%line{259} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:260
#     mx_roughness_anisotropy(coat_roughness, coat_anisotropy, coat_roughness_vector_out);
	assign		___702_coat_roughness_vector_out.x $const5 	%line{260} %argrw{"wr"}
	assign		___702_coat_roughness_vector_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:261
#     float coat_tangent_rotate_degree_in2_tmp = 360.000000;
	functioncall	$const31 139 	%line{261} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:84
#     if (anisotropy > 0.0)
	mul		$tmp55 standard_surface_coat_roughness standard_surface_coat_roughness 	%line{84} %argrw{"wrr"}
	functioncall	$const33 125 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp56 $tmp55 $const14 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___678_roughness_sqr $tmp56 $const32 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:85
#     {
	gt		$tmp57 standard_surface_coat_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{85} %argrw{"wrr"}
	if		$tmp57 137 139 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:87
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const33 130 	%line{87} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp59 standard_surface_coat_anisotropy $const34 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp58 $tmp59 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:87
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp60 $const14 $tmp58 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{87} %argrw{"wrr"}
	sqrt		___679_aspect $tmp60 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:88
#         result.y = roughness_sqr * aspect;
	div		$tmp61 ___678_roughness_sqr ___679_aspect 	%line{88} %argrw{"wrr"}
	min		___702_coat_roughness_vector_out.x $tmp61 $const14 	%argrw{"wrr"}
	assign		___702_coat_roughness_vector_out.x ___702_coat_roughness_vector_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:89
#     }
	mul		___702_coat_roughness_vector_out.y ___678_roughness_sqr ___679_aspect 	%line{89} %argrw{"wrr"}
	assign		___702_coat_roughness_vector_out.y ___702_coat_roughness_vector_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:93
#         result.y = roughness_sqr;
	assign		___702_coat_roughness_vector_out.x ___678_roughness_sqr 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:94
#     }
	assign		___702_coat_roughness_vector_out.y ___678_roughness_sqr 	%line{94} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:262
#     float coat_tangent_rotate_degree_out = coat_rotation * coat_tangent_rotate_degree_in2_tmp;
	assign		___702_coat_tangent_rotate_degree_in2_tmp $const35 	%line{262} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:263
#     color metal_reflectivity_out = base_color * base;
	mul		___702_coat_tangent_rotate_degree_out standard_surface_coat_rotation ___702_coat_tangent_rotate_degree_in2_tmp 	%line{263} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:264
#     color metal_edgecolor_out = specular_color * specular;
	mul		___702_metal_reflectivity_out standard_surface_base_color standard_surface_base 	%line{264} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:265
#     float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
	mul		___702_metal_edgecolor_out standard_surface_specular_color standard_surface_specular 	%line{265} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:266
#     float tangent_rotate_degree_in2_tmp = 360.000000;
	mul		___702_coat_affect_roughness_multiply1_out standard_surface_coat_affect_roughness standard_surface_coat 	%line{266} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:267
#     float tangent_rotate_degree_out = specular_rotation * tangent_rotate_degree_in2_tmp;
	assign		___702_tangent_rotate_degree_in2_tmp $const35 	%line{267} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:268
#     float transmission_roughness_add_out = specular_roughness + transmission_extra_roughness;
	mul		___702_tangent_rotate_degree_out standard_surface_specular_rotation ___702_tangent_rotate_degree_in2_tmp 	%line{268} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:269
#     float subsurface_color_nonnegative_in2_tmp = 0.000000;
	add		___702_transmission_roughness_add_out standard_surface_specular_roughness standard_surface_transmission_extra_roughness 	%line{269} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:270
#     color subsurface_color_nonnegative_out = max(subsurface_color, subsurface_color_nonnegative_in2_tmp);
	assign		___702_subsurface_color_nonnegative_in2_tmp $const5 	%line{270} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:271
#     float coat_clamped_low_tmp = 0.000000;
	assign		$tmp62 ___702_subsurface_color_nonnegative_in2_tmp 	%line{271} %argrw{"wr"}
	max		___702_subsurface_color_nonnegative_out standard_surface_subsurface_color $tmp62 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:272
#     float coat_clamped_high_tmp = 1.000000;
	assign		___702_coat_clamped_low_tmp $const5 	%line{272} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:273
#     float coat_clamped_out = clamp(coat, coat_clamped_low_tmp, coat_clamped_high_tmp);
	assign		___702_coat_clamped_high_tmp $const14 	%line{273} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:274
#     color subsurface_radius_scaled_out = subsurface_radius * subsurface_scale;
	functioncall	$const33 155 	%line{274} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp63 standard_surface_coat ___702_coat_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___702_coat_clamped_out $tmp63 ___702_coat_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:275
#     float subsurface_selector_out = float(thin_walled);
	mul		___702_subsurface_radius_scaled_out standard_surface_subsurface_radius standard_surface_subsurface_scale 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{275} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:276
#     float base_color_nonnegative_in2_tmp = 0.000000;
	assign		$tmp64 standard_surface_thin_walled 	%line{276} %argrw{"wr"}
	assign		___702_subsurface_selector_out $tmp64 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:277
#     color base_color_nonnegative_out = max(base_color, base_color_nonnegative_in2_tmp);
	assign		___702_base_color_nonnegative_in2_tmp $const5 	%line{277} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:278
#     color coat_attenuation_bg_tmp = color(1.000000, 1.000000, 1.000000);
	assign		$tmp65 ___702_base_color_nonnegative_in2_tmp 	%line{278} %argrw{"wr"}
	max		___702_base_color_nonnegative_out standard_surface_base_color $tmp65 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:279
#     color coat_attenuation_out = mix(coat_attenuation_bg_tmp, coat_color, coat);
	assign		___702_coat_attenuation_bg_tmp $const36 	%line{279} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:280
#     float one_minus_coat_ior_in1_tmp = 1.000000;
	mix		___702_coat_attenuation_out ___702_coat_attenuation_bg_tmp standard_surface_coat_color standard_surface_coat 	%line{280} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:281
#     float one_minus_coat_ior_out = one_minus_coat_ior_in1_tmp - coat_IOR;
	assign		___702_one_minus_coat_ior_in1_tmp $const14 	%line{281} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:282
#     float one_plus_coat_ior_in1_tmp = 1.000000;
	sub		___702_one_minus_coat_ior_out ___702_one_minus_coat_ior_in1_tmp standard_surface_coat_IOR 	%line{282} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:283
#     float one_plus_coat_ior_out = one_plus_coat_ior_in1_tmp + coat_IOR;
	assign		___702_one_plus_coat_ior_in1_tmp $const14 	%line{283} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:284
#     color emission_weight_out = emission_color * emission1;
	add		___702_one_plus_coat_ior_out ___702_one_plus_coat_ior_in1_tmp standard_surface_coat_IOR 	%line{284} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:285
#     color opacity_luminance_out = color(0.0);
	mul		___702_emission_weight_out standard_surface_emission_color standard_surface_emission 	%line{285} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:286
#     mx_luminance_color3(opacity, color(0.272229, 0.674082, 0.053689), opacity_luminance_out);
	assign		___702_opacity_luminance_out $const37 	%line{286} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:287
#     vector coat_tangent_rotate_out = vector(0.0);
	functioncall	$const39 172 	%line{287} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:100
# }
	dot		$tmp67 standard_surface_opacity $const38 	%line{100} %argrw{"wrr"}
	assign		___702_opacity_luminance_out $tmp67 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:288
#     mx_rotate_vector3(tangent, coat_tangent_rotate_degree_out, coat_normal, coat_tangent_rotate_out);
	assign		___702_coat_tangent_rotate_out $const21 	%line{288} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:289
#     color artistic_ior_ior = color(0.0);
	functioncall	$const40 290 	%line{289} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:118
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const41 177 	%line{118} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp68 $const42 $const43 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___683_rotationRadians ___702_coat_tangent_rotate_degree_out $tmp68 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:119
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const44 240 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{119} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:105
#     float s = sin(angle);
	normalize	___682_nAxis geomprop_Nworld_out1 	%line{105} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:106
#     float c = cos(angle);
	sin		___682_s ___683_rotationRadians 	%line{106} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:107
#     float oc = 1.0 - c;
	cos		___682_c ___683_rotationRadians 	%line{107} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:108
# 
	sub		___682_oc $const14 ___682_c 	%line{108} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:110
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp69 ___682_nAxis $const1 	%line{110} %argrw{"wrr"}
	mul		$tmp70 ___682_oc $tmp69 	%argrw{"wrr"}
	compref		$tmp71 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp72 $tmp70 $tmp71 	%argrw{"wrr"}
	add		$tmp73 $tmp72 ___682_c 	%argrw{"wrr"}
	compref		$tmp74 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp75 ___682_oc $tmp74 	%argrw{"wrr"}
	compref		$tmp76 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp77 $tmp75 $tmp76 	%argrw{"wrr"}
	compref		$tmp78 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp79 $tmp78 ___682_s 	%argrw{"wrr"}
	sub		$tmp80 $tmp77 $tmp79 	%argrw{"wrr"}
	compref		$tmp81 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp82 ___682_oc $tmp81 	%argrw{"wrr"}
	compref		$tmp83 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp84 $tmp82 $tmp83 	%argrw{"wrr"}
	compref		$tmp85 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp86 $tmp85 ___682_s 	%argrw{"wrr"}
	add		$tmp87 $tmp84 $tmp86 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:111
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp88 ___682_nAxis $const1 	%line{111} %argrw{"wrr"}
	mul		$tmp89 ___682_oc $tmp88 	%argrw{"wrr"}
	compref		$tmp90 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp91 $tmp89 $tmp90 	%argrw{"wrr"}
	compref		$tmp92 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp93 $tmp92 ___682_s 	%argrw{"wrr"}
	add		$tmp94 $tmp91 $tmp93 	%argrw{"wrr"}
	compref		$tmp95 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp96 ___682_oc $tmp95 	%argrw{"wrr"}
	compref		$tmp97 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp98 $tmp96 $tmp97 	%argrw{"wrr"}
	add		$tmp99 $tmp98 ___682_c 	%argrw{"wrr"}
	compref		$tmp100 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp101 ___682_oc $tmp100 	%argrw{"wrr"}
	compref		$tmp102 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp103 $tmp101 $tmp102 	%argrw{"wrr"}
	compref		$tmp104 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp105 $tmp104 ___682_s 	%argrw{"wrr"}
	sub		$tmp106 $tmp103 $tmp105 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:112
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp107 ___682_nAxis $const4 	%line{112} %argrw{"wrr"}
	mul		$tmp108 ___682_oc $tmp107 	%argrw{"wrr"}
	compref		$tmp109 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp110 $tmp108 $tmp109 	%argrw{"wrr"}
	compref		$tmp111 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp112 $tmp111 ___682_s 	%argrw{"wrr"}
	sub		$tmp113 $tmp110 $tmp112 	%argrw{"wrr"}
	compref		$tmp114 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp115 ___682_oc $tmp114 	%argrw{"wrr"}
	compref		$tmp116 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp117 $tmp115 $tmp116 	%argrw{"wrr"}
	compref		$tmp118 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp119 $tmp118 ___682_s 	%argrw{"wrr"}
	add		$tmp120 $tmp117 $tmp119 	%argrw{"wrr"}
	compref		$tmp121 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp122 ___682_oc $tmp121 	%argrw{"wrr"}
	compref		$tmp123 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp124 $tmp122 $tmp123 	%argrw{"wrr"}
	add		$tmp125 $tmp124 ___682_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:110
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___683_m $tmp73 $tmp80 $tmp87 $const5 $tmp94 $tmp99 $tmp106 $const5 $tmp113 $tmp120 $tmp125 $const5 $const5 $const5 $const5 $const14 	%line{110} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:120
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp126.x geomprop_Tworld_out1 $const1 	%line{120} %argrw{"wrr"}
	compref		$tmp126.y geomprop_Tworld_out1 $const29 	%argrw{"wrr"}
	compref		$tmp126.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp126.w $const14 	%argrw{"wr"}
	functioncall	$const2 289 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp127 ___683_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp128 $tmp127 $tmp126.x 	%argrw{"wrr"}
	mxcompref	$tmp129 ___683_m $const29 $const1 	%argrw{"wrrr"}
	mul		$tmp130 $tmp129 $tmp126.y 	%argrw{"wrr"}
	add		$tmp131 $tmp128 $tmp130 	%argrw{"wrr"}
	mxcompref	$tmp132 ___683_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp133 $tmp132 $tmp126.z 	%argrw{"wrr"}
	add		$tmp134 $tmp131 $tmp133 	%argrw{"wrr"}
	mxcompref	$tmp135 ___683_m $const45 $const1 	%argrw{"wrrr"}
	mul		$tmp136 $tmp135 $tmp126.w 	%argrw{"wrr"}
	add		___683_trans.x $tmp134 $tmp136 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp137 ___683_m $const1 $const29 	%line{416} %argrw{"wrrr"}
	mul		$tmp138 $tmp137 $tmp126.x 	%argrw{"wrr"}
	mxcompref	$tmp139 ___683_m $const29 $const29 	%argrw{"wrrr"}
	mul		$tmp140 $tmp139 $tmp126.y 	%argrw{"wrr"}
	add		$tmp141 $tmp138 $tmp140 	%argrw{"wrr"}
	mxcompref	$tmp142 ___683_m $const4 $const29 	%argrw{"wrrr"}
	mul		$tmp143 $tmp142 $tmp126.z 	%argrw{"wrr"}
	add		$tmp144 $tmp141 $tmp143 	%argrw{"wrr"}
	mxcompref	$tmp145 ___683_m $const45 $const29 	%argrw{"wrrr"}
	mul		$tmp146 $tmp145 $tmp126.w 	%argrw{"wrr"}
	add		___683_trans.y $tmp144 $tmp146 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp147 ___683_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp148 $tmp147 $tmp126.x 	%argrw{"wrr"}
	mxcompref	$tmp149 ___683_m $const29 $const4 	%argrw{"wrrr"}
	mul		$tmp150 $tmp149 $tmp126.y 	%argrw{"wrr"}
	add		$tmp151 $tmp148 $tmp150 	%argrw{"wrr"}
	mxcompref	$tmp152 ___683_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp153 $tmp152 $tmp126.z 	%argrw{"wrr"}
	add		$tmp154 $tmp151 $tmp153 	%argrw{"wrr"}
	mxcompref	$tmp155 ___683_m $const45 $const4 	%argrw{"wrrr"}
	mul		$tmp156 $tmp155 $tmp126.w 	%argrw{"wrr"}
	add		___683_trans.z $tmp154 $tmp156 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp157 ___683_m $const1 $const45 	%line{418} %argrw{"wrrr"}
	mul		$tmp158 $tmp157 $tmp126.x 	%argrw{"wrr"}
	mxcompref	$tmp159 ___683_m $const29 $const45 	%argrw{"wrrr"}
	mul		$tmp160 $tmp159 $tmp126.y 	%argrw{"wrr"}
	add		$tmp161 $tmp158 $tmp160 	%argrw{"wrr"}
	mxcompref	$tmp162 ___683_m $const4 $const45 	%argrw{"wrrr"}
	mul		$tmp163 $tmp162 $tmp126.z 	%argrw{"wrr"}
	add		$tmp164 $tmp161 $tmp163 	%argrw{"wrr"}
	mxcompref	$tmp165 ___683_m $const45 $const45 	%argrw{"wrrr"}
	mul		$tmp166 $tmp165 $tmp126.w 	%argrw{"wrr"}
	add		___683_trans.w $tmp164 $tmp166 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:121
# }
	vector		___702_coat_tangent_rotate_out ___683_trans.x ___683_trans.y ___683_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{121} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:290
#     color artistic_ior_extinction = color(0.0);
	assign		___702_artistic_ior_ior $const37 	%line{290} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:291
#     mx_artistic_ior(metal_reflectivity_out, metal_edgecolor_out, artistic_ior_ior, artistic_ior_extinction);
	assign		___702_artistic_ior_extinction $const37 	%line{291} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:292
#     float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
	functioncall	$const46 317 	%line{292} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:129
#     color r_sqrt = sqrt(r);
	assign		$tmp167 $const5 	%line{129} %argrw{"wr"}
	assign		$tmp168 $const47 	%argrw{"wr"}
	functioncall	$const33 298 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:140
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp169 ___702_metal_reflectivity_out $tmp168 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{140} %argrw{"wrr"}
	max		___684_r $tmp169 $tmp167 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:130
#     color n_min = (1.0 - r) / (1.0 + r);
	sqrt		___684_r_sqrt ___684_r 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{130} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:131
#     color n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
	sub		$tmp170 $const14 ___684_r 	%line{131} %argrw{"wrr"}
	add		$tmp171 $const14 ___684_r 	%argrw{"wrr"}
	div		___684_n_min $tmp170 $tmp171 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:132
#     ior = mix(n_max, n_min, edge_color);
	add		$tmp172 $const14 ___684_r_sqrt 	%line{132} %argrw{"wrr"}
	sub		$tmp173 $const14 ___684_r_sqrt 	%argrw{"wrr"}
	div		___684_n_max $tmp172 $tmp173 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:133
# 
	mix		___702_artistic_ior_ior ___684_n_max ___684_n_min ___702_metal_edgecolor_out 	%line{133} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:135
#     color nm1 = ior - 1.0;
	add		___684_np1 ___702_artistic_ior_ior $const14 	%line{135} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:136
#     color k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
	sub		___684_nm1 ___702_artistic_ior_ior $const14 	%line{136} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:137
#     k2 = max(k2, 0.0);
	mul		$tmp174 ___684_np1 ___684_np1 	%line{137} %argrw{"wrr"}
	mul		$tmp175 $tmp174 ___684_r 	%argrw{"wrr"}
	mul		$tmp176 ___684_nm1 ___684_nm1 	%argrw{"wrr"}
	sub		$tmp177 $tmp175 $tmp176 	%argrw{"wrr"}
	sub		$tmp178 $const14 ___684_r 	%argrw{"wrr"}
	div		___684_k2 $tmp177 $tmp178 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:138
#     extinction = sqrt(k2);
	assign		$tmp179 $const5 	%line{138} %argrw{"wr"}
	max		___684_k2 ___684_k2 $tmp179 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:139
# }
	sqrt		___702_artistic_ior_extinction ___684_k2 	%line{139} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:293
#     vector tangent_rotate_out = vector(0.0);
	mul		___702_coat_affect_roughness_multiply2_out ___702_coat_affect_roughness_multiply1_out standard_surface_coat_roughness 	%line{293} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:294
#     mx_rotate_vector3(tangent, tangent_rotate_degree_out, normal1, tangent_rotate_out);
	assign		___702_tangent_rotate_out $const21 	%line{294} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:295
#     float transmission_roughness_clamped_low_tmp = 0.000000;
	functioncall	$const40 436 	%line{295} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:118
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const41 323 	%line{118} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp180 $const42 $const43 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___683_rotationRadians ___702_tangent_rotate_degree_out $tmp180 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:119
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const44 386 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{119} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:105
#     float s = sin(angle);
	normalize	___682_nAxis normalmap_out 	%line{105} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:106
#     float c = cos(angle);
	sin		___682_s ___683_rotationRadians 	%line{106} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:107
#     float oc = 1.0 - c;
	cos		___682_c ___683_rotationRadians 	%line{107} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:108
# 
	sub		___682_oc $const14 ___682_c 	%line{108} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:110
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp181 ___682_nAxis $const1 	%line{110} %argrw{"wrr"}
	mul		$tmp182 ___682_oc $tmp181 	%argrw{"wrr"}
	compref		$tmp183 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp184 $tmp182 $tmp183 	%argrw{"wrr"}
	add		$tmp185 $tmp184 ___682_c 	%argrw{"wrr"}
	compref		$tmp186 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp187 ___682_oc $tmp186 	%argrw{"wrr"}
	compref		$tmp188 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp189 $tmp187 $tmp188 	%argrw{"wrr"}
	compref		$tmp190 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp191 $tmp190 ___682_s 	%argrw{"wrr"}
	sub		$tmp192 $tmp189 $tmp191 	%argrw{"wrr"}
	compref		$tmp193 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp194 ___682_oc $tmp193 	%argrw{"wrr"}
	compref		$tmp195 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp196 $tmp194 $tmp195 	%argrw{"wrr"}
	compref		$tmp197 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp198 $tmp197 ___682_s 	%argrw{"wrr"}
	add		$tmp199 $tmp196 $tmp198 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:111
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp200 ___682_nAxis $const1 	%line{111} %argrw{"wrr"}
	mul		$tmp201 ___682_oc $tmp200 	%argrw{"wrr"}
	compref		$tmp202 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp203 $tmp201 $tmp202 	%argrw{"wrr"}
	compref		$tmp204 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp205 $tmp204 ___682_s 	%argrw{"wrr"}
	add		$tmp206 $tmp203 $tmp205 	%argrw{"wrr"}
	compref		$tmp207 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp208 ___682_oc $tmp207 	%argrw{"wrr"}
	compref		$tmp209 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp210 $tmp208 $tmp209 	%argrw{"wrr"}
	add		$tmp211 $tmp210 ___682_c 	%argrw{"wrr"}
	compref		$tmp212 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp213 ___682_oc $tmp212 	%argrw{"wrr"}
	compref		$tmp214 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp215 $tmp213 $tmp214 	%argrw{"wrr"}
	compref		$tmp216 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp217 $tmp216 ___682_s 	%argrw{"wrr"}
	sub		$tmp218 $tmp215 $tmp217 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:112
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp219 ___682_nAxis $const4 	%line{112} %argrw{"wrr"}
	mul		$tmp220 ___682_oc $tmp219 	%argrw{"wrr"}
	compref		$tmp221 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp222 $tmp220 $tmp221 	%argrw{"wrr"}
	compref		$tmp223 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp224 $tmp223 ___682_s 	%argrw{"wrr"}
	sub		$tmp225 $tmp222 $tmp224 	%argrw{"wrr"}
	compref		$tmp226 ___682_nAxis $const29 	%argrw{"wrr"}
	mul		$tmp227 ___682_oc $tmp226 	%argrw{"wrr"}
	compref		$tmp228 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp229 $tmp227 $tmp228 	%argrw{"wrr"}
	compref		$tmp230 ___682_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp231 $tmp230 ___682_s 	%argrw{"wrr"}
	add		$tmp232 $tmp229 $tmp231 	%argrw{"wrr"}
	compref		$tmp233 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp234 ___682_oc $tmp233 	%argrw{"wrr"}
	compref		$tmp235 ___682_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp236 $tmp234 $tmp235 	%argrw{"wrr"}
	add		$tmp237 $tmp236 ___682_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:110
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___683_m $tmp185 $tmp192 $tmp199 $const5 $tmp206 $tmp211 $tmp218 $const5 $tmp225 $tmp232 $tmp237 $const5 $const5 $const5 $const5 $const14 	%line{110} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:120
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp238.x geomprop_Tworld_out1 $const1 	%line{120} %argrw{"wrr"}
	compref		$tmp238.y geomprop_Tworld_out1 $const29 	%argrw{"wrr"}
	compref		$tmp238.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp238.w $const14 	%argrw{"wr"}
	functioncall	$const2 435 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp239 ___683_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp240 $tmp239 $tmp238.x 	%argrw{"wrr"}
	mxcompref	$tmp241 ___683_m $const29 $const1 	%argrw{"wrrr"}
	mul		$tmp242 $tmp241 $tmp238.y 	%argrw{"wrr"}
	add		$tmp243 $tmp240 $tmp242 	%argrw{"wrr"}
	mxcompref	$tmp244 ___683_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp245 $tmp244 $tmp238.z 	%argrw{"wrr"}
	add		$tmp246 $tmp243 $tmp245 	%argrw{"wrr"}
	mxcompref	$tmp247 ___683_m $const45 $const1 	%argrw{"wrrr"}
	mul		$tmp248 $tmp247 $tmp238.w 	%argrw{"wrr"}
	add		___683_trans.x $tmp246 $tmp248 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp249 ___683_m $const1 $const29 	%line{416} %argrw{"wrrr"}
	mul		$tmp250 $tmp249 $tmp238.x 	%argrw{"wrr"}
	mxcompref	$tmp251 ___683_m $const29 $const29 	%argrw{"wrrr"}
	mul		$tmp252 $tmp251 $tmp238.y 	%argrw{"wrr"}
	add		$tmp253 $tmp250 $tmp252 	%argrw{"wrr"}
	mxcompref	$tmp254 ___683_m $const4 $const29 	%argrw{"wrrr"}
	mul		$tmp255 $tmp254 $tmp238.z 	%argrw{"wrr"}
	add		$tmp256 $tmp253 $tmp255 	%argrw{"wrr"}
	mxcompref	$tmp257 ___683_m $const45 $const29 	%argrw{"wrrr"}
	mul		$tmp258 $tmp257 $tmp238.w 	%argrw{"wrr"}
	add		___683_trans.y $tmp256 $tmp258 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp259 ___683_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp260 $tmp259 $tmp238.x 	%argrw{"wrr"}
	mxcompref	$tmp261 ___683_m $const29 $const4 	%argrw{"wrrr"}
	mul		$tmp262 $tmp261 $tmp238.y 	%argrw{"wrr"}
	add		$tmp263 $tmp260 $tmp262 	%argrw{"wrr"}
	mxcompref	$tmp264 ___683_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp265 $tmp264 $tmp238.z 	%argrw{"wrr"}
	add		$tmp266 $tmp263 $tmp265 	%argrw{"wrr"}
	mxcompref	$tmp267 ___683_m $const45 $const4 	%argrw{"wrrr"}
	mul		$tmp268 $tmp267 $tmp238.w 	%argrw{"wrr"}
	add		___683_trans.z $tmp266 $tmp268 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp269 ___683_m $const1 $const45 	%line{418} %argrw{"wrrr"}
	mul		$tmp270 $tmp269 $tmp238.x 	%argrw{"wrr"}
	mxcompref	$tmp271 ___683_m $const29 $const45 	%argrw{"wrrr"}
	mul		$tmp272 $tmp271 $tmp238.y 	%argrw{"wrr"}
	add		$tmp273 $tmp270 $tmp272 	%argrw{"wrr"}
	mxcompref	$tmp274 ___683_m $const4 $const45 	%argrw{"wrrr"}
	mul		$tmp275 $tmp274 $tmp238.z 	%argrw{"wrr"}
	add		$tmp276 $tmp273 $tmp275 	%argrw{"wrr"}
	mxcompref	$tmp277 ___683_m $const45 $const45 	%argrw{"wrrr"}
	mul		$tmp278 $tmp277 $tmp238.w 	%argrw{"wrr"}
	add		___683_trans.w $tmp276 $tmp278 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:121
# }
	vector		___702_tangent_rotate_out ___683_trans.x ___683_trans.y ___683_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{121} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:296
#     float transmission_roughness_clamped_high_tmp = 1.000000;
	assign		___702_transmission_roughness_clamped_low_tmp $const5 	%line{296} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:297
#     float transmission_roughness_clamped_out = clamp(transmission_roughness_add_out, transmission_roughness_clamped_low_tmp, transmission_roughness_clamped_high_tmp);
	assign		___702_transmission_roughness_clamped_high_tmp $const14 	%line{297} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:298
#     float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
	functioncall	$const33 441 	%line{298} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp279 ___702_transmission_roughness_add_out ___702_transmission_roughness_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___702_transmission_roughness_clamped_out $tmp279 ___702_transmission_roughness_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:299
#     float coat_ior_to_F0_sqrt_out = one_minus_coat_ior_out / one_plus_coat_ior_out;
	mul		___702_coat_gamma_multiply_out ___702_coat_clamped_out standard_surface_coat_affect_color 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{299} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:300
#     int opacity_luminance_float_index_tmp = 0;
	div		___702_coat_ior_to_F0_sqrt_out ___702_one_minus_coat_ior_out ___702_one_plus_coat_ior_out 	%line{300} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:301
#     float opacity_luminance_float_out = mx_extract(opacity_luminance_out, opacity_luminance_float_index_tmp);
	assign		___702_opacity_luminance_float_index_tmp $const1 	%line{301} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:302
#     vector coat_tangent_rotate_normalize_out = normalize(coat_tangent_rotate_out);
	functioncall	$const48 446 	%line{302} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___702_opacity_luminance_float_out ___702_opacity_luminance_out ___702_opacity_luminance_float_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:303
#     float coat_affected_roughness_fg_tmp = 1.000000;
	normalize	___702_coat_tangent_rotate_normalize_out ___702_coat_tangent_rotate_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{303} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:304
#     float coat_affected_roughness_out = mix(specular_roughness, coat_affected_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___702_coat_affected_roughness_fg_tmp $const14 	%line{304} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:305
#     vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
	mix		___702_coat_affected_roughness_out standard_surface_specular_roughness ___702_coat_affected_roughness_fg_tmp ___702_coat_affect_roughness_multiply2_out 	%line{305} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:306
#     float coat_affected_transmission_roughness_fg_tmp = 1.000000;
	normalize	___702_tangent_rotate_normalize_out ___702_tangent_rotate_out 	%line{306} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:307
#     float coat_affected_transmission_roughness_out = mix(transmission_roughness_clamped_out, coat_affected_transmission_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___702_coat_affected_transmission_roughness_fg_tmp $const14 	%line{307} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:308
#     float coat_gamma_in2_tmp = 1.000000;
	mix		___702_coat_affected_transmission_roughness_out ___702_transmission_roughness_clamped_out ___702_coat_affected_transmission_roughness_fg_tmp ___702_coat_affect_roughness_multiply2_out 	%line{308} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:309
#     float coat_gamma_out = coat_gamma_multiply_out + coat_gamma_in2_tmp;
	assign		___702_coat_gamma_in2_tmp $const14 	%line{309} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:310
#     float coat_ior_to_F0_out = coat_ior_to_F0_sqrt_out * coat_ior_to_F0_sqrt_out;
	add		___702_coat_gamma_out ___702_coat_gamma_multiply_out ___702_coat_gamma_in2_tmp 	%line{310} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:311
#     float coat_tangent_value2_tmp = 0.000000;
	mul		___702_coat_ior_to_F0_out ___702_coat_ior_to_F0_sqrt_out ___702_coat_ior_to_F0_sqrt_out 	%line{311} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:312
#     vector coat_tangent_out = mx_ternary(coat_anisotropy > coat_tangent_value2_tmp, coat_tangent_rotate_normalize_out, tangent);
	assign		___702_coat_tangent_value2_tmp $const5 	%line{312} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:313
#     vector2 main_roughness_out = vector2(0.0, 0.0);
	gt		$tmp280 standard_surface_coat_anisotropy ___702_coat_tangent_value2_tmp 	%line{313} %argrw{"wrr"}
	functioncall	$const49 463 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp280 461 463 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___702_coat_tangent_out ___702_coat_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___702_coat_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:314
#     mx_roughness_anisotropy(coat_affected_roughness_out, specular_anisotropy, main_roughness_out);
	assign		___702_main_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{314} %argrw{"wr"}
	assign		___702_main_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:315
#     float main_tangent_value2_tmp = 0.000000;
	functioncall	$const31 484 	%line{315} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:84
#     if (anisotropy > 0.0)
	mul		$tmp281 ___702_coat_affected_roughness_out ___702_coat_affected_roughness_out 	%line{84} %argrw{"wrr"}
	functioncall	$const33 470 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp282 $tmp281 $const14 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___678_roughness_sqr $tmp282 $const32 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:85
#     {
	gt		$tmp283 standard_surface_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{85} %argrw{"wrr"}
	if		$tmp283 482 484 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:87
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const33 475 	%line{87} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp285 standard_surface_specular_anisotropy $const34 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp284 $tmp285 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:87
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp286 $const14 $tmp284 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{87} %argrw{"wrr"}
	sqrt		___679_aspect $tmp286 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:88
#         result.y = roughness_sqr * aspect;
	div		$tmp287 ___678_roughness_sqr ___679_aspect 	%line{88} %argrw{"wrr"}
	min		___702_main_roughness_out.x $tmp287 $const14 	%argrw{"wrr"}
	assign		___702_main_roughness_out.x ___702_main_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:89
#     }
	mul		___702_main_roughness_out.y ___678_roughness_sqr ___679_aspect 	%line{89} %argrw{"wrr"}
	assign		___702_main_roughness_out.y ___702_main_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:93
#         result.y = roughness_sqr;
	assign		___702_main_roughness_out.x ___678_roughness_sqr 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:94
#     }
	assign		___702_main_roughness_out.y ___678_roughness_sqr 	%line{94} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:316
#     vector main_tangent_out = mx_ternary(specular_anisotropy > main_tangent_value2_tmp, tangent_rotate_normalize_out, tangent);
	assign		___702_main_tangent_value2_tmp $const5 	%line{316} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:317
#     vector2 transmission_roughness_out = vector2(0.0, 0.0);
	gt		$tmp288 standard_surface_specular_anisotropy ___702_main_tangent_value2_tmp 	%line{317} %argrw{"wrr"}
	functioncall	$const49 492 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp288 490 492 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___702_main_tangent_out ___702_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___702_main_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:318
#     mx_roughness_anisotropy(coat_affected_transmission_roughness_out, specular_anisotropy, transmission_roughness_out);
	assign		___702_transmission_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{318} %argrw{"wr"}
	assign		___702_transmission_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:319
#     color coat_affected_subsurface_color_out = pow(subsurface_color_nonnegative_out, coat_gamma_out);
	functioncall	$const31 513 	%line{319} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:84
#     if (anisotropy > 0.0)
	mul		$tmp289 ___702_coat_affected_transmission_roughness_out ___702_coat_affected_transmission_roughness_out 	%line{84} %argrw{"wrr"}
	functioncall	$const33 499 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp290 $tmp289 $const14 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___678_roughness_sqr $tmp290 $const32 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:85
#     {
	gt		$tmp291 standard_surface_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{85} %argrw{"wrr"}
	if		$tmp291 511 513 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:87
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const33 504 	%line{87} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp293 standard_surface_specular_anisotropy $const34 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp292 $tmp293 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:87
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp294 $const14 $tmp292 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{87} %argrw{"wrr"}
	sqrt		___679_aspect $tmp294 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:88
#         result.y = roughness_sqr * aspect;
	div		$tmp295 ___678_roughness_sqr ___679_aspect 	%line{88} %argrw{"wrr"}
	min		___702_transmission_roughness_out.x $tmp295 $const14 	%argrw{"wrr"}
	assign		___702_transmission_roughness_out.x ___702_transmission_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:89
#     }
	mul		___702_transmission_roughness_out.y ___678_roughness_sqr ___679_aspect 	%line{89} %argrw{"wrr"}
	assign		___702_transmission_roughness_out.y ___702_transmission_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:93
#         result.y = roughness_sqr;
	assign		___702_transmission_roughness_out.x ___678_roughness_sqr 	%line{93} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:94
#     }
	assign		___702_transmission_roughness_out.y ___678_roughness_sqr 	%line{94} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:320
#     color coat_affected_diffuse_color_out = pow(base_color_nonnegative_out, coat_gamma_out);
	pow		___702_coat_affected_subsurface_color_out ___702_subsurface_color_nonnegative_out ___702_coat_gamma_out 	%line{320} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:321
#     float one_minus_coat_ior_to_F0_in1_tmp = 1.000000;
	pow		___702_coat_affected_diffuse_color_out ___702_base_color_nonnegative_out ___702_coat_gamma_out 	%line{321} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:322
#     float one_minus_coat_ior_to_F0_out = one_minus_coat_ior_to_F0_in1_tmp - coat_ior_to_F0_out;
	assign		___702_one_minus_coat_ior_to_F0_in1_tmp $const14 	%line{322} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:323
#     color emission_color0_out = color(0.0);
	sub		___702_one_minus_coat_ior_to_F0_out ___702_one_minus_coat_ior_to_F0_in1_tmp ___702_coat_ior_to_F0_out 	%line{323} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:324
#     NG_convert_float_color3(one_minus_coat_ior_to_F0_out, emission_color0_out);
	assign		___702_emission_color0_out $const37 	%line{324} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:325
#     BSDF coat_bsdf_out = null_closure;
	functioncall	$const50 521 	%line{325} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:160
#     out = combine_out;
	color		___687_combine_out ___702_one_minus_coat_ior_to_F0_out ___702_one_minus_coat_ior_to_F0_out ___702_one_minus_coat_ior_to_F0_out 	%line{160} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:161
# }
	assign		___702_emission_color0_out ___687_combine_out 	%line{161} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:326
#     mx_dielectric_bsdf(coat, color(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, 0.000000, 1.500000, coat_normal, coat_tangent_out, "ggx", "R", coat_bsdf_out);
	assign		___702_coat_bsdf_out ___702_null_closure 	%line{326} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:327
#     float metal_bsdf_weight_tmp = 1.000000;
	functioncall	$const54 533 	%line{327} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:144
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp297 $const53 $const55 	%line{144} %argrw{"wrr"}
	if		$tmp297 526 527 	%argrw{"r"}
	assign		___685_reflection_tint $const37 	%argrw{"wr"}
	assign		___685_reflection_tint $const36 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:145
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp298 $const53 $const53 	%line{145} %argrw{"wrr"}
	if		$tmp298 530 531 	%argrw{"r"}
	assign		___685_transmission_tint $const37 	%argrw{"wr"}
	assign		___685_transmission_tint $const36 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:146
# }
	closure		$tmp299 $const58 geomprop_Nworld_out1 ___702_coat_tangent_out ___685_reflection_tint ___685_transmission_tint ___702_coat_roughness_vector_out.x ___702_coat_roughness_vector_out.y standard_surface_coat_IOR $const52 $const56 $const5 $const57 $const51 	%line{146} %argrw{"wrrrrrrrrrrrrr"}
	mul		___702_coat_bsdf_out $tmp299 standard_surface_coat 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:328
#     string metal_bsdf_distribution_tmp = "ggx";
	assign		___702_metal_bsdf_weight_tmp $const14 	%line{328} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:329
#     BSDF metal_bsdf_out = metal_bsdf_weight_tmp * conductor_bsdf(normal1, main_tangent_out, main_roughness_out.x, main_roughness_out.y, artistic_ior_ior, artistic_ior_extinction, metal_bsdf_distribution_tmp, "thinfilm_thickness", thin_film_thickness, "thinfilm_ior", thin_film_IOR);
	assign		___702_metal_bsdf_distribution_tmp $const52 	%line{329} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:330
#     BSDF specular_bsdf_out = null_closure;
	closure		$tmp300 $const59 normalmap_out ___702_main_tangent_out ___702_main_roughness_out.x ___702_main_roughness_out.y ___702_artistic_ior_ior ___702_artistic_ior_extinction ___702_metal_bsdf_distribution_tmp $const56 standard_surface_thin_film_thickness $const57 standard_surface_thin_film_IOR 	%line{330} %argrw{"wrrrrrrrrrrrr"}
	mul		___702_metal_bsdf_out $tmp300 ___702_metal_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:331
#     mx_dielectric_bsdf(specular, specular_color, specular_IOR, main_roughness_out, thin_film_thickness, thin_film_IOR, normal1, main_tangent_out, "ggx", "R", specular_bsdf_out);
	assign		___702_specular_bsdf_out ___702_null_closure 	%line{331} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:332
#     BSDF transmission_bsdf_out = null_closure;
	functioncall	$const54 549 	%line{332} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:144
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp301 $const53 $const55 	%line{144} %argrw{"wrr"}
	if		$tmp301 542 543 	%argrw{"r"}
	assign		___685_reflection_tint $const37 	%argrw{"wr"}
	assign		___685_reflection_tint standard_surface_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:145
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp302 $const53 $const53 	%line{145} %argrw{"wrr"}
	if		$tmp302 546 547 	%argrw{"r"}
	assign		___685_transmission_tint $const37 	%argrw{"wr"}
	assign		___685_transmission_tint standard_surface_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:146
# }
	closure		$tmp303 $const58 normalmap_out ___702_main_tangent_out ___685_reflection_tint ___685_transmission_tint ___702_main_roughness_out.x ___702_main_roughness_out.y standard_surface_specular_IOR $const52 $const56 standard_surface_thin_film_thickness $const57 standard_surface_thin_film_IOR 	%line{146} %argrw{"wrrrrrrrrrrrrr"}
	mul		___702_specular_bsdf_out $tmp303 standard_surface_specular 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:333
#     mx_dielectric_bsdf(1.000000, transmission_color, specular_IOR, transmission_roughness_out, 0.000000, 1.500000, normal1, main_tangent_out, "ggx", "T", transmission_bsdf_out);
	assign		___702_transmission_bsdf_out ___702_null_closure 	%line{333} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:334
#     BSDF sheen_bsdf_out = sheen1 * sheen_bsdf(normal1, sheen_color, sheen_roughness);
	functioncall	$const54 561 	%line{334} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:144
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp304 $const55 $const55 	%line{144} %argrw{"wrr"}
	if		$tmp304 554 555 	%argrw{"r"}
	assign		___685_reflection_tint $const37 	%argrw{"wr"}
	assign		___685_reflection_tint standard_surface_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:145
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp305 $const55 $const53 	%line{145} %argrw{"wrr"}
	if		$tmp305 558 559 	%argrw{"r"}
	assign		___685_transmission_tint $const37 	%argrw{"wr"}
	assign		___685_transmission_tint standard_surface_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:146
# }
	closure		$tmp306 $const58 normalmap_out ___702_main_tangent_out ___685_reflection_tint ___685_transmission_tint ___702_transmission_roughness_out.x ___702_transmission_roughness_out.y standard_surface_specular_IOR $const52 $const56 $const5 $const57 $const51 	%line{146} %argrw{"wrrrrrrrrrrrrr"}
	mul		___702_transmission_bsdf_out $tmp306 $const14 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:335
#     float translucent_bsdf_weight_tmp = 1.000000;
	closure		$tmp307 $const60 normalmap_out standard_surface_sheen_color standard_surface_sheen_roughness 	%line{335} %argrw{"wrrrr"}
	mul		___702_sheen_bsdf_out $tmp307 standard_surface_sheen 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:336
#     BSDF translucent_bsdf_out = translucent_bsdf_weight_tmp * translucent_bsdf(normal1, coat_affected_subsurface_color_out);
	assign		___702_translucent_bsdf_weight_tmp $const14 	%line{336} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:337
#     BSDF subsurface_bsdf_out = null_closure;
	closure		$tmp308 $const61 normalmap_out ___702_coat_affected_subsurface_color_out 	%line{337} %argrw{"wrrr"}
	mul		___702_translucent_bsdf_out $tmp308 ___702_translucent_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:338
#     mx_subsurface_bsdf(1.000000, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal1, subsurface_bsdf_out);
	assign		___702_subsurface_bsdf_out ___702_null_closure 	%line{338} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:339
#     BSDF selected_subsurface_bsdf_out = mix(subsurface_bsdf_out, translucent_bsdf_out, subsurface_selector_out);
	functioncall	$const62 570 	%line{339} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:154
# #endif
	mul		$tmp309 $const14 ___702_coat_affected_subsurface_color_out 	%line{154} %argrw{"wrr"}
	closure		___702_subsurface_bsdf_out $const63 normalmap_out $tmp309 $const14 ___702_subsurface_radius_scaled_out standard_surface_subsurface_anisotropy 	%argrw{"wrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:340
#     BSDF diffuse_bsdf_out = base * oren_nayar_diffuse_bsdf(normal1, coat_affected_diffuse_color_out, diffuse_roughness);
	functioncall	$const64 575 	%line{340} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp310 $const14 ___702_subsurface_selector_out 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp311 ___702_subsurface_bsdf_out $tmp310 	%argrw{"wrr"}
	mul		$tmp312 ___702_translucent_bsdf_out ___702_subsurface_selector_out 	%argrw{"wrr"}
	add		___702_selected_subsurface_bsdf_out $tmp311 $tmp312 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:341
#     BSDF subsurface_mix_out = mix(diffuse_bsdf_out, selected_subsurface_bsdf_out, subsurface1);
	closure		$tmp313 $const65 normalmap_out ___702_coat_affected_diffuse_color_out standard_surface_diffuse_roughness 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{341} %argrw{"wrrrr"}
	mul		___702_diffuse_bsdf_out $tmp313 standard_surface_base 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:342
#     BSDF sheen_layer_out = layer(sheen_bsdf_out, subsurface_mix_out);
	functioncall	$const64 582 	%line{342} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp314 $const14 standard_surface_subsurface 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp315 ___702_diffuse_bsdf_out $tmp314 	%argrw{"wrr"}
	mul		$tmp316 ___702_selected_subsurface_bsdf_out standard_surface_subsurface 	%argrw{"wrr"}
	add		___702_subsurface_mix_out $tmp315 $tmp316 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:343
#     BSDF transmission_mix_out = mix(sheen_layer_out, transmission_bsdf_out, transmission);
	closure		___702_sheen_layer_out $const66 ___702_sheen_bsdf_out ___702_subsurface_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{343} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:344
#     BSDF specular_layer_out = layer(specular_bsdf_out, transmission_mix_out);
	functioncall	$const64 588 	%line{344} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp317 $const14 standard_surface_transmission 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp318 ___702_sheen_layer_out $tmp317 	%argrw{"wrr"}
	mul		$tmp319 ___702_transmission_bsdf_out standard_surface_transmission 	%argrw{"wrr"}
	add		___702_transmission_mix_out $tmp318 $tmp319 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:345
#     BSDF metalness_mix_out = mix(specular_layer_out, metal_bsdf_out, metalness);
	closure		___702_specular_layer_out $const66 ___702_specular_bsdf_out ___702_transmission_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{345} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:346
#     BSDF thin_film_layer_attenuated_out = (coat_attenuation_out * metalness_mix_out);
	functioncall	$const64 594 	%line{346} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp320 $const14 standard_surface_metalness 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp321 ___702_specular_layer_out $tmp320 	%argrw{"wrr"}
	mul		$tmp322 ___702_metal_bsdf_out standard_surface_metalness 	%argrw{"wrr"}
	add		___702_metalness_mix_out $tmp321 $tmp322 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:347
#     BSDF coat_layer_out = layer(coat_bsdf_out, thin_film_layer_attenuated_out);
	mul		___702_thin_film_layer_attenuated_out ___702_metalness_mix_out ___702_coat_attenuation_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{347} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:348
#     EDF emission_edf_out = uniform_edf(emission_weight_out);
	closure		___702_coat_layer_out $const66 ___702_coat_bsdf_out ___702_thin_film_layer_attenuated_out 	%line{348} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:349
#     EDF coat_tinted_emission_edf_out = (coat_color * emission_edf_out);
	closure		___702_emission_edf_out $const67 ___702_emission_weight_out 	%line{349} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:350
#     EDF coat_emission_edf_out = null_closure;
	mul		___702_coat_tinted_emission_edf_out ___702_emission_edf_out standard_surface_coat_color 	%line{350} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:351
#     mx_generalized_schlick_edf(emission_color0_out, color(0.000000, 0.000000, 0.000000), 5.000000, coat_tinted_emission_edf_out, coat_emission_edf_out);
	assign		___702_coat_emission_edf_out ___702_null_closure 	%line{351} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:352
#     EDF blended_coat_emission_edf_out = mix(emission_edf_out, coat_emission_edf_out, coat);
	functioncall	$const69 611 	%line{352} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:245
#     color f = mx_fresnel_schlick(NdotV, color0, color90, exponent);
	neg		$tmp325 I 	%line{245} %argrw{"wr"}
	dot		$tmp324 N $tmp325 	%argrw{"wrr"}
	fabs		___700_NdotV $tmp324 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:246
#     result = base * f;
	functioncall	$const70 610 	%line{246} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:239
#     return mix(f0, f90, pow(x, exponent));
	sub		$tmp326 $const14 ___700_NdotV 	%line{239} %argrw{"wrr"}
	functioncall	$const33 608 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp327 $tmp326 $const14 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___699_x $tmp327 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:240
# }
	pow		$tmp328 ___699_x $const68 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{240} %argrw{"wrr"}
	mix		___700_f ___702_emission_color0_out $const37 $tmp328 	%argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:247
# }
	mul		___702_coat_emission_edf_out ___702_coat_tinted_emission_edf_out ___700_f 	%line{247} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:353
#     surfaceshader shader_constructor_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const64 616 	%line{353} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp329 $const14 standard_surface_coat 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp330 ___702_emission_edf_out $tmp329 	%argrw{"wrr"}
	mul		$tmp331 ___702_coat_emission_edf_out standard_surface_coat 	%argrw{"wrr"}
	add		___702_blended_coat_emission_edf_out $tmp330 $tmp331 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:354
#     mx_surface(coat_layer_out, blended_coat_emission_edf_out, opacity_luminance_float_out, 0, shader_constructor_out);
	assign		___702_shader_constructor_out.bsdf ___702_null_closure 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{354} %argrw{"wr"}
	assign		___702_shader_constructor_out.edf ___702_null_closure 	%argrw{"wr"}
	assign		___702_shader_constructor_out.opacity $const14 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:355
#     out = shader_constructor_out;
	functioncall	$const71 626 	%line{355} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:252
#     result.edf     = edf;
	assign		___702_shader_constructor_out.bsdf ___702_coat_layer_out 	%line{252} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:253
#     result.opacity = clamp(opacity, 0.0, 1.0);
	assign		___702_shader_constructor_out.edf ___702_blended_coat_emission_edf_out 	%line{253} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:254
# }
	functioncall	$const33 625 	%line{254} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp332 ___702_opacity_luminance_float_out $const14 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___702_shader_constructor_out.opacity $tmp332 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:254
# }
	assign		___702_shader_constructor_out.opacity ___702_shader_constructor_out.opacity 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{254} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:356
# }
	assign		standard_surface_out.bsdf ___702_shader_constructor_out.bsdf 	%line{356} %argrw{"wr"}
	assign		standard_surface_out.edf ___702_shader_constructor_out.edf 	%argrw{"wr"}
	assign		standard_surface_out.opacity ___702_shader_constructor_out.opacity 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:797
#         surface1_out = (standard_surface_out.bsdf + standard_surface_out.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
	functioncall	$const33 632 	%line{797} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp333 standard_surface_out.opacity $const14 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___703_opacity_weight $tmp333 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl:798
#     }
	add		$tmp334 standard_surface_out.bsdf standard_surface_out.edf 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\convolution\\heighttonormal\\heighttonormal_surface1_out.osl"} %line{798} %argrw{"wrr"}
	mul		$tmp335 $tmp334 ___703_opacity_weight 	%argrw{"wrr"}
	closure		$tmp336 $const72 	%argrw{"wr"}
	sub		$tmp337 $const14 ___703_opacity_weight 	%argrw{"wrr"}
	mul		$tmp338 $tmp336 $tmp337 	%argrw{"wrr"}
	add		surface1_out $tmp335 $tmp338 	%argrw{"wrr"}
	end
