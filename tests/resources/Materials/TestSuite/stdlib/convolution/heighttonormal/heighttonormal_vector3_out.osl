#include "D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
#define BSDF closure color
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

vector2 mx_transform_uv(vector2 texcoord)
{
    return texcoord;
}

void mx_image_float(textureresource file, string layer, float default_value, vector2 texcoord, string uaddressmode, string vaddressmode, string filtertype, string framerange, int frameoffset, string frameendaction, output float out)
{
    if (file.filename == "" ||
        (uaddressmode == "constant" && (texcoord.x<0.0 || texcoord.x>1.0)) ||
        (vaddressmode == "constant" && (texcoord.y<0.0 || texcoord.y>1.0)))
    {
        out = default_value;
        return;
    }

    color missingColor = color(default_value);
    vector2 st = mx_transform_uv(texcoord);
    color rgb = texture(file.filename, st.x, st.y,
                        "subimage", layer, "interp", filtertype,
                        "missingcolor", missingColor,
                        "swrap", uaddressmode, "twrap", vaddressmode);
    out = rgb[0];
}

void NG_tiledimage_float(textureresource  file, float default1, vector2 texcoord, vector2 uvtiling, vector2 uvoffset, vector2 realworldimagesize, vector2 realworldtilesize, string filtertype, string framerange, int frameoffset, string frameendaction, output float out)
{
    vector2 N_mult_float_out = texcoord * uvtiling;
    vector2 N_sub_float_out = N_mult_float_out - uvoffset;
    vector2 N_divtilesize_float_out = N_sub_float_out / realworldimagesize;
    vector2 N_multtilesize_float_out = N_divtilesize_float_out * realworldtilesize;
    float N_img_float_out = 0.0;
    mx_image_float(file, "", default1, N_multtilesize_float_out, "periodic", "periodic", filtertype, framerange, frameoffset, frameendaction, N_img_float_out);
    out = N_img_float_out;
}

void mx_heighttonormal_vector3(float in, float scale, output vector result)
{
    float dx = -Dx(in);
    float dy = Dy(in);
    float dz = max(scale, 1.0E-05) * sqrt(max(1.0 - dx*dx - dy*dy, 1.0E-05));
    vector dir = normalize(vector(dx, dy, dz));
    result = dir * vector(0.5) + vector(0.5);
}

shader heighttonormal_vector3_out
[[
    string mtlx_category = "output",
    string mtlx_name = "vector3_out"
]]
(
    string file = "D:/Work/materialx/bernard_MaterialX_3/build/bin/resources/Images/plain_heightmap.png"
    [[
        string widget = "filename"
    ]],
    string file_colorspace = ""
    [[
        string widget = "colorspace"
    ]],
    int geomprop_UV0_index = 0
    [[
        string widget = "number"
    ]],
    float tiledimage_default = 0.000000
    [[
        string widget = "number"
    ]],
    vector2 tiledimage_uvtiling = {10.000000, 10.000000},
    vector2 tiledimage_uvoffset = {0.000000, 0.000000},
    vector2 tiledimage_realworldimagesize = {1.000000, 1.000000},
    vector2 tiledimage_realworldtilesize = {1.000000, 1.000000},
    string tiledimage_filtertype = "linear",
    string tiledimage_framerange = "",
    int tiledimage_frameoffset = 0
    [[
        string widget = "number"
    ]],
    string tiledimage_frameendaction = "constant",
    float heighttonormal_scale = 0.200000
    [[
        string widget = "number"
    ]],
    output vector vector3_out = vector(0.0)
)
{
    textureresource file_ = {file, file_colorspace};
    vector2 geomprop_UV0_out1 = vector2(u,v);
    float tiledimage_out = 0.0;
    NG_tiledimage_float(file_, tiledimage_default, geomprop_UV0_out1, tiledimage_uvtiling, tiledimage_uvoffset, tiledimage_realworldimagesize, tiledimage_realworldtilesize, tiledimage_filtertype, tiledimage_framerange, tiledimage_frameoffset, tiledimage_frameendaction, tiledimage_out);
    vector heighttonormal_out = vector(0.0);
    mx_heighttonormal_vector3(tiledimage_out, heighttonormal_scale, heighttonormal_out);
    vector3_out = heighttonormal_out;
}

