#usda 1.0
(
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources/Materials/TestSuite/stdlib/convolution\\heighttonormal_converted.mtlx, D:\\work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "material_heighttonormal_vector3_out" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:emission
            color3f inputs:emission_color
            float inputs:opacity
            float inputs:transmission
            color3f inputs:transmission_color
            token outputs:mtlx:surface.connect = </MaterialX/Materials/material_heighttonormal_vector3_out/shader_heighttonormal_vector3_out.outputs:surface>

            def Shader "shader_heighttonormal_vector3_out" (
                prepend references = </MaterialX/Shaders/shader_heighttonormal_vector3_out>
            )
            {
                float inputs:emission.connect = </MaterialX/Materials/material_heighttonormal_vector3_out.inputs:emission>
                color3f inputs:emission_color.connect = </MaterialX/Materials/material_heighttonormal_vector3_out/heighttonormal.outputs:vector3_out>
                float inputs:opacity.connect = </MaterialX/Materials/material_heighttonormal_vector3_out.inputs:opacity>
                float inputs:transmission.connect = </MaterialX/Materials/material_heighttonormal_vector3_out.inputs:transmission>
                color3f inputs:transmission_color.connect = </MaterialX/Materials/material_heighttonormal_vector3_out.inputs:transmission_color>
            }

            def "heighttonormal" (
                prepend references = </MaterialX/NodeGraphs/heighttonormal>
            )
            {
            }
        }
    }

    def "Shaders"
    {
        def Shader "shader_heighttonormal_vector3_out"
        {
            uniform token info:id = "ND_surface_unlit"
            token outputs:surface
        }
    }

    def "NodeGraphs"
    {
        def NodeGraph "heighttonormal"
        {
            asset inputs:file = @resources/Images/plain_heightmap.png@
            token outputs:surface1_out
            token outputs:surface2_out
            color3f outputs:vector3_out.connect = </MaterialX/NodeGraphs/heighttonormal/convert_heighttonormal.outputs:out>

            def Shader "tiledimage"
            {
                uniform token info:id = "ND_tiledimage_float"
                asset inputs:file.connect = </MaterialX/NodeGraphs/heighttonormal.inputs:file>
                float2 inputs:texcoord.connect = </MaterialX/NodeGraphs/heighttonormal/UV0.outputs:out>
                float2 inputs:uvtiling = (10, 10)
                float outputs:out
            }

            def Shader "heighttonormal"
            {
                uniform token info:id = "ND_heighttonormal_vector3"
                float inputs:in.connect = </MaterialX/NodeGraphs/heighttonormal/tiledimage.outputs:out>
                float inputs:scale = 0.2
                float3 outputs:out
            }

            def Shader "normalmap"
            {
                uniform token info:id = "ND_normalmap_vector2"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/heighttonormal/heighttonormal.outputs:out>
                float3 inputs:normal.connect = </MaterialX/NodeGraphs/heighttonormal/Nworld.outputs:out>
                float3 inputs:tangent.connect = </MaterialX/NodeGraphs/heighttonormal/Tworld.outputs:out>
                float3 outputs:out
            }

            def Shader "scale"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                float3 inputs:in1.connect = </MaterialX/NodeGraphs/heighttonormal/heighttonormal.outputs:out>
                float inputs:in2 = 2
                float3 outputs:out
            }

            def Shader "bias"
            {
                uniform token info:id = "ND_add_vector3"
                float3 inputs:in1.connect = </MaterialX/NodeGraphs/heighttonormal/scale.outputs:out>
                float3 inputs:in2 = (-1, -1, -1)
                float3 outputs:out
            }

            def Shader "UV0"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index = 0
                float2 outputs:out
            }

            def Shader "Nworld"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "Tworld"
            {
                uniform token info:id = "ND_tangent_vector3"
                int inputs:index = 0
                string inputs:space = "world"
                float3 outputs:out
            }

            def Shader "convert_heighttonormal"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in.connect = </MaterialX/NodeGraphs/heighttonormal/heighttonormal.outputs:out>
                color3f outputs:out
            }
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/material_heighttonormal_vector3_out>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

