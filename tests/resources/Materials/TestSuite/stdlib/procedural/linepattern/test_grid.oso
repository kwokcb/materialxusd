OpenShadingLanguage 1.00
# Compiled by oslc 1.13.3.0dev
# options: -q -ID:\Work\materialx\OSL_ILM\bin\shaders -o D:\Work\materialx\bernard_MaterialX_3\build\bin\resources\Materials\TestSuite\stdlib\procedural\linepattern\test_grid.oso
shader test_grid	%meta{string,mtlx_category,"surfacematerial"} %meta{string,mtlx_name,"test_grid"} 
param	struct surfaceshader	backsurfaceshader			%read{2147483647,-1} %write{2147483647,-1} %struct{"surfaceshader"} %structfields{bsdf,edf,opacity} %structfieldtypes{"CCf"} %structnfields{3}
param	closure color	backsurfaceshader.bsdf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{0}
param	closure color	backsurfaceshader.edf			%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{1}
param	float	backsurfaceshader.opacity	1		%read{2147483647,-1} %write{2147483647,-1} %mystruct{backsurfaceshader} %mystructfield{2}
param	vector	displacementshader1	0 0 0		%read{2147483647,-1} %write{2147483647,-1}
param	string	geomprop_Nworld_space	"world"		%read{2,2} %write{2147483647,-1}
param	string	geomprop_Tworld_space	"world"		%read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_Tworld_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	geomprop_UV0_index	0		%meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	struct vector2	grid_color3_uvtiling			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	grid_color3_uvtiling.x	58		%read{13,13} %write{2147483647,-1} %mystruct{grid_color3_uvtiling} %mystructfield{0}
param	float	grid_color3_uvtiling.y	58		%read{14,14} %write{2147483647,-1} %mystruct{grid_color3_uvtiling} %mystructfield{1}
param	struct vector2	grid_color3_uvoffset			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector2"} %structfields{x,y} %structfieldtypes{"ff"} %structnfields{2}
param	float	grid_color3_uvoffset.x	0		%read{18,18} %write{2147483647,-1} %mystruct{grid_color3_uvoffset} %mystructfield{0}
param	float	grid_color3_uvoffset.y	0		%read{19,19} %write{2147483647,-1} %mystruct{grid_color3_uvoffset} %mystructfield{1}
param	float	grid_color3_thickness	0.100000001		%meta{string,widget,"number"}  %read{16,16} %write{2147483647,-1}
param	int	grid_color3_staggered	0		%meta{string,widget,"checkBox"}  %read{69,69} %write{2147483647,-1}
param	float	SR_test_grid_base	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Base"} %meta{string,page,"Base"} %meta{string,help,"Multiplier on the intensity of the diffuse reflection."} %meta{string,widget,"number"}  %read{142,577} %write{2147483647,-1}
param	float	SR_test_grid_diffuse_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Diffuse Roughness"} %meta{string,page,"Base"} %meta{int,uiadvanced,1} %meta{string,help,"Roughness of the diffuse reflection. Higher values cause the surface to appear flatter and darker."} %meta{string,widget,"number"}  %read{576,576} %write{2147483647,-1}
param	float	SR_test_grid_metalness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Metalness"} %meta{string,page,"Base"} %meta{string,help,"Specifies how metallic the material appears. At its maximum, the surface behaves like a metal, using fully specular reflection and complex fresnel."} %meta{string,widget,"number"}  %read{591,593} %write{2147483647,-1}
param	float	SR_test_grid_specular	1		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular"} %meta{string,page,"Specular"} %meta{string,help,"Multiplier on the intensity of the specular reflection."} %meta{string,widget,"number"}  %read{143,549} %write{2147483647,-1}
param	color	SR_test_grid_specular_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Specular Color"} %meta{string,page,"Specular"} %meta{string,help,"Color tint on the specular reflection."}  %read{143,547} %write{2147483647,-1}
param	float	SR_test_grid_specular_roughness	0.200000003		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Roughness"} %meta{string,page,"Specular"} %meta{string,help,"The roughness of the specular reflection. Lower numbers produce sharper reflections, higher numbers produce blurrier reflections."} %meta{string,widget,"number"}  %read{147,449} %write{2147483647,-1}
param	float	SR_test_grid_specular_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Index of Refraction"} %meta{string,page,"Specular"} %meta{string,help,"Index of refraction for specular reflection."} %meta{string,widget,"number"}  %read{548,560} %write{2147483647,-1}
param	float	SR_test_grid_specular_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Anisotropy"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"The directional bias of reflected and transmitted light resulting in materials appearing rougher or glossier in certain directions."} %meta{string,widget,"number"}  %read{471,503} %write{2147483647,-1}
param	float	SR_test_grid_specular_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Rotation"} %meta{string,page,"Specular"} %meta{int,uiadvanced,1} %meta{string,help,"Rotation of the axis of specular anisotropy around the surface normal."} %meta{string,widget,"number"}  %read{146,146} %write{2147483647,-1}
param	float	SR_test_grid_transmission	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Transmission of light through the surface for materials such as glass or water. The greater the value the more transparent the material."} %meta{string,widget,"number"}  %read{585,587} %write{2147483647,-1}
param	color	SR_test_grid_transmission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Color"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Color tint on the transmitted light."}  %read{555,559} %write{2147483647,-1}
param	float	SR_test_grid_transmission_depth	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Depth"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Specifies the distance light travels inside the material before its becomes exactly the transmission color according to Beer's law."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	SR_test_grid_transmission_scatter	0 0 0		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Transmission Scatter"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Scattering coefficient of the interior medium. Suitable for a large body of liquid or one that is fairly thick, such as an ocean, honey, ice, or frosted glass."}  %read{2147483647,-1} %write{2147483647,-1}
param	float	SR_test_grid_transmission_scatter_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Transmission Anisotropy"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the scattering."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	SR_test_grid_transmission_dispersion	0		%meta{float,min,0} %meta{float,slidermax,100} %meta{string,label,"Transmission Dispersion"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Dispersion amount, describing how much the index of refraction varies across wavelengths."} %meta{string,widget,"number"}  %read{2147483647,-1} %write{2147483647,-1}
param	float	SR_test_grid_transmission_extra_roughness	0		%meta{float,min,-1} %meta{float,slidermin,0} %meta{float,max,1} %meta{string,label,"Transmission Roughness"} %meta{string,page,"Transmission"} %meta{int,uiadvanced,1} %meta{string,help,"Additional roughness on top of specular roughness. Positive values blur refractions more than reflections, and negative values blur refractions less."} %meta{string,widget,"number"}  %read{147,147} %write{2147483647,-1}
param	float	SR_test_grid_subsurface	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Subsurface"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The blend between diffuse reflection and subsurface scattering. A value of 1.0 indicates full subsurface scattering and a value 0 for diffuse reflection only."} %meta{string,widget,"number"}  %read{579,581} %write{2147483647,-1}
param	color	SR_test_grid_subsurface_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Color"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the subsurface scattering effect."}  %read{150,150} %write{2147483647,-1}
param	color	SR_test_grid_subsurface_radius	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Subsurface Radius"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The mean free path. The distance which light can travel before being scattered inside the surface."}  %read{156,156} %write{2147483647,-1}
param	float	SR_test_grid_subsurface_scale	1		%meta{float,min,0} %meta{float,slidermax,10} %meta{string,label,"Subsurface Scale"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"Scalar weight for the subsurface radius value."} %meta{string,widget,"number"}  %read{156,156} %write{2147483647,-1}
param	float	SR_test_grid_subsurface_anisotropy	0		%meta{float,min,-1} %meta{float,max,1} %meta{string,label,"Subsurface Anisotropy"} %meta{string,page,"Subsurface"} %meta{int,uiadvanced,1} %meta{string,help,"The direction of subsurface scattering. 0 scatters light evenly, positive values scatter forward and negative values scatter backward."} %meta{string,widget,"number"}  %read{570,570} %write{2147483647,-1}
param	float	SR_test_grid_sheen	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The weight of a sheen layer that can be used to approximate microfibers or fabrics such as velvet and satin."} %meta{string,widget,"number"}  %read{563,563} %write{2147483647,-1}
param	color	SR_test_grid_sheen_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Sheen Color"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The color of the sheen layer."}  %read{562,562} %write{2147483647,-1}
param	float	SR_test_grid_sheen_roughness	0.300000012		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Sheen Roughness"} %meta{string,page,"Sheen"} %meta{int,uiadvanced,1} %meta{string,help,"The roughness of the sheen layer."} %meta{string,widget,"number"}  %read{562,562} %write{2147483647,-1}
param	float	SR_test_grid_coat	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat"} %meta{string,page,"Coat"} %meta{string,help,"The weight of a reflective clear-coat layer on top of the material. Use for materials such as car paint or an oily layer."} %meta{string,widget,"number"}  %read{144,615} %write{2147483647,-1}
param	color	SR_test_grid_coat_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Coat Color"} %meta{string,page,"Coat"} %meta{string,help,"The color of the clear-coat layer's transparency."}  %read{163,598} %write{2147483647,-1}
param	float	SR_test_grid_coat_roughness	0.100000001		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Roughness"} %meta{string,page,"Coat"} %meta{string,help,"The roughness of the clear-coat reflections. The lower the value, the sharper the reflection."} %meta{string,widget,"number"}  %read{122,318} %write{2147483647,-1}
param	float	SR_test_grid_coat_anisotropy	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Anisotropy"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The amount of directional bias, or anisotropy, of the clear-coat layer."} %meta{string,widget,"number"}  %read{126,457} %write{2147483647,-1}
param	float	SR_test_grid_coat_rotation	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Rotation"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"The rotation of the anisotropic effect of the clear-coat layer."} %meta{string,widget,"number"}  %read{141,141} %write{2147483647,-1}
param	float	SR_test_grid_coat_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Coat Index of Refraction"} %meta{string,page,"Coat"} %meta{string,help,"The index of refraction of the clear-coat layer."} %meta{string,widget,"number"}  %read{165,532} %write{2147483647,-1}
param	float	SR_test_grid_coat_affect_color	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Color"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the saturation of diffuse reflection and subsurface scattering below the clear-coat."} %meta{string,widget,"number"}  %read{442,442} %write{2147483647,-1}
param	float	SR_test_grid_coat_affect_roughness	0		%meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coat Affect Roughness"} %meta{string,page,"Coat"} %meta{int,uiadvanced,1} %meta{string,help,"Controls the roughness of the specular reflection in the layers below the clear-coat."} %meta{string,widget,"number"}  %read{144,144} %write{2147483647,-1}
param	float	SR_test_grid_thin_film_thickness	0		%meta{float,min,0} %meta{float,slidermax,2000} %meta{string,label,"Thin Film Thickness"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The thickness of the thin film layer on a surface. Use for materials such as multitone car paint or soap bubbles (in nanometers)."} %meta{string,widget,"number"}  %read{536,548} %write{2147483647,-1}
param	float	SR_test_grid_thin_film_IOR	1.5		%meta{float,min,0} %meta{float,slidermin,1} %meta{float,slidermax,3} %meta{string,label,"Thin Film Index of Refraction"} %meta{string,page,"Thin Film"} %meta{int,uiadvanced,1} %meta{string,help,"The index of refraction of the medium surrounding the material."} %meta{string,widget,"number"}  %read{536,548} %write{2147483647,-1}
param	float	SR_test_grid_emission	0		%meta{float,min,0} %meta{float,slidermax,1} %meta{string,label,"Emission"} %meta{string,page,"Emission"} %meta{string,help,"The amount of emitted incandescent light."} %meta{string,widget,"number"}  %read{168,168} %write{2147483647,-1}
param	color	SR_test_grid_emission_color	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Emission Color"} %meta{string,page,"Emission"} %meta{string,help,"The color of the emitted light."}  %read{168,168} %write{2147483647,-1}
param	color	SR_test_grid_opacity	1 1 1		%meta{color,min,0,0,0} %meta{color,max,1,1,1} %meta{string,label,"Opacity"} %meta{string,page,"Geometry"} %meta{string,help,"The opacity of the entire material."}  %read{171,171} %write{2147483647,-1}
param	int	SR_test_grid_thin_walled	0		%meta{string,label,"Thin Walled"} %meta{string,page,"Geometry"} %meta{int,uiadvanced,1} %meta{string,help,"If true the surface is double-sided and represents an infinitely thin shell. Suitable for thin objects such as tree leaves or paper."} %meta{string,widget,"checkBox"}  %read{157,157} %write{2147483647,-1}
oparam	closure color	out			%read{2147483647,-1} %write{640,640}
global	vector	I	%read{601,601} %write{2147483647,-1}
global	normal	N	%read{2,602} %write{2147483647,-1}
global	float	u	%read{8,8} %write{2147483647,-1}
global	float	v	%read{9,9} %write{2147483647,-1}
local	int	___669_N_extract_0_index_tmp	%read{25,25} %write{23,23}
local	float	___669_N_extract_0_out	%read{39,39} %write{27,29}
local	int	___669_N_extract_1_index_tmp	%read{33,33} %write{31,31}
local	float	___669_N_extract_1_out	%read{40,40} %write{35,37}
local	color	___670_combine_out	%read{112,521} %write{111,520}
local	float	___671_texcoord_scale_out.x	%read{18,18} %write{13,13} %mystruct{___671_texcoord_scale_out} %mystructfield{0}
local	float	___671_texcoord_scale_out.y	%read{19,19} %write{14,14} %mystruct{___671_texcoord_scale_out} %mystructfield{1}
local	float	___671_thick_to_size_in1_tmp	%read{16,16} %write{15,15}
local	float	___671_thick_to_size_out	%read{85,99} %write{16,16}
local	float	___671_texcoord_bias_out.x	%read{27,35} %write{18,18} %mystruct{___671_texcoord_bias_out} %mystructfield{0}
local	float	___671_texcoord_bias_out.y	%read{29,37} %write{19,19} %mystruct{___671_texcoord_bias_out} %mystructfield{1}
local	float	___671_texcoord_bias_separate_outx	%read{65,74} %write{20,39}
local	float	___671_texcoord_bias_separate_outy	%read{43,52} %write{21,40}
local	float	___671_mod_Y_row_in2_tmp	%read{43,45} %write{41,41}
local	float	___671_mod_Y_row_out	%read{56,56} %write{46,46}
local	float	___671_mod_Y_in2_tmp	%read{49,51} %write{47,47}
local	float	___671_mod_Y_out	%read{64,64} %write{52,52}
local	float	___671_alt_rows_shift_value2_tmp	%read{56,56} %write{53,53}
local	float	___671_alt_rows_shift_in1_tmp	%read{59,59} %write{54,54}
local	float	___671_alt_rows_shift_in2_tmp	%read{61,61} %write{55,55}
local	float	___671_alt_rows_shift_out	%read{65,65} %write{59,61}
local	float	___671_mody_2_in2_tmp	%read{64,64} %write{63,63}
local	float	___671_mody_2_out	%read{67,67} %write{64,64}
local	float	___671_shift_X_out	%read{72,72} %write{65,65}
local	float	___671_subY_1_in2_tmp	%read{67,67} %write{66,66}
local	float	___671_subY_1_out	%read{76,76} %write{67,67}
local	int	___671_stagger_selection_value2_tmp	%read{69,69} %write{68,68}
local	float	___671_stagger_selection_out	%read{79,82} %write{72,74}
local	float	___671_abs_Y_out	%read{85,85} %write{76,76}
local	float	___671_mod_X_in2_tmp	%read{79,81} %write{77,77}
local	float	___671_mod_X_out	%read{93,93} %write{82,82}
local	float	___671_Y_detect_in1_tmp	%read{88,88} %write{83,83}
local	float	___671_Y_detect_in2_tmp	%read{90,90} %write{84,84}
local	float	___671_Y_detect_out	%read{106,106} %write{88,90}
local	float	___671_modx_2_in2_tmp	%read{93,93} %write{92,92}
local	float	___671_modx_2_out	%read{95,95} %write{93,93}
local	float	___671_subX_1_in2_tmp	%read{95,95} %write{94,94}
local	float	___671_subX_1_out	%read{96,96} %write{95,95}
local	float	___671_abs_X_out	%read{99,99} %write{96,96}
local	float	___671_X_detect_in1_tmp	%read{102,102} %write{97,97}
local	float	___671_X_detect_in2_tmp	%read{104,104} %write{98,98}
local	float	___671_X_detect_out	%read{106,106} %write{102,104}
local	float	___671_min_out	%read{108,108} %write{106,106}
local	float	___671_inv_result_in1_tmp	%read{108,108} %write{107,107}
local	float	___671_inv_result_out	%read{111,111} %write{108,108}
local	color	___671_to_rgb_out	%read{113,113} %write{109,112}
local	float	___672_roughness_sqr	%read{133,513} %write{125,499}
local	float	___673_aspect	%read{133,510} %write{132,506}
local	vector	___676_nAxis	%read{183,383} %write{179,325}
local	float	___676_s	%read{193,379} %write{180,326}
local	float	___676_c	%read{182,385} %write{181,327}
local	float	___676_oc	%read{184,382} %write{182,328}
local	float	___677_rotationRadians	%read{180,327} %write{177,323}
local	matrix	___677_m	%read{246,433} %write{240,386}
local	float	___677_trans.x	%read{290,436} %write{256,402} %mystruct{___677_trans} %mystructfield{0}
local	float	___677_trans.y	%read{290,436} %write{267,413} %mystruct{___677_trans} %mystructfield{1}
local	float	___677_trans.z	%read{290,436} %write{278,424} %mystruct{___677_trans} %mystructfield{2}
local	float	___677_trans.w	%read{2147483647,-1} %write{289,435} %mystruct{___677_trans} %mystructfield{3}
local	color	___678_r	%read{299,313} %write{298,298}
local	color	___678_r_sqrt	%read{303,304} %write{299,299}
local	color	___678_n_min	%read{306,306} %write{302,302}
local	color	___678_n_max	%read{306,306} %write{305,305}
local	color	___678_np1	%read{309,309} %write{307,307}
local	color	___678_nm1	%read{311,311} %write{308,308}
local	color	___678_k2	%read{316,317} %write{314,316}
local	color	___679_reflection_tint	%read{532,560} %write{526,555}
local	color	___679_transmission_tint	%read{532,560} %write{530,559}
local	float	___692_x	%read{609,609} %write{608,608}
local	float	___693_NdotV	%read{605,605} %write{603,603}
local	color	___693_f	%read{611,611} %write{610,610}
local	closure color	___695_null_closure	%read{522,618} %write{118,118}
local	float	___695_coat_roughness_vector_out.x	%read{135,532} %write{119,138} %mystruct{___695_coat_roughness_vector_out} %mystructfield{0}
local	float	___695_coat_roughness_vector_out.y	%read{137,532} %write{120,139} %mystruct{___695_coat_roughness_vector_out} %mystructfield{1}
local	float	___695_coat_tangent_rotate_degree_in2_tmp	%read{141,141} %write{140,140}
local	float	___695_coat_tangent_rotate_degree_out	%read{177,177} %write{141,141}
local	color	___695_metal_reflectivity_out	%read{297,297} %write{142,142}
local	color	___695_metal_edgecolor_out	%read{306,306} %write{143,143}
local	float	___695_coat_affect_roughness_multiply1_out	%read{318,318} %write{144,144}
local	float	___695_tangent_rotate_degree_in2_tmp	%read{146,146} %write{145,145}
local	float	___695_tangent_rotate_degree_out	%read{323,323} %write{146,146}
local	float	___695_transmission_roughness_add_out	%read{440,440} %write{147,147}
local	float	___695_subsurface_color_nonnegative_in2_tmp	%read{149,149} %write{148,148}
local	color	___695_subsurface_color_nonnegative_out	%read{514,514} %write{150,150}
local	float	___695_coat_clamped_low_tmp	%read{155,155} %write{151,151}
local	float	___695_coat_clamped_high_tmp	%read{154,154} %write{152,152}
local	float	___695_coat_clamped_out	%read{442,442} %write{155,155}
local	color	___695_subsurface_radius_scaled_out	%read{570,570} %write{156,156}
local	float	___695_subsurface_selector_out	%read{572,574} %write{158,158}
local	float	___695_base_color_nonnegative_in2_tmp	%read{160,160} %write{159,159}
local	color	___695_base_color_nonnegative_out	%read{515,515} %write{161,161}
local	color	___695_coat_attenuation_bg_tmp	%read{163,163} %write{162,162}
local	color	___695_coat_attenuation_out	%read{595,595} %write{163,163}
local	float	___695_one_minus_coat_ior_in1_tmp	%read{165,165} %write{164,164}
local	float	___695_one_minus_coat_ior_out	%read{443,443} %write{165,165}
local	float	___695_one_plus_coat_ior_in1_tmp	%read{167,167} %write{166,166}
local	float	___695_one_plus_coat_ior_out	%read{443,443} %write{167,167}
local	color	___695_emission_weight_out	%read{597,597} %write{168,168}
local	color	___695_opacity_luminance_out	%read{446,446} %write{169,172}
local	vector	___695_coat_tangent_rotate_out	%read{447,447} %write{173,290}
local	color	___695_artistic_ior_ior	%read{307,536} %write{291,306}
local	color	___695_artistic_ior_extinction	%read{536,536} %write{292,317}
local	float	___695_coat_affect_roughness_multiply2_out	%read{449,452} %write{318,318}
local	vector	___695_tangent_rotate_out	%read{450,450} %write{319,436}
local	float	___695_transmission_roughness_clamped_low_tmp	%read{441,441} %write{437,437}
local	float	___695_transmission_roughness_clamped_high_tmp	%read{440,440} %write{438,438}
local	float	___695_transmission_roughness_clamped_out	%read{452,452} %write{441,441}
local	float	___695_coat_gamma_multiply_out	%read{454,454} %write{442,442}
local	float	___695_coat_ior_to_F0_sqrt_out	%read{455,455} %write{443,443}
local	int	___695_opacity_luminance_float_index_tmp	%read{446,446} %write{444,444}
local	float	___695_opacity_luminance_float_out	%read{624,624} %write{446,446}
local	vector	___695_coat_tangent_rotate_normalize_out	%read{460,460} %write{447,447}
local	float	___695_coat_affected_roughness_fg_tmp	%read{449,449} %write{448,448}
local	float	___695_coat_affected_roughness_out	%read{467,467} %write{449,449}
local	vector	___695_tangent_rotate_normalize_out	%read{489,489} %write{450,450}
local	float	___695_coat_affected_transmission_roughness_fg_tmp	%read{452,452} %write{451,451}
local	float	___695_coat_affected_transmission_roughness_out	%read{496,496} %write{452,452}
local	float	___695_coat_gamma_in2_tmp	%read{454,454} %write{453,453}
local	float	___695_coat_gamma_out	%read{514,515} %write{454,454}
local	float	___695_coat_ior_to_F0_out	%read{517,517} %write{455,455}
local	float	___695_coat_tangent_value2_tmp	%read{457,457} %write{456,456}
local	vector	___695_coat_tangent_out	%read{532,532} %write{460,462}
local	float	___695_main_roughness_out.x	%read{480,548} %write{464,483} %mystruct{___695_main_roughness_out} %mystructfield{0}
local	float	___695_main_roughness_out.y	%read{482,548} %write{465,484} %mystruct{___695_main_roughness_out} %mystructfield{1}
local	float	___695_main_tangent_value2_tmp	%read{486,486} %write{485,485}
local	vector	___695_main_tangent_out	%read{536,560} %write{489,491}
local	float	___695_transmission_roughness_out.x	%read{509,560} %write{493,512} %mystruct{___695_transmission_roughness_out} %mystructfield{0}
local	float	___695_transmission_roughness_out.y	%read{511,560} %write{494,513} %mystruct{___695_transmission_roughness_out} %mystructfield{1}
local	color	___695_coat_affected_subsurface_color_out	%read{565,569} %write{514,514}
local	color	___695_coat_affected_diffuse_color_out	%read{576,576} %write{515,515}
local	float	___695_one_minus_coat_ior_to_F0_in1_tmp	%read{517,517} %write{516,516}
local	float	___695_one_minus_coat_ior_to_F0_out	%read{520,520} %write{517,517}
local	color	___695_emission_color0_out	%read{610,610} %write{518,521}
local	closure color	___695_coat_bsdf_out	%read{596,596} %write{522,533}
local	float	___695_metal_bsdf_weight_tmp	%read{537,537} %write{534,534}
local	string	___695_metal_bsdf_distribution_tmp	%read{536,536} %write{535,535}
local	closure color	___695_metal_bsdf_out	%read{593,593} %write{537,537}
local	closure color	___695_specular_bsdf_out	%read{589,589} %write{538,549}
local	closure color	___695_transmission_bsdf_out	%read{587,587} %write{550,561}
local	closure color	___695_sheen_bsdf_out	%read{583,583} %write{563,563}
local	float	___695_translucent_bsdf_weight_tmp	%read{566,566} %write{564,564}
local	closure color	___695_translucent_bsdf_out	%read{574,574} %write{566,566}
local	closure color	___695_subsurface_bsdf_out	%read{573,573} %write{567,570}
local	closure color	___695_selected_subsurface_bsdf_out	%read{581,581} %write{575,575}
local	closure color	___695_diffuse_bsdf_out	%read{580,580} %write{577,577}
local	closure color	___695_subsurface_mix_out	%read{583,583} %write{582,582}
local	closure color	___695_sheen_layer_out	%read{586,586} %write{583,583}
local	closure color	___695_transmission_mix_out	%read{589,589} %write{588,588}
local	closure color	___695_specular_layer_out	%read{592,592} %write{589,589}
local	closure color	___695_metalness_mix_out	%read{595,595} %write{594,594}
local	closure color	___695_thin_film_layer_attenuated_out	%read{596,596} %write{595,595}
local	closure color	___695_coat_layer_out	%read{621,621} %write{596,596}
local	closure color	___695_emission_edf_out	%read{598,614} %write{597,597}
local	closure color	___695_coat_tinted_emission_edf_out	%read{611,611} %write{598,598}
local	closure color	___695_coat_emission_edf_out	%read{615,615} %write{599,611}
local	closure color	___695_blended_coat_emission_edf_out	%read{622,622} %write{616,616}
local	closure color	___695_shader_constructor_out.bsdf	%read{627,627} %write{617,621} %mystruct{___695_shader_constructor_out} %mystructfield{0}
local	closure color	___695_shader_constructor_out.edf	%read{628,628} %write{618,622} %mystruct{___695_shader_constructor_out} %mystructfield{1}
local	float	___695_shader_constructor_out.opacity	%read{626,629} %write{619,626} %mystruct{___695_shader_constructor_out} %mystructfield{2}
local	float	___696_opacity_weight	%read{635,637} %write{633,633}
local	closure color	null_closure	%read{114,115} %write{0,0}
local	vector	geomprop_Nworld_out1	%read{179,576} %write{2,2}
local	vector	geomprop_Tworld_out1	%read{241,491} %write{7,7}
local	float	geomprop_UV0_out1.x	%read{13,13} %write{8,8} %mystruct{geomprop_UV0_out1} %mystructfield{0}
local	float	geomprop_UV0_out1.y	%read{14,14} %write{9,9} %mystruct{geomprop_UV0_out1} %mystructfield{1}
local	color	grid_color3_out	%read{142,161} %write{10,113}
local	closure color	SR_test_grid_out.bsdf	%read{634,634} %write{114,627} %mystruct{SR_test_grid_out} %mystructfield{0}
local	closure color	SR_test_grid_out.edf	%read{634,634} %write{115,628} %mystruct{SR_test_grid_out} %mystructfield{1}
local	float	SR_test_grid_out.opacity	%read{632,632} %write{116,629} %mystruct{SR_test_grid_out} %mystructfield{2}
local	closure color	test_grid_out	%read{640,640} %write{639,639}
const	int	$const1	0		%read{0,444} %write{2147483647,-1}
const	string	$const2	"transform"		%read{1,391} %write{2147483647,-1}
const	string	$const3	"common"		%read{2,2} %write{2147483647,-1}
temp	vector	$tmp1	%read{7,7} %write{6,6}
const	int	$const4	2		%read{3,430} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{3,3}
const	float	$const5	0		%read{6,633} %write{2147483647,-1}
temp	float	$tmp3	%read{5,5} %write{4,4}
temp	float	$tmp4	%read{6,6} %write{5,5}
const	color	$const6	0 0 0		%read{10,610} %write{2147483647,-1}
const	string	$const7	"NG_grid_color3"		%read{11,11} %write{2147483647,-1}
const	string	$const8	"__operator__mul__"		%read{12,12} %write{2147483647,-1}
const	float	$const9	1		%read{15,637} %write{2147483647,-1}
const	string	$const10	"__operator__sub__"		%read{17,17} %write{2147483647,-1}
const	string	$const11	"NG_separate2_vector2"		%read{22,22} %write{2147483647,-1}
const	string	$const12	"mx_extract"		%read{24,445} %write{2147483647,-1}
temp	int	$tmp5	%read{26,26} %write{25,25}
const	int	$const13	1		%read{31,427} %write{2147483647,-1}
temp	int	$tmp6	%read{34,34} %write{33,33}
const	float	$const14	2		%read{41,92} %write{2147483647,-1}
const	string	$const15	"mod"		%read{42,78} %write{2147483647,-1}
temp	float	$tmp7	%read{45,45} %write{44,44}
temp	float	$tmp8	%read{44,44} %write{43,43}
temp	float	$tmp9	%read{46,46} %write{45,45}
temp	float	$tmp10	%read{51,51} %write{50,50}
temp	float	$tmp11	%read{50,50} %write{49,49}
temp	float	$tmp12	%read{52,52} %write{51,51}
const	float	$const16	0.5		%read{54,54} %write{2147483647,-1}
temp	int	$tmp13	%read{58,58} %write{56,56}
const	string	$const17	"mx_ternary"		%read{57,487} %write{2147483647,-1}
temp	int	$tmp14	%read{71,71} %write{69,69}
temp	float	$tmp15	%read{81,81} %write{80,80}
temp	float	$tmp16	%read{80,80} %write{79,79}
temp	float	$tmp17	%read{82,82} %write{81,81}
temp	int	$tmp18	%read{87,87} %write{85,85}
temp	int	$tmp19	%read{101,101} %write{99,99}
const	string	$const18	"NG_convert_float_color3"		%read{110,519} %write{2147483647,-1}
const	string	$const19	"NG_standard_surface_surfaceshader_100"		%read{117,117} %write{2147483647,-1}
const	string	$const20	"mx_roughness_anisotropy"		%read{121,495} %write{2147483647,-1}
temp	float	$tmp20	%read{124,124} %write{122,122}
const	float	$const21	1e-08		%read{125,499} %write{2147483647,-1}
const	string	$const22	"clamp"		%read{123,631} %write{2147483647,-1}
temp	float	$tmp21	%read{125,125} %write{124,124}
temp	int	$tmp22	%read{127,127} %write{126,126}
temp	float	$tmp23	%read{131,131} %write{130,130}
const	float	$const23	0.98		%read{129,503} %write{2147483647,-1}
temp	float	$tmp24	%read{130,130} %write{129,129}
temp	float	$tmp25	%read{132,132} %write{131,131}
temp	float	$tmp26	%read{134,134} %write{133,133}
const	float	$const24	360		%read{140,145} %write{2147483647,-1}
temp	color	$tmp27	%read{150,150} %write{149,149}
temp	float	$tmp28	%read{155,155} %write{154,154}
temp	float	$tmp29	%read{158,158} %write{157,157}
temp	color	$tmp30	%read{161,161} %write{160,160}
const	color	$const25	1 1 1		%read{162,531} %write{2147483647,-1}
const	color	$const26	0.272229 0.674082 0.053689		%read{171,171} %write{2147483647,-1}
const	string	$const27	"mx_luminance_color3"		%read{170,170} %write{2147483647,-1}
temp	float	$tmp32	%read{172,172} %write{171,171}
const	vector	$const28	0 0 0		%read{173,319} %write{2147483647,-1}
const	string	$const29	"mx_rotate_vector3"		%read{174,320} %write{2147483647,-1}
const	string	$const30	"radians"		%read{175,321} %write{2147483647,-1}
const	float	$const31	3.1415927		%read{176,322} %write{2147483647,-1}
const	float	$const32	180		%read{176,322} %write{2147483647,-1}
temp	float	$tmp33	%read{177,177} %write{176,176}
const	string	$const33	"rotationMatrix"		%read{178,324} %write{2147483647,-1}
temp	float	$tmp34	%read{184,184} %write{183,183}
temp	float	$tmp35	%read{186,186} %write{184,184}
temp	float	$tmp36	%read{186,186} %write{185,185}
temp	float	$tmp37	%read{187,187} %write{186,186}
temp	float	$tmp38	%read{240,240} %write{187,187}
temp	float	$tmp39	%read{189,189} %write{188,188}
temp	float	$tmp40	%read{191,191} %write{189,189}
temp	float	$tmp41	%read{191,191} %write{190,190}
temp	float	$tmp42	%read{194,194} %write{191,191}
temp	float	$tmp43	%read{193,193} %write{192,192}
temp	float	$tmp44	%read{194,194} %write{193,193}
temp	float	$tmp45	%read{240,240} %write{194,194}
temp	float	$tmp46	%read{196,196} %write{195,195}
temp	float	$tmp47	%read{198,198} %write{196,196}
temp	float	$tmp48	%read{198,198} %write{197,197}
temp	float	$tmp49	%read{201,201} %write{198,198}
temp	float	$tmp50	%read{200,200} %write{199,199}
temp	float	$tmp51	%read{201,201} %write{200,200}
temp	float	$tmp52	%read{240,240} %write{201,201}
temp	float	$tmp53	%read{203,203} %write{202,202}
temp	float	$tmp54	%read{205,205} %write{203,203}
temp	float	$tmp55	%read{205,205} %write{204,204}
temp	float	$tmp56	%read{208,208} %write{205,205}
temp	float	$tmp57	%read{207,207} %write{206,206}
temp	float	$tmp58	%read{208,208} %write{207,207}
temp	float	$tmp59	%read{240,240} %write{208,208}
temp	float	$tmp60	%read{210,210} %write{209,209}
temp	float	$tmp61	%read{212,212} %write{210,210}
temp	float	$tmp62	%read{212,212} %write{211,211}
temp	float	$tmp63	%read{213,213} %write{212,212}
temp	float	$tmp64	%read{240,240} %write{213,213}
temp	float	$tmp65	%read{215,215} %write{214,214}
temp	float	$tmp66	%read{217,217} %write{215,215}
temp	float	$tmp67	%read{217,217} %write{216,216}
temp	float	$tmp68	%read{220,220} %write{217,217}
temp	float	$tmp69	%read{219,219} %write{218,218}
temp	float	$tmp70	%read{220,220} %write{219,219}
temp	float	$tmp71	%read{240,240} %write{220,220}
temp	float	$tmp72	%read{222,222} %write{221,221}
temp	float	$tmp73	%read{224,224} %write{222,222}
temp	float	$tmp74	%read{224,224} %write{223,223}
temp	float	$tmp75	%read{227,227} %write{224,224}
temp	float	$tmp76	%read{226,226} %write{225,225}
temp	float	$tmp77	%read{227,227} %write{226,226}
temp	float	$tmp78	%read{240,240} %write{227,227}
temp	float	$tmp79	%read{229,229} %write{228,228}
temp	float	$tmp80	%read{231,231} %write{229,229}
temp	float	$tmp81	%read{231,231} %write{230,230}
temp	float	$tmp82	%read{234,234} %write{231,231}
temp	float	$tmp83	%read{233,233} %write{232,232}
temp	float	$tmp84	%read{234,234} %write{233,233}
temp	float	$tmp85	%read{240,240} %write{234,234}
temp	float	$tmp86	%read{236,236} %write{235,235}
temp	float	$tmp87	%read{238,238} %write{236,236}
temp	float	$tmp88	%read{238,238} %write{237,237}
temp	float	$tmp89	%read{239,239} %write{238,238}
temp	float	$tmp90	%read{240,240} %write{239,239}
temp	float	$tmp91.x	%read{247,280} %write{241,241}
temp	float	$tmp91.y	%read{249,282} %write{242,242}
temp	float	$tmp91.z	%read{252,285} %write{243,243}
temp	float	$tmp91.w	%read{255,288} %write{244,244}
temp	float	$tmp92	%read{247,247} %write{246,246}
temp	float	$tmp93	%read{250,250} %write{247,247}
temp	float	$tmp94	%read{249,249} %write{248,248}
temp	float	$tmp95	%read{250,250} %write{249,249}
temp	float	$tmp96	%read{253,253} %write{250,250}
temp	float	$tmp97	%read{252,252} %write{251,251}
temp	float	$tmp98	%read{253,253} %write{252,252}
temp	float	$tmp99	%read{256,256} %write{253,253}
const	int	$const34	3		%read{254,433} %write{2147483647,-1}
temp	float	$tmp100	%read{255,255} %write{254,254}
temp	float	$tmp101	%read{256,256} %write{255,255}
temp	float	$tmp102	%read{258,258} %write{257,257}
temp	float	$tmp103	%read{261,261} %write{258,258}
temp	float	$tmp104	%read{260,260} %write{259,259}
temp	float	$tmp105	%read{261,261} %write{260,260}
temp	float	$tmp106	%read{264,264} %write{261,261}
temp	float	$tmp107	%read{263,263} %write{262,262}
temp	float	$tmp108	%read{264,264} %write{263,263}
temp	float	$tmp109	%read{267,267} %write{264,264}
temp	float	$tmp110	%read{266,266} %write{265,265}
temp	float	$tmp111	%read{267,267} %write{266,266}
temp	float	$tmp112	%read{269,269} %write{268,268}
temp	float	$tmp113	%read{272,272} %write{269,269}
temp	float	$tmp114	%read{271,271} %write{270,270}
temp	float	$tmp115	%read{272,272} %write{271,271}
temp	float	$tmp116	%read{275,275} %write{272,272}
temp	float	$tmp117	%read{274,274} %write{273,273}
temp	float	$tmp118	%read{275,275} %write{274,274}
temp	float	$tmp119	%read{278,278} %write{275,275}
temp	float	$tmp120	%read{277,277} %write{276,276}
temp	float	$tmp121	%read{278,278} %write{277,277}
temp	float	$tmp122	%read{280,280} %write{279,279}
temp	float	$tmp123	%read{283,283} %write{280,280}
temp	float	$tmp124	%read{282,282} %write{281,281}
temp	float	$tmp125	%read{283,283} %write{282,282}
temp	float	$tmp126	%read{286,286} %write{283,283}
temp	float	$tmp127	%read{285,285} %write{284,284}
temp	float	$tmp128	%read{286,286} %write{285,285}
temp	float	$tmp129	%read{289,289} %write{286,286}
temp	float	$tmp130	%read{288,288} %write{287,287}
temp	float	$tmp131	%read{289,289} %write{288,288}
const	string	$const35	"mx_artistic_ior"		%read{293,293} %write{2147483647,-1}
temp	color	$tmp132	%read{298,298} %write{294,294}
const	float	$const36	0.99		%read{295,295} %write{2147483647,-1}
temp	color	$tmp133	%read{297,297} %write{295,295}
temp	color	$tmp134	%read{298,298} %write{297,297}
temp	color	$tmp135	%read{302,302} %write{300,300}
temp	color	$tmp136	%read{302,302} %write{301,301}
temp	color	$tmp137	%read{305,305} %write{303,303}
temp	color	$tmp138	%read{305,305} %write{304,304}
temp	color	$tmp139	%read{310,310} %write{309,309}
temp	color	$tmp140	%read{312,312} %write{310,310}
temp	color	$tmp141	%read{312,312} %write{311,311}
temp	color	$tmp142	%read{314,314} %write{312,312}
temp	color	$tmp143	%read{314,314} %write{313,313}
temp	color	$tmp144	%read{316,316} %write{315,315}
temp	float	$tmp145	%read{323,323} %write{322,322}
temp	float	$tmp146	%read{330,330} %write{329,329}
temp	float	$tmp147	%read{332,332} %write{330,330}
temp	float	$tmp148	%read{332,332} %write{331,331}
temp	float	$tmp149	%read{333,333} %write{332,332}
temp	float	$tmp150	%read{386,386} %write{333,333}
temp	float	$tmp151	%read{335,335} %write{334,334}
temp	float	$tmp152	%read{337,337} %write{335,335}
temp	float	$tmp153	%read{337,337} %write{336,336}
temp	float	$tmp154	%read{340,340} %write{337,337}
temp	float	$tmp155	%read{339,339} %write{338,338}
temp	float	$tmp156	%read{340,340} %write{339,339}
temp	float	$tmp157	%read{386,386} %write{340,340}
temp	float	$tmp158	%read{342,342} %write{341,341}
temp	float	$tmp159	%read{344,344} %write{342,342}
temp	float	$tmp160	%read{344,344} %write{343,343}
temp	float	$tmp161	%read{347,347} %write{344,344}
temp	float	$tmp162	%read{346,346} %write{345,345}
temp	float	$tmp163	%read{347,347} %write{346,346}
temp	float	$tmp164	%read{386,386} %write{347,347}
temp	float	$tmp165	%read{349,349} %write{348,348}
temp	float	$tmp166	%read{351,351} %write{349,349}
temp	float	$tmp167	%read{351,351} %write{350,350}
temp	float	$tmp168	%read{354,354} %write{351,351}
temp	float	$tmp169	%read{353,353} %write{352,352}
temp	float	$tmp170	%read{354,354} %write{353,353}
temp	float	$tmp171	%read{386,386} %write{354,354}
temp	float	$tmp172	%read{356,356} %write{355,355}
temp	float	$tmp173	%read{358,358} %write{356,356}
temp	float	$tmp174	%read{358,358} %write{357,357}
temp	float	$tmp175	%read{359,359} %write{358,358}
temp	float	$tmp176	%read{386,386} %write{359,359}
temp	float	$tmp177	%read{361,361} %write{360,360}
temp	float	$tmp178	%read{363,363} %write{361,361}
temp	float	$tmp179	%read{363,363} %write{362,362}
temp	float	$tmp180	%read{366,366} %write{363,363}
temp	float	$tmp181	%read{365,365} %write{364,364}
temp	float	$tmp182	%read{366,366} %write{365,365}
temp	float	$tmp183	%read{386,386} %write{366,366}
temp	float	$tmp184	%read{368,368} %write{367,367}
temp	float	$tmp185	%read{370,370} %write{368,368}
temp	float	$tmp186	%read{370,370} %write{369,369}
temp	float	$tmp187	%read{373,373} %write{370,370}
temp	float	$tmp188	%read{372,372} %write{371,371}
temp	float	$tmp189	%read{373,373} %write{372,372}
temp	float	$tmp190	%read{386,386} %write{373,373}
temp	float	$tmp191	%read{375,375} %write{374,374}
temp	float	$tmp192	%read{377,377} %write{375,375}
temp	float	$tmp193	%read{377,377} %write{376,376}
temp	float	$tmp194	%read{380,380} %write{377,377}
temp	float	$tmp195	%read{379,379} %write{378,378}
temp	float	$tmp196	%read{380,380} %write{379,379}
temp	float	$tmp197	%read{386,386} %write{380,380}
temp	float	$tmp198	%read{382,382} %write{381,381}
temp	float	$tmp199	%read{384,384} %write{382,382}
temp	float	$tmp200	%read{384,384} %write{383,383}
temp	float	$tmp201	%read{385,385} %write{384,384}
temp	float	$tmp202	%read{386,386} %write{385,385}
temp	float	$tmp203.x	%read{393,426} %write{387,387}
temp	float	$tmp203.y	%read{395,428} %write{388,388}
temp	float	$tmp203.z	%read{398,431} %write{389,389}
temp	float	$tmp203.w	%read{401,434} %write{390,390}
temp	float	$tmp204	%read{393,393} %write{392,392}
temp	float	$tmp205	%read{396,396} %write{393,393}
temp	float	$tmp206	%read{395,395} %write{394,394}
temp	float	$tmp207	%read{396,396} %write{395,395}
temp	float	$tmp208	%read{399,399} %write{396,396}
temp	float	$tmp209	%read{398,398} %write{397,397}
temp	float	$tmp210	%read{399,399} %write{398,398}
temp	float	$tmp211	%read{402,402} %write{399,399}
temp	float	$tmp212	%read{401,401} %write{400,400}
temp	float	$tmp213	%read{402,402} %write{401,401}
temp	float	$tmp214	%read{404,404} %write{403,403}
temp	float	$tmp215	%read{407,407} %write{404,404}
temp	float	$tmp216	%read{406,406} %write{405,405}
temp	float	$tmp217	%read{407,407} %write{406,406}
temp	float	$tmp218	%read{410,410} %write{407,407}
temp	float	$tmp219	%read{409,409} %write{408,408}
temp	float	$tmp220	%read{410,410} %write{409,409}
temp	float	$tmp221	%read{413,413} %write{410,410}
temp	float	$tmp222	%read{412,412} %write{411,411}
temp	float	$tmp223	%read{413,413} %write{412,412}
temp	float	$tmp224	%read{415,415} %write{414,414}
temp	float	$tmp225	%read{418,418} %write{415,415}
temp	float	$tmp226	%read{417,417} %write{416,416}
temp	float	$tmp227	%read{418,418} %write{417,417}
temp	float	$tmp228	%read{421,421} %write{418,418}
temp	float	$tmp229	%read{420,420} %write{419,419}
temp	float	$tmp230	%read{421,421} %write{420,420}
temp	float	$tmp231	%read{424,424} %write{421,421}
temp	float	$tmp232	%read{423,423} %write{422,422}
temp	float	$tmp233	%read{424,424} %write{423,423}
temp	float	$tmp234	%read{426,426} %write{425,425}
temp	float	$tmp235	%read{429,429} %write{426,426}
temp	float	$tmp236	%read{428,428} %write{427,427}
temp	float	$tmp237	%read{429,429} %write{428,428}
temp	float	$tmp238	%read{432,432} %write{429,429}
temp	float	$tmp239	%read{431,431} %write{430,430}
temp	float	$tmp240	%read{432,432} %write{431,431}
temp	float	$tmp241	%read{435,435} %write{432,432}
temp	float	$tmp242	%read{434,434} %write{433,433}
temp	float	$tmp243	%read{435,435} %write{434,434}
temp	float	$tmp244	%read{441,441} %write{440,440}
temp	int	$tmp245	%read{459,459} %write{457,457}
temp	float	$tmp246	%read{469,469} %write{467,467}
temp	float	$tmp247	%read{470,470} %write{469,469}
temp	int	$tmp248	%read{472,472} %write{471,471}
temp	float	$tmp249	%read{476,476} %write{475,475}
temp	float	$tmp250	%read{475,475} %write{474,474}
temp	float	$tmp251	%read{477,477} %write{476,476}
temp	float	$tmp252	%read{479,479} %write{478,478}
temp	int	$tmp253	%read{488,488} %write{486,486}
temp	float	$tmp254	%read{498,498} %write{496,496}
temp	float	$tmp255	%read{499,499} %write{498,498}
temp	int	$tmp256	%read{501,501} %write{500,500}
temp	float	$tmp257	%read{505,505} %write{504,504}
temp	float	$tmp258	%read{504,504} %write{503,503}
temp	float	$tmp259	%read{506,506} %write{505,505}
temp	float	$tmp260	%read{508,508} %write{507,507}
const	float	$const37	1.5		%read{532,560} %write{2147483647,-1}
const	string	$const38	"ggx"		%read{532,560} %write{2147483647,-1}
const	string	$const39	"R"		%read{524,556} %write{2147483647,-1}
const	string	$const40	"mx_dielectric_bsdf"		%read{523,551} %write{2147483647,-1}
const	string	$const41	"T"		%read{524,556} %write{2147483647,-1}
temp	int	$tmp262	%read{525,525} %write{524,524}
temp	int	$tmp263	%read{529,529} %write{528,528}
temp	closure color	$tmp264	%read{533,533} %write{532,532}
const	string	$const42	"thinfilm_thickness"		%read{532,560} %write{2147483647,-1}
const	string	$const43	"thinfilm_ior"		%read{532,560} %write{2147483647,-1}
const	string	$const44	"dielectric_bsdf"		%read{532,560} %write{2147483647,-1}
temp	closure color	$tmp265	%read{537,537} %write{536,536}
const	string	$const45	"conductor_bsdf"		%read{536,536} %write{2147483647,-1}
temp	int	$tmp266	%read{541,541} %write{540,540}
temp	int	$tmp267	%read{545,545} %write{544,544}
temp	closure color	$tmp268	%read{549,549} %write{548,548}
temp	int	$tmp269	%read{553,553} %write{552,552}
temp	int	$tmp270	%read{557,557} %write{556,556}
temp	closure color	$tmp271	%read{561,561} %write{560,560}
temp	closure color	$tmp272	%read{563,563} %write{562,562}
const	string	$const46	"sheen_bsdf"		%read{562,562} %write{2147483647,-1}
temp	closure color	$tmp273	%read{566,566} %write{565,565}
const	string	$const47	"translucent_bsdf"		%read{565,565} %write{2147483647,-1}
const	string	$const48	"mx_subsurface_bsdf"		%read{568,568} %write{2147483647,-1}
temp	color	$tmp274	%read{570,570} %write{569,569}
const	string	$const49	"subsurface_bssrdf"		%read{570,570} %write{2147483647,-1}
const	string	$const50	"mix"		%read{571,612} %write{2147483647,-1}
temp	float	$tmp275	%read{573,573} %write{572,572}
temp	closure color	$tmp276	%read{575,575} %write{573,573}
temp	closure color	$tmp277	%read{575,575} %write{574,574}
temp	closure color	$tmp278	%read{577,577} %write{576,576}
const	string	$const51	"oren_nayar_diffuse_bsdf"		%read{576,576} %write{2147483647,-1}
temp	float	$tmp279	%read{580,580} %write{579,579}
temp	closure color	$tmp280	%read{582,582} %write{580,580}
temp	closure color	$tmp281	%read{582,582} %write{581,581}
const	string	$const52	"layer"		%read{583,596} %write{2147483647,-1}
temp	float	$tmp282	%read{586,586} %write{585,585}
temp	closure color	$tmp283	%read{588,588} %write{586,586}
temp	closure color	$tmp284	%read{588,588} %write{587,587}
temp	float	$tmp285	%read{592,592} %write{591,591}
temp	closure color	$tmp286	%read{594,594} %write{592,592}
temp	closure color	$tmp287	%read{594,594} %write{593,593}
const	string	$const53	"uniform_edf"		%read{597,597} %write{2147483647,-1}
const	float	$const54	5		%read{609,609} %write{2147483647,-1}
const	string	$const55	"mx_generalized_schlick_edf"		%read{600,600} %write{2147483647,-1}
temp	float	$tmp289	%read{603,603} %write{602,602}
temp	vector	$tmp290	%read{602,602} %write{601,601}
const	string	$const56	"mx_fresnel_schlick"		%read{604,604} %write{2147483647,-1}
temp	float	$tmp291	%read{607,607} %write{605,605}
temp	float	$tmp292	%read{608,608} %write{607,607}
temp	float	$tmp293	%read{610,610} %write{609,609}
temp	float	$tmp294	%read{614,614} %write{613,613}
temp	closure color	$tmp295	%read{616,616} %write{614,614}
temp	closure color	$tmp296	%read{616,616} %write{615,615}
const	string	$const57	"mx_surface"		%read{620,620} %write{2147483647,-1}
temp	float	$tmp297	%read{625,625} %write{624,624}
const	string	$const58	"mx_surfacematerial"		%read{630,630} %write{2147483647,-1}
temp	float	$tmp298	%read{633,633} %write{632,632}
temp	closure color	$tmp299	%read{635,635} %write{634,634}
temp	closure color	$tmp300	%read{639,639} %write{635,635}
temp	closure color	$tmp301	%read{638,638} %write{636,636}
const	string	$const59	"transparent"		%read{636,636} %write{2147483647,-1}
temp	float	$tmp302	%read{638,638} %write{637,637}
temp	closure color	$tmp303	%read{639,639} %write{638,638}
code ___main___
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:748
#     vector geomprop_Nworld_out1 = transform(geomprop_Nworld_space, N);
	assign		null_closure $const1 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{748} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:749
#     vector geomprop_Tworld_out1 = normalize(vector(N[2], 0, -N[0]));
	functioncall	$const2 3 	%line{749} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	geomprop_Nworld_out1 $const3 geomprop_Nworld_space N 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{261} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:750
#     vector2 geomprop_UV0_out1 = vector2(u,v);
	compref		$tmp2 N $const4 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{750} %argrw{"wrr"}
	compref		$tmp3 N $const1 	%argrw{"wrr"}
	neg		$tmp4 $tmp3 	%argrw{"wr"}
	vector		$tmp1 $tmp2 $const5 $tmp4 	%argrw{"wrrr"}
	normalize	geomprop_Tworld_out1 $tmp1 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:751
#     color grid_color3_out = color(0.0);
	assign		geomprop_UV0_out1.x u 	%line{751} %argrw{"wr"}
	assign		geomprop_UV0_out1.y v 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:752
#     NG_grid_color3(geomprop_UV0_out1, grid_color3_uvtiling, grid_color3_uvoffset, grid_color3_thickness, grid_color3_staggered, grid_color3_out);
	assign		grid_color3_out $const6 	%line{752} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:753
#     surfaceshader SR_test_grid_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const7 114 	%line{753} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:759
# 
	functioncall	$const8 15 	%line{759} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___671_texcoord_scale_out.x geomprop_UV0_out1.x grid_color3_uvtiling.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___671_texcoord_scale_out.y geomprop_UV0_out1.y grid_color3_uvtiling.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:37
#     float thick_to_size_out = thick_to_size_in1_tmp - thickness;
	assign		___671_thick_to_size_in1_tmp $const9 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{37} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:38
#     vector2 texcoord_bias_out = texcoord_scale_out - uvoffset;
	sub		___671_thick_to_size_out ___671_thick_to_size_in1_tmp grid_color3_thickness 	%line{38} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:759
# 
	functioncall	$const10 20 	%line{759} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___671_texcoord_bias_out.x ___671_texcoord_scale_out.x grid_color3_uvoffset.x 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___671_texcoord_bias_out.y ___671_texcoord_scale_out.y grid_color3_uvoffset.y 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:40
#     float texcoord_bias_separate_outy = 0.0;
	assign		___671_texcoord_bias_separate_outx $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{40} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:41
#     NG_separate2_vector2(texcoord_bias_out, texcoord_bias_separate_outx, texcoord_bias_separate_outy);
	assign		___671_texcoord_bias_separate_outy $const5 	%line{41} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:42
#     float mod_Y_row_in2_tmp = 2.000000;
	functioncall	$const11 41 	%line{42} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:20
#     float N_extract_0_out = mx_extract(in, N_extract_0_index_tmp);
	assign		___669_N_extract_0_index_tmp $const1 	%line{20} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:21
#     int N_extract_1_index_tmp = 1;
	functioncall	$const12 31 	%line{21} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:118
#     if (index == 0) return in.x;
	eq		$tmp5 ___669_N_extract_0_index_tmp $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{118} %argrw{"wrr"}
	if		$tmp5 29 31 	%argrw{"r"}
	assign		___669_N_extract_0_out ___671_texcoord_bias_out.x 	%argrw{"wr"}
	return
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:119
#     else return in.y;
	assign		___669_N_extract_0_out ___671_texcoord_bias_out.y 	%line{119} %argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:22
#     float N_extract_1_out = mx_extract(in, N_extract_1_index_tmp);
	assign		___669_N_extract_1_index_tmp $const13 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{22} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:23
#     outx = N_extract_0_out;
	functioncall	$const12 39 	%line{23} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:118
#     if (index == 0) return in.x;
	eq		$tmp6 ___669_N_extract_1_index_tmp $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{118} %argrw{"wrr"}
	if		$tmp6 37 39 	%argrw{"r"}
	assign		___669_N_extract_1_out ___671_texcoord_bias_out.x 	%argrw{"wr"}
	return
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:119
#     else return in.y;
	assign		___669_N_extract_1_out ___671_texcoord_bias_out.y 	%line{119} %argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:24
#     outy = N_extract_1_out;
	assign		___671_texcoord_bias_separate_outx ___669_N_extract_0_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{24} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:25
# }
	assign		___671_texcoord_bias_separate_outy ___669_N_extract_1_out 	%line{25} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:43
#     float mod_Y_row_out = mod(texcoord_bias_separate_outy, mod_Y_row_in2_tmp);
	assign		___671_mod_Y_row_in2_tmp $const14 	%line{43} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:44
#     float mod_Y_in2_tmp = 1.000000;
	functioncall	$const15 47 	%line{44} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp8 ___671_texcoord_bias_separate_outy ___671_mod_Y_row_in2_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp7 $tmp8 	%argrw{"wr"}
	mul		$tmp9 ___671_mod_Y_row_in2_tmp $tmp7 	%argrw{"wrr"}
	sub		___671_mod_Y_row_out ___671_texcoord_bias_separate_outy $tmp9 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:45
#     float mod_Y_out = mod(texcoord_bias_separate_outy, mod_Y_in2_tmp);
	assign		___671_mod_Y_in2_tmp $const9 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{45} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:46
#     float alt_rows_shift_value2_tmp = 1.000000;
	functioncall	$const15 53 	%line{46} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp11 ___671_texcoord_bias_separate_outy ___671_mod_Y_in2_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp10 $tmp11 	%argrw{"wr"}
	mul		$tmp12 ___671_mod_Y_in2_tmp $tmp10 	%argrw{"wrr"}
	sub		___671_mod_Y_out ___671_texcoord_bias_separate_outy $tmp12 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:47
#     float alt_rows_shift_in1_tmp = 0.500000;
	assign		___671_alt_rows_shift_value2_tmp $const9 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{47} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:48
#     float alt_rows_shift_in2_tmp = 0.000000;
	assign		___671_alt_rows_shift_in1_tmp $const16 	%line{48} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:49
#     float alt_rows_shift_out = mx_ternary(mod_Y_row_out > alt_rows_shift_value2_tmp, alt_rows_shift_in1_tmp, alt_rows_shift_in2_tmp);
	assign		___671_alt_rows_shift_in2_tmp $const5 	%line{49} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:50
#     float mody_2_in2_tmp = 2.000000;
	gt		$tmp13 ___671_mod_Y_row_out ___671_alt_rows_shift_value2_tmp 	%line{50} %argrw{"wrr"}
	functioncall	$const17 63 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp13 61 63 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___671_alt_rows_shift_out ___671_alt_rows_shift_in1_tmp 	%argrw{"wr"}
	return
	assign		___671_alt_rows_shift_out ___671_alt_rows_shift_in2_tmp 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:51
#     float mody_2_out = mod_Y_out * mody_2_in2_tmp;
	assign		___671_mody_2_in2_tmp $const14 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{51} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:52
#     float shift_X_out = texcoord_bias_separate_outx + alt_rows_shift_out;
	mul		___671_mody_2_out ___671_mod_Y_out ___671_mody_2_in2_tmp 	%line{52} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:53
#     float subY_1_in2_tmp = 1.000000;
	add		___671_shift_X_out ___671_texcoord_bias_separate_outx ___671_alt_rows_shift_out 	%line{53} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:54
#     float subY_1_out = mody_2_out - subY_1_in2_tmp;
	assign		___671_subY_1_in2_tmp $const9 	%line{54} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:55
#     int stagger_selection_value2_tmp = 1;
	sub		___671_subY_1_out ___671_mody_2_out ___671_subY_1_in2_tmp 	%line{55} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:56
#     float stagger_selection_out = mx_ternary(staggered == stagger_selection_value2_tmp, shift_X_out, texcoord_bias_separate_outx);
	assign		___671_stagger_selection_value2_tmp $const13 	%line{56} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:57
#     float abs_Y_out = abs(subY_1_out);
	eq		$tmp14 grid_color3_staggered ___671_stagger_selection_value2_tmp 	%line{57} %argrw{"wrr"}
	functioncall	$const17 76 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp14 74 76 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___671_stagger_selection_out ___671_shift_X_out 	%argrw{"wr"}
	return
	assign		___671_stagger_selection_out ___671_texcoord_bias_separate_outx 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:58
#     float mod_X_in2_tmp = 1.000000;
	abs		___671_abs_Y_out ___671_subY_1_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{58} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:59
#     float mod_X_out = mod(stagger_selection_out, mod_X_in2_tmp);
	assign		___671_mod_X_in2_tmp $const9 	%line{59} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:60
#     float Y_detect_in1_tmp = 0.000000;
	functioncall	$const15 83 	%line{60} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp16 ___671_stagger_selection_out ___671_mod_X_in2_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp15 $tmp16 	%argrw{"wr"}
	mul		$tmp17 ___671_mod_X_in2_tmp $tmp15 	%argrw{"wrr"}
	sub		___671_mod_X_out ___671_stagger_selection_out $tmp17 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:61
#     float Y_detect_in2_tmp = 1.000000;
	assign		___671_Y_detect_in1_tmp $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{61} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:62
#     float Y_detect_out = mx_ternary(abs_Y_out > thick_to_size_out, Y_detect_in1_tmp, Y_detect_in2_tmp);
	assign		___671_Y_detect_in2_tmp $const9 	%line{62} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:63
#     float modx_2_in2_tmp = 2.000000;
	gt		$tmp18 ___671_abs_Y_out ___671_thick_to_size_out 	%line{63} %argrw{"wrr"}
	functioncall	$const17 92 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp18 90 92 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___671_Y_detect_out ___671_Y_detect_in1_tmp 	%argrw{"wr"}
	return
	assign		___671_Y_detect_out ___671_Y_detect_in2_tmp 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:64
#     float modx_2_out = mod_X_out * modx_2_in2_tmp;
	assign		___671_modx_2_in2_tmp $const14 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{64} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:65
#     float subX_1_in2_tmp = 1.000000;
	mul		___671_modx_2_out ___671_mod_X_out ___671_modx_2_in2_tmp 	%line{65} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:66
#     float subX_1_out = modx_2_out - subX_1_in2_tmp;
	assign		___671_subX_1_in2_tmp $const9 	%line{66} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:67
#     float abs_X_out = abs(subX_1_out);
	sub		___671_subX_1_out ___671_modx_2_out ___671_subX_1_in2_tmp 	%line{67} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:68
#     float X_detect_in1_tmp = 0.000000;
	abs		___671_abs_X_out ___671_subX_1_out 	%line{68} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:69
#     float X_detect_in2_tmp = 1.000000;
	assign		___671_X_detect_in1_tmp $const5 	%line{69} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:70
#     float X_detect_out = mx_ternary(abs_X_out > thick_to_size_out, X_detect_in1_tmp, X_detect_in2_tmp);
	assign		___671_X_detect_in2_tmp $const9 	%line{70} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:71
#     float min_out = min(X_detect_out, Y_detect_out);
	gt		$tmp19 ___671_abs_X_out ___671_thick_to_size_out 	%line{71} %argrw{"wrr"}
	functioncall	$const17 106 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:18
# float mx_ternary(int expr, float v1, float v2) { if (expr) return v1; else return v2; }
	if		$tmp19 104 106 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{18} %argrw{"r"}
	assign		___671_X_detect_out ___671_X_detect_in1_tmp 	%argrw{"wr"}
	return
	assign		___671_X_detect_out ___671_X_detect_in2_tmp 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:72
#     float inv_result_in1_tmp = 1.000000;
	min		___671_min_out ___671_X_detect_out ___671_Y_detect_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{72} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:73
#     float inv_result_out = inv_result_in1_tmp - min_out;
	assign		___671_inv_result_in1_tmp $const9 	%line{73} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:74
#     color to_rgb_out = color(0.0);
	sub		___671_inv_result_out ___671_inv_result_in1_tmp ___671_min_out 	%line{74} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:75
#     NG_convert_float_color3(inv_result_out, to_rgb_out);
	assign		___671_to_rgb_out $const6 	%line{75} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:76
#     out = to_rgb_out;
	functioncall	$const18 113 	%line{76} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:30
#     out = combine_out;
	color		___670_combine_out ___671_inv_result_out ___671_inv_result_out ___671_inv_result_out 	%line{30} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:31
# }
	assign		___671_to_rgb_out ___670_combine_out 	%line{31} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:77
# }
	assign		grid_color3_out ___671_to_rgb_out 	%line{77} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:754
#     NG_standard_surface_surfaceshader_100(SR_test_grid_base, grid_color3_out, SR_test_grid_diffuse_roughness, SR_test_grid_metalness, SR_test_grid_specular, SR_test_grid_specular_color, SR_test_grid_specular_roughness, SR_test_grid_specular_IOR, SR_test_grid_specular_anisotropy, SR_test_grid_specular_rotation, SR_test_grid_transmission, SR_test_grid_transmission_color, SR_test_grid_transmission_depth, SR_test_grid_transmission_scatter, SR_test_grid_transmission_scatter_anisotropy, SR_test_grid_transmission_dispersion, SR_test_grid_transmission_extra_roughness, SR_test_grid_subsurface, SR_test_grid_subsurface_color, SR_test_grid_subsurface_radius, SR_test_grid_subsurface_scale, SR_test_grid_subsurface_anisotropy, SR_test_grid_sheen, SR_test_grid_sheen_color, SR_test_grid_sheen_roughness, SR_test_grid_coat, SR_test_grid_coat_color, SR_test_grid_coat_roughness, SR_test_grid_coat_anisotropy, SR_test_grid_coat_rotation, SR_test_grid_coat_IOR, geomprop_Nworld_out1, SR_test_grid_coat_affect_color, SR_test_grid_coat_affect_roughness, SR_test_grid_thin_film_thickness, SR_test_grid_thin_film_IOR, SR_test_grid_emission, SR_test_grid_emission_color, SR_test_grid_opacity, SR_test_grid_thin_walled, geomprop_Nworld_out1, geomprop_Tworld_out1, SR_test_grid_out);
	assign		SR_test_grid_out.bsdf null_closure 	%line{754} %argrw{"wr"}
	assign		SR_test_grid_out.edf null_closure 	%argrw{"wr"}
	assign		SR_test_grid_out.opacity $const9 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:755
#     MATERIAL test_grid_out = mx_surfacematerial(SR_test_grid_out, backsurfaceshader, displacementshader1);
	functioncall	$const19 630 	%line{755} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:251
#     vector2 coat_roughness_vector_out = vector2(0.0, 0.0);
	assign		___695_null_closure $const1 	%line{251} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:252
#     mx_roughness_anisotropy(coat_roughness, coat_anisotropy, coat_roughness_vector_out);
	assign		___695_coat_roughness_vector_out.x $const5 	%line{252} %argrw{"wr"}
	assign		___695_coat_roughness_vector_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:253
#     float coat_tangent_rotate_degree_in2_tmp = 360.000000;
	functioncall	$const20 140 	%line{253} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:82
#     if (anisotropy > 0.0)
	mul		$tmp20 SR_test_grid_coat_roughness SR_test_grid_coat_roughness 	%line{82} %argrw{"wrr"}
	functioncall	$const22 126 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp21 $tmp20 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___672_roughness_sqr $tmp21 $const21 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:83
#     {
	gt		$tmp22 SR_test_grid_coat_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{83} %argrw{"wrr"}
	if		$tmp22 138 140 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:85
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const22 131 	%line{85} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp24 SR_test_grid_coat_anisotropy $const23 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp23 $tmp24 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:85
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp25 $const9 $tmp23 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{85} %argrw{"wrr"}
	sqrt		___673_aspect $tmp25 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:86
#         result.y = roughness_sqr * aspect;
	div		$tmp26 ___672_roughness_sqr ___673_aspect 	%line{86} %argrw{"wrr"}
	min		___695_coat_roughness_vector_out.x $tmp26 $const9 	%argrw{"wrr"}
	assign		___695_coat_roughness_vector_out.x ___695_coat_roughness_vector_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:87
#     }
	mul		___695_coat_roughness_vector_out.y ___672_roughness_sqr ___673_aspect 	%line{87} %argrw{"wrr"}
	assign		___695_coat_roughness_vector_out.y ___695_coat_roughness_vector_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:91
#         result.y = roughness_sqr;
	assign		___695_coat_roughness_vector_out.x ___672_roughness_sqr 	%line{91} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:92
#     }
	assign		___695_coat_roughness_vector_out.y ___672_roughness_sqr 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:254
#     float coat_tangent_rotate_degree_out = coat_rotation * coat_tangent_rotate_degree_in2_tmp;
	assign		___695_coat_tangent_rotate_degree_in2_tmp $const24 	%line{254} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:255
#     color metal_reflectivity_out = base_color * base;
	mul		___695_coat_tangent_rotate_degree_out SR_test_grid_coat_rotation ___695_coat_tangent_rotate_degree_in2_tmp 	%line{255} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:256
#     color metal_edgecolor_out = specular_color * specular;
	mul		___695_metal_reflectivity_out grid_color3_out SR_test_grid_base 	%line{256} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:257
#     float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
	mul		___695_metal_edgecolor_out SR_test_grid_specular_color SR_test_grid_specular 	%line{257} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:258
#     float tangent_rotate_degree_in2_tmp = 360.000000;
	mul		___695_coat_affect_roughness_multiply1_out SR_test_grid_coat_affect_roughness SR_test_grid_coat 	%line{258} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:259
#     float tangent_rotate_degree_out = specular_rotation * tangent_rotate_degree_in2_tmp;
	assign		___695_tangent_rotate_degree_in2_tmp $const24 	%line{259} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:260
#     float transmission_roughness_add_out = specular_roughness + transmission_extra_roughness;
	mul		___695_tangent_rotate_degree_out SR_test_grid_specular_rotation ___695_tangent_rotate_degree_in2_tmp 	%line{260} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:261
#     float subsurface_color_nonnegative_in2_tmp = 0.000000;
	add		___695_transmission_roughness_add_out SR_test_grid_specular_roughness SR_test_grid_transmission_extra_roughness 	%line{261} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:262
#     color subsurface_color_nonnegative_out = max(subsurface_color, subsurface_color_nonnegative_in2_tmp);
	assign		___695_subsurface_color_nonnegative_in2_tmp $const5 	%line{262} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:263
#     float coat_clamped_low_tmp = 0.000000;
	assign		$tmp27 ___695_subsurface_color_nonnegative_in2_tmp 	%line{263} %argrw{"wr"}
	max		___695_subsurface_color_nonnegative_out SR_test_grid_subsurface_color $tmp27 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:264
#     float coat_clamped_high_tmp = 1.000000;
	assign		___695_coat_clamped_low_tmp $const5 	%line{264} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:265
#     float coat_clamped_out = clamp(coat, coat_clamped_low_tmp, coat_clamped_high_tmp);
	assign		___695_coat_clamped_high_tmp $const9 	%line{265} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:266
#     color subsurface_radius_scaled_out = subsurface_radius * subsurface_scale;
	functioncall	$const22 156 	%line{266} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp28 SR_test_grid_coat ___695_coat_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___695_coat_clamped_out $tmp28 ___695_coat_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:267
#     float subsurface_selector_out = float(thin_walled);
	mul		___695_subsurface_radius_scaled_out SR_test_grid_subsurface_radius SR_test_grid_subsurface_scale 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{267} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:268
#     float base_color_nonnegative_in2_tmp = 0.000000;
	assign		$tmp29 SR_test_grid_thin_walled 	%line{268} %argrw{"wr"}
	assign		___695_subsurface_selector_out $tmp29 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:269
#     color base_color_nonnegative_out = max(base_color, base_color_nonnegative_in2_tmp);
	assign		___695_base_color_nonnegative_in2_tmp $const5 	%line{269} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:270
#     color coat_attenuation_bg_tmp = color(1.000000, 1.000000, 1.000000);
	assign		$tmp30 ___695_base_color_nonnegative_in2_tmp 	%line{270} %argrw{"wr"}
	max		___695_base_color_nonnegative_out grid_color3_out $tmp30 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:271
#     color coat_attenuation_out = mix(coat_attenuation_bg_tmp, coat_color, coat);
	assign		___695_coat_attenuation_bg_tmp $const25 	%line{271} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:272
#     float one_minus_coat_ior_in1_tmp = 1.000000;
	mix		___695_coat_attenuation_out ___695_coat_attenuation_bg_tmp SR_test_grid_coat_color SR_test_grid_coat 	%line{272} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:273
#     float one_minus_coat_ior_out = one_minus_coat_ior_in1_tmp - coat_IOR;
	assign		___695_one_minus_coat_ior_in1_tmp $const9 	%line{273} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:274
#     float one_plus_coat_ior_in1_tmp = 1.000000;
	sub		___695_one_minus_coat_ior_out ___695_one_minus_coat_ior_in1_tmp SR_test_grid_coat_IOR 	%line{274} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:275
#     float one_plus_coat_ior_out = one_plus_coat_ior_in1_tmp + coat_IOR;
	assign		___695_one_plus_coat_ior_in1_tmp $const9 	%line{275} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:276
#     color emission_weight_out = emission_color * emission1;
	add		___695_one_plus_coat_ior_out ___695_one_plus_coat_ior_in1_tmp SR_test_grid_coat_IOR 	%line{276} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:277
#     color opacity_luminance_out = color(0.0);
	mul		___695_emission_weight_out SR_test_grid_emission_color SR_test_grid_emission 	%line{277} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:278
#     mx_luminance_color3(opacity, color(0.272229, 0.674082, 0.053689), opacity_luminance_out);
	assign		___695_opacity_luminance_out $const6 	%line{278} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:279
#     vector coat_tangent_rotate_out = vector(0.0);
	functioncall	$const27 173 	%line{279} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:98
# }
	dot		$tmp32 SR_test_grid_opacity $const26 	%line{98} %argrw{"wrr"}
	assign		___695_opacity_luminance_out $tmp32 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:280
#     mx_rotate_vector3(tangent, coat_tangent_rotate_degree_out, coat_normal, coat_tangent_rotate_out);
	assign		___695_coat_tangent_rotate_out $const28 	%line{280} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:281
#     color artistic_ior_ior = color(0.0);
	functioncall	$const29 291 	%line{281} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:116
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const30 178 	%line{116} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp33 $const31 $const32 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___677_rotationRadians ___695_coat_tangent_rotate_degree_out $tmp33 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:117
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const33 241 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{117} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:103
#     float s = sin(angle);
	normalize	___676_nAxis geomprop_Nworld_out1 	%line{103} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:104
#     float c = cos(angle);
	sin		___676_s ___677_rotationRadians 	%line{104} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:105
#     float oc = 1.0 - c;
	cos		___676_c ___677_rotationRadians 	%line{105} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:106
# 
	sub		___676_oc $const9 ___676_c 	%line{106} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:108
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp34 ___676_nAxis $const1 	%line{108} %argrw{"wrr"}
	mul		$tmp35 ___676_oc $tmp34 	%argrw{"wrr"}
	compref		$tmp36 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp37 $tmp35 $tmp36 	%argrw{"wrr"}
	add		$tmp38 $tmp37 ___676_c 	%argrw{"wrr"}
	compref		$tmp39 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp40 ___676_oc $tmp39 	%argrw{"wrr"}
	compref		$tmp41 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp42 $tmp40 $tmp41 	%argrw{"wrr"}
	compref		$tmp43 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp44 $tmp43 ___676_s 	%argrw{"wrr"}
	sub		$tmp45 $tmp42 $tmp44 	%argrw{"wrr"}
	compref		$tmp46 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp47 ___676_oc $tmp46 	%argrw{"wrr"}
	compref		$tmp48 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp49 $tmp47 $tmp48 	%argrw{"wrr"}
	compref		$tmp50 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp51 $tmp50 ___676_s 	%argrw{"wrr"}
	add		$tmp52 $tmp49 $tmp51 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:109
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp53 ___676_nAxis $const1 	%line{109} %argrw{"wrr"}
	mul		$tmp54 ___676_oc $tmp53 	%argrw{"wrr"}
	compref		$tmp55 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp56 $tmp54 $tmp55 	%argrw{"wrr"}
	compref		$tmp57 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp58 $tmp57 ___676_s 	%argrw{"wrr"}
	add		$tmp59 $tmp56 $tmp58 	%argrw{"wrr"}
	compref		$tmp60 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp61 ___676_oc $tmp60 	%argrw{"wrr"}
	compref		$tmp62 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp63 $tmp61 $tmp62 	%argrw{"wrr"}
	add		$tmp64 $tmp63 ___676_c 	%argrw{"wrr"}
	compref		$tmp65 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp66 ___676_oc $tmp65 	%argrw{"wrr"}
	compref		$tmp67 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
	compref		$tmp69 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp70 $tmp69 ___676_s 	%argrw{"wrr"}
	sub		$tmp71 $tmp68 $tmp70 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:110
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp72 ___676_nAxis $const4 	%line{110} %argrw{"wrr"}
	mul		$tmp73 ___676_oc $tmp72 	%argrw{"wrr"}
	compref		$tmp74 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp75 $tmp73 $tmp74 	%argrw{"wrr"}
	compref		$tmp76 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp77 $tmp76 ___676_s 	%argrw{"wrr"}
	sub		$tmp78 $tmp75 $tmp77 	%argrw{"wrr"}
	compref		$tmp79 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp80 ___676_oc $tmp79 	%argrw{"wrr"}
	compref		$tmp81 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp82 $tmp80 $tmp81 	%argrw{"wrr"}
	compref		$tmp83 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp84 $tmp83 ___676_s 	%argrw{"wrr"}
	add		$tmp85 $tmp82 $tmp84 	%argrw{"wrr"}
	compref		$tmp86 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp87 ___676_oc $tmp86 	%argrw{"wrr"}
	compref		$tmp88 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp89 $tmp87 $tmp88 	%argrw{"wrr"}
	add		$tmp90 $tmp89 ___676_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:108
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___677_m $tmp38 $tmp45 $tmp52 $const5 $tmp59 $tmp64 $tmp71 $const5 $tmp78 $tmp85 $tmp90 $const5 $const5 $const5 $const5 $const9 	%line{108} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:118
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp91.x geomprop_Tworld_out1 $const1 	%line{118} %argrw{"wrr"}
	compref		$tmp91.y geomprop_Tworld_out1 $const13 	%argrw{"wrr"}
	compref		$tmp91.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp91.w $const9 	%argrw{"wr"}
	functioncall	$const2 290 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp92 ___677_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp93 $tmp92 $tmp91.x 	%argrw{"wrr"}
	mxcompref	$tmp94 ___677_m $const13 $const1 	%argrw{"wrrr"}
	mul		$tmp95 $tmp94 $tmp91.y 	%argrw{"wrr"}
	add		$tmp96 $tmp93 $tmp95 	%argrw{"wrr"}
	mxcompref	$tmp97 ___677_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp98 $tmp97 $tmp91.z 	%argrw{"wrr"}
	add		$tmp99 $tmp96 $tmp98 	%argrw{"wrr"}
	mxcompref	$tmp100 ___677_m $const34 $const1 	%argrw{"wrrr"}
	mul		$tmp101 $tmp100 $tmp91.w 	%argrw{"wrr"}
	add		___677_trans.x $tmp99 $tmp101 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp102 ___677_m $const1 $const13 	%line{416} %argrw{"wrrr"}
	mul		$tmp103 $tmp102 $tmp91.x 	%argrw{"wrr"}
	mxcompref	$tmp104 ___677_m $const13 $const13 	%argrw{"wrrr"}
	mul		$tmp105 $tmp104 $tmp91.y 	%argrw{"wrr"}
	add		$tmp106 $tmp103 $tmp105 	%argrw{"wrr"}
	mxcompref	$tmp107 ___677_m $const4 $const13 	%argrw{"wrrr"}
	mul		$tmp108 $tmp107 $tmp91.z 	%argrw{"wrr"}
	add		$tmp109 $tmp106 $tmp108 	%argrw{"wrr"}
	mxcompref	$tmp110 ___677_m $const34 $const13 	%argrw{"wrrr"}
	mul		$tmp111 $tmp110 $tmp91.w 	%argrw{"wrr"}
	add		___677_trans.y $tmp109 $tmp111 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp112 ___677_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp113 $tmp112 $tmp91.x 	%argrw{"wrr"}
	mxcompref	$tmp114 ___677_m $const13 $const4 	%argrw{"wrrr"}
	mul		$tmp115 $tmp114 $tmp91.y 	%argrw{"wrr"}
	add		$tmp116 $tmp113 $tmp115 	%argrw{"wrr"}
	mxcompref	$tmp117 ___677_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp118 $tmp117 $tmp91.z 	%argrw{"wrr"}
	add		$tmp119 $tmp116 $tmp118 	%argrw{"wrr"}
	mxcompref	$tmp120 ___677_m $const34 $const4 	%argrw{"wrrr"}
	mul		$tmp121 $tmp120 $tmp91.w 	%argrw{"wrr"}
	add		___677_trans.z $tmp119 $tmp121 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp122 ___677_m $const1 $const34 	%line{418} %argrw{"wrrr"}
	mul		$tmp123 $tmp122 $tmp91.x 	%argrw{"wrr"}
	mxcompref	$tmp124 ___677_m $const13 $const34 	%argrw{"wrrr"}
	mul		$tmp125 $tmp124 $tmp91.y 	%argrw{"wrr"}
	add		$tmp126 $tmp123 $tmp125 	%argrw{"wrr"}
	mxcompref	$tmp127 ___677_m $const4 $const34 	%argrw{"wrrr"}
	mul		$tmp128 $tmp127 $tmp91.z 	%argrw{"wrr"}
	add		$tmp129 $tmp126 $tmp128 	%argrw{"wrr"}
	mxcompref	$tmp130 ___677_m $const34 $const34 	%argrw{"wrrr"}
	mul		$tmp131 $tmp130 $tmp91.w 	%argrw{"wrr"}
	add		___677_trans.w $tmp129 $tmp131 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:119
# }
	vector		___695_coat_tangent_rotate_out ___677_trans.x ___677_trans.y ___677_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{119} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:282
#     color artistic_ior_extinction = color(0.0);
	assign		___695_artistic_ior_ior $const6 	%line{282} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:283
#     mx_artistic_ior(metal_reflectivity_out, metal_edgecolor_out, artistic_ior_ior, artistic_ior_extinction);
	assign		___695_artistic_ior_extinction $const6 	%line{283} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:284
#     float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
	functioncall	$const35 318 	%line{284} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:127
#     color r_sqrt = sqrt(r);
	assign		$tmp132 $const5 	%line{127} %argrw{"wr"}
	assign		$tmp133 $const36 	%argrw{"wr"}
	functioncall	$const22 299 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:140
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp134 ___695_metal_reflectivity_out $tmp133 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{140} %argrw{"wrr"}
	max		___678_r $tmp134 $tmp132 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:128
#     color n_min = (1.0 - r) / (1.0 + r);
	sqrt		___678_r_sqrt ___678_r 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{128} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:129
#     color n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
	sub		$tmp135 $const9 ___678_r 	%line{129} %argrw{"wrr"}
	add		$tmp136 $const9 ___678_r 	%argrw{"wrr"}
	div		___678_n_min $tmp135 $tmp136 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:130
#     ior = mix(n_max, n_min, edge_color);
	add		$tmp137 $const9 ___678_r_sqrt 	%line{130} %argrw{"wrr"}
	sub		$tmp138 $const9 ___678_r_sqrt 	%argrw{"wrr"}
	div		___678_n_max $tmp137 $tmp138 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:131
# 
	mix		___695_artistic_ior_ior ___678_n_max ___678_n_min ___695_metal_edgecolor_out 	%line{131} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:133
#     color nm1 = ior - 1.0;
	add		___678_np1 ___695_artistic_ior_ior $const9 	%line{133} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:134
#     color k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
	sub		___678_nm1 ___695_artistic_ior_ior $const9 	%line{134} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:135
#     k2 = max(k2, 0.0);
	mul		$tmp139 ___678_np1 ___678_np1 	%line{135} %argrw{"wrr"}
	mul		$tmp140 $tmp139 ___678_r 	%argrw{"wrr"}
	mul		$tmp141 ___678_nm1 ___678_nm1 	%argrw{"wrr"}
	sub		$tmp142 $tmp140 $tmp141 	%argrw{"wrr"}
	sub		$tmp143 $const9 ___678_r 	%argrw{"wrr"}
	div		___678_k2 $tmp142 $tmp143 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:136
#     extinction = sqrt(k2);
	assign		$tmp144 $const5 	%line{136} %argrw{"wr"}
	max		___678_k2 ___678_k2 $tmp144 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:137
# }
	sqrt		___695_artistic_ior_extinction ___678_k2 	%line{137} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:285
#     vector tangent_rotate_out = vector(0.0);
	mul		___695_coat_affect_roughness_multiply2_out ___695_coat_affect_roughness_multiply1_out SR_test_grid_coat_roughness 	%line{285} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:286
#     mx_rotate_vector3(tangent, tangent_rotate_degree_out, normal1, tangent_rotate_out);
	assign		___695_tangent_rotate_out $const28 	%line{286} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:287
#     float transmission_roughness_clamped_low_tmp = 0.000000;
	functioncall	$const29 437 	%line{287} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:116
#     matrix m = rotationMatrix(axis, rotationRadians);
	functioncall	$const30 324 	%line{116} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp145 $const31 $const32 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		___677_rotationRadians ___695_tangent_rotate_degree_out $tmp145 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:117
#     vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
	functioncall	$const33 387 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{117} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:103
#     float s = sin(angle);
	normalize	___676_nAxis geomprop_Nworld_out1 	%line{103} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:104
#     float c = cos(angle);
	sin		___676_s ___677_rotationRadians 	%line{104} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:105
#     float oc = 1.0 - c;
	cos		___676_c ___677_rotationRadians 	%line{105} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:106
# 
	sub		___676_oc $const9 ___676_c 	%line{106} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:108
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	compref		$tmp146 ___676_nAxis $const1 	%line{108} %argrw{"wrr"}
	mul		$tmp147 ___676_oc $tmp146 	%argrw{"wrr"}
	compref		$tmp148 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp149 $tmp147 $tmp148 	%argrw{"wrr"}
	add		$tmp150 $tmp149 ___676_c 	%argrw{"wrr"}
	compref		$tmp151 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp152 ___676_oc $tmp151 	%argrw{"wrr"}
	compref		$tmp153 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp154 $tmp152 $tmp153 	%argrw{"wrr"}
	compref		$tmp155 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp156 $tmp155 ___676_s 	%argrw{"wrr"}
	sub		$tmp157 $tmp154 $tmp156 	%argrw{"wrr"}
	compref		$tmp158 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp159 ___676_oc $tmp158 	%argrw{"wrr"}
	compref		$tmp160 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp161 $tmp159 $tmp160 	%argrw{"wrr"}
	compref		$tmp162 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp163 $tmp162 ___676_s 	%argrw{"wrr"}
	add		$tmp164 $tmp161 $tmp163 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:109
#                   oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
	compref		$tmp165 ___676_nAxis $const1 	%line{109} %argrw{"wrr"}
	mul		$tmp166 ___676_oc $tmp165 	%argrw{"wrr"}
	compref		$tmp167 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp168 $tmp166 $tmp167 	%argrw{"wrr"}
	compref		$tmp169 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp170 $tmp169 ___676_s 	%argrw{"wrr"}
	add		$tmp171 $tmp168 $tmp170 	%argrw{"wrr"}
	compref		$tmp172 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp173 ___676_oc $tmp172 	%argrw{"wrr"}
	compref		$tmp174 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp175 $tmp173 $tmp174 	%argrw{"wrr"}
	add		$tmp176 $tmp175 ___676_c 	%argrw{"wrr"}
	compref		$tmp177 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp178 ___676_oc $tmp177 	%argrw{"wrr"}
	compref		$tmp179 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp180 $tmp178 $tmp179 	%argrw{"wrr"}
	compref		$tmp181 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp182 $tmp181 ___676_s 	%argrw{"wrr"}
	sub		$tmp183 $tmp180 $tmp182 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:110
#                   0.0,                                      0.0,                                      0.0,                                      1.0);
	compref		$tmp184 ___676_nAxis $const4 	%line{110} %argrw{"wrr"}
	mul		$tmp185 ___676_oc $tmp184 	%argrw{"wrr"}
	compref		$tmp186 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp187 $tmp185 $tmp186 	%argrw{"wrr"}
	compref		$tmp188 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp189 $tmp188 ___676_s 	%argrw{"wrr"}
	sub		$tmp190 $tmp187 $tmp189 	%argrw{"wrr"}
	compref		$tmp191 ___676_nAxis $const13 	%argrw{"wrr"}
	mul		$tmp192 ___676_oc $tmp191 	%argrw{"wrr"}
	compref		$tmp193 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp194 $tmp192 $tmp193 	%argrw{"wrr"}
	compref		$tmp195 ___676_nAxis $const1 	%argrw{"wrr"}
	mul		$tmp196 $tmp195 ___676_s 	%argrw{"wrr"}
	add		$tmp197 $tmp194 $tmp196 	%argrw{"wrr"}
	compref		$tmp198 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp199 ___676_oc $tmp198 	%argrw{"wrr"}
	compref		$tmp200 ___676_nAxis $const4 	%argrw{"wrr"}
	mul		$tmp201 $tmp199 $tmp200 	%argrw{"wrr"}
	add		$tmp202 $tmp201 ___676_c 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:108
#                   oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
	matrix		___677_m $tmp150 $tmp157 $tmp164 $const5 $tmp171 $tmp176 $tmp183 $const5 $tmp190 $tmp197 $tmp202 $const5 $const5 $const5 $const5 $const9 	%line{108} %argrw{"wrrrrrrrrrrrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:118
#     result = vector(trans.x, trans.y, trans.z);
	compref		$tmp203.x geomprop_Tworld_out1 $const1 	%line{118} %argrw{"wrr"}
	compref		$tmp203.y geomprop_Tworld_out1 $const13 	%argrw{"wrr"}
	compref		$tmp203.z geomprop_Tworld_out1 $const4 	%argrw{"wrr"}
	assign		$tmp203.w $const9 	%argrw{"wr"}
	functioncall	$const2 436 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:415
#     return vector4 (M[0][0]*p.x + M[1][0]*p.y + M[2][0]*p.z + M[3][0]*p.w,
	mxcompref	$tmp204 ___677_m $const1 $const1 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h"} %line{415} %argrw{"wrrr"}
	mul		$tmp205 $tmp204 $tmp203.x 	%argrw{"wrr"}
	mxcompref	$tmp206 ___677_m $const13 $const1 	%argrw{"wrrr"}
	mul		$tmp207 $tmp206 $tmp203.y 	%argrw{"wrr"}
	add		$tmp208 $tmp205 $tmp207 	%argrw{"wrr"}
	mxcompref	$tmp209 ___677_m $const4 $const1 	%argrw{"wrrr"}
	mul		$tmp210 $tmp209 $tmp203.z 	%argrw{"wrr"}
	add		$tmp211 $tmp208 $tmp210 	%argrw{"wrr"}
	mxcompref	$tmp212 ___677_m $const34 $const1 	%argrw{"wrrr"}
	mul		$tmp213 $tmp212 $tmp203.w 	%argrw{"wrr"}
	add		___677_trans.x $tmp211 $tmp213 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:416
#                     M[0][1]*p.x + M[1][1]*p.y + M[2][1]*p.z + M[3][1]*p.w,
	mxcompref	$tmp214 ___677_m $const1 $const13 	%line{416} %argrw{"wrrr"}
	mul		$tmp215 $tmp214 $tmp203.x 	%argrw{"wrr"}
	mxcompref	$tmp216 ___677_m $const13 $const13 	%argrw{"wrrr"}
	mul		$tmp217 $tmp216 $tmp203.y 	%argrw{"wrr"}
	add		$tmp218 $tmp215 $tmp217 	%argrw{"wrr"}
	mxcompref	$tmp219 ___677_m $const4 $const13 	%argrw{"wrrr"}
	mul		$tmp220 $tmp219 $tmp203.z 	%argrw{"wrr"}
	add		$tmp221 $tmp218 $tmp220 	%argrw{"wrr"}
	mxcompref	$tmp222 ___677_m $const34 $const13 	%argrw{"wrrr"}
	mul		$tmp223 $tmp222 $tmp203.w 	%argrw{"wrr"}
	add		___677_trans.y $tmp221 $tmp223 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:417
#                     M[0][2]*p.x + M[1][2]*p.y + M[2][2]*p.z + M[3][2]*p.w,
	mxcompref	$tmp224 ___677_m $const1 $const4 	%line{417} %argrw{"wrrr"}
	mul		$tmp225 $tmp224 $tmp203.x 	%argrw{"wrr"}
	mxcompref	$tmp226 ___677_m $const13 $const4 	%argrw{"wrrr"}
	mul		$tmp227 $tmp226 $tmp203.y 	%argrw{"wrr"}
	add		$tmp228 $tmp225 $tmp227 	%argrw{"wrr"}
	mxcompref	$tmp229 ___677_m $const4 $const4 	%argrw{"wrrr"}
	mul		$tmp230 $tmp229 $tmp203.z 	%argrw{"wrr"}
	add		$tmp231 $tmp228 $tmp230 	%argrw{"wrr"}
	mxcompref	$tmp232 ___677_m $const34 $const4 	%argrw{"wrrr"}
	mul		$tmp233 $tmp232 $tmp203.w 	%argrw{"wrr"}
	add		___677_trans.z $tmp231 $tmp233 	%argrw{"wrr"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/vector4.h:418
#                     M[0][3]*p.x + M[1][3]*p.y + M[2][3]*p.z + M[3][3]*p.w);
	mxcompref	$tmp234 ___677_m $const1 $const34 	%line{418} %argrw{"wrrr"}
	mul		$tmp235 $tmp234 $tmp203.x 	%argrw{"wrr"}
	mxcompref	$tmp236 ___677_m $const13 $const34 	%argrw{"wrrr"}
	mul		$tmp237 $tmp236 $tmp203.y 	%argrw{"wrr"}
	add		$tmp238 $tmp235 $tmp237 	%argrw{"wrr"}
	mxcompref	$tmp239 ___677_m $const4 $const34 	%argrw{"wrrr"}
	mul		$tmp240 $tmp239 $tmp203.z 	%argrw{"wrr"}
	add		$tmp241 $tmp238 $tmp240 	%argrw{"wrr"}
	mxcompref	$tmp242 ___677_m $const34 $const34 	%argrw{"wrrr"}
	mul		$tmp243 $tmp242 $tmp203.w 	%argrw{"wrr"}
	add		___677_trans.w $tmp241 $tmp243 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:119
# }
	vector		___695_tangent_rotate_out ___677_trans.x ___677_trans.y ___677_trans.z 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{119} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:288
#     float transmission_roughness_clamped_high_tmp = 1.000000;
	assign		___695_transmission_roughness_clamped_low_tmp $const5 	%line{288} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:289
#     float transmission_roughness_clamped_out = clamp(transmission_roughness_add_out, transmission_roughness_clamped_low_tmp, transmission_roughness_clamped_high_tmp);
	assign		___695_transmission_roughness_clamped_high_tmp $const9 	%line{289} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:290
#     float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
	functioncall	$const22 442 	%line{290} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp244 ___695_transmission_roughness_add_out ___695_transmission_roughness_clamped_high_tmp 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___695_transmission_roughness_clamped_out $tmp244 ___695_transmission_roughness_clamped_low_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:291
#     float coat_ior_to_F0_sqrt_out = one_minus_coat_ior_out / one_plus_coat_ior_out;
	mul		___695_coat_gamma_multiply_out ___695_coat_clamped_out SR_test_grid_coat_affect_color 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{291} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:292
#     int opacity_luminance_float_index_tmp = 0;
	div		___695_coat_ior_to_F0_sqrt_out ___695_one_minus_coat_ior_out ___695_one_plus_coat_ior_out 	%line{292} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:293
#     float opacity_luminance_float_out = mx_extract(opacity_luminance_out, opacity_luminance_float_index_tmp);
	assign		___695_opacity_luminance_float_index_tmp $const1 	%line{293} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:294
#     vector coat_tangent_rotate_normalize_out = normalize(coat_tangent_rotate_out);
	functioncall	$const12 447 	%line{294} %argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:105
#     return in[index];
	compref		___695_opacity_luminance_float_out ___695_opacity_luminance_out ___695_opacity_luminance_float_index_tmp 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{105} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:295
#     float coat_affected_roughness_fg_tmp = 1.000000;
	normalize	___695_coat_tangent_rotate_normalize_out ___695_coat_tangent_rotate_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{295} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:296
#     float coat_affected_roughness_out = mix(specular_roughness, coat_affected_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___695_coat_affected_roughness_fg_tmp $const9 	%line{296} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:297
#     vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
	mix		___695_coat_affected_roughness_out SR_test_grid_specular_roughness ___695_coat_affected_roughness_fg_tmp ___695_coat_affect_roughness_multiply2_out 	%line{297} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:298
#     float coat_affected_transmission_roughness_fg_tmp = 1.000000;
	normalize	___695_tangent_rotate_normalize_out ___695_tangent_rotate_out 	%line{298} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:299
#     float coat_affected_transmission_roughness_out = mix(transmission_roughness_clamped_out, coat_affected_transmission_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
	assign		___695_coat_affected_transmission_roughness_fg_tmp $const9 	%line{299} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:300
#     float coat_gamma_in2_tmp = 1.000000;
	mix		___695_coat_affected_transmission_roughness_out ___695_transmission_roughness_clamped_out ___695_coat_affected_transmission_roughness_fg_tmp ___695_coat_affect_roughness_multiply2_out 	%line{300} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:301
#     float coat_gamma_out = coat_gamma_multiply_out + coat_gamma_in2_tmp;
	assign		___695_coat_gamma_in2_tmp $const9 	%line{301} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:302
#     float coat_ior_to_F0_out = coat_ior_to_F0_sqrt_out * coat_ior_to_F0_sqrt_out;
	add		___695_coat_gamma_out ___695_coat_gamma_multiply_out ___695_coat_gamma_in2_tmp 	%line{302} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:303
#     float coat_tangent_value2_tmp = 0.000000;
	mul		___695_coat_ior_to_F0_out ___695_coat_ior_to_F0_sqrt_out ___695_coat_ior_to_F0_sqrt_out 	%line{303} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:304
#     vector coat_tangent_out = mx_ternary(coat_anisotropy > coat_tangent_value2_tmp, coat_tangent_rotate_normalize_out, tangent);
	assign		___695_coat_tangent_value2_tmp $const5 	%line{304} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:305
#     vector2 main_roughness_out = vector2(0.0, 0.0);
	gt		$tmp245 SR_test_grid_coat_anisotropy ___695_coat_tangent_value2_tmp 	%line{305} %argrw{"wrr"}
	functioncall	$const17 464 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp245 462 464 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___695_coat_tangent_out ___695_coat_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___695_coat_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:306
#     mx_roughness_anisotropy(coat_affected_roughness_out, specular_anisotropy, main_roughness_out);
	assign		___695_main_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{306} %argrw{"wr"}
	assign		___695_main_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:307
#     float main_tangent_value2_tmp = 0.000000;
	functioncall	$const20 485 	%line{307} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:82
#     if (anisotropy > 0.0)
	mul		$tmp246 ___695_coat_affected_roughness_out ___695_coat_affected_roughness_out 	%line{82} %argrw{"wrr"}
	functioncall	$const22 471 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp247 $tmp246 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___672_roughness_sqr $tmp247 $const21 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:83
#     {
	gt		$tmp248 SR_test_grid_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{83} %argrw{"wrr"}
	if		$tmp248 483 485 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:85
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const22 476 	%line{85} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp250 SR_test_grid_specular_anisotropy $const23 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp249 $tmp250 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:85
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp251 $const9 $tmp249 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{85} %argrw{"wrr"}
	sqrt		___673_aspect $tmp251 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:86
#         result.y = roughness_sqr * aspect;
	div		$tmp252 ___672_roughness_sqr ___673_aspect 	%line{86} %argrw{"wrr"}
	min		___695_main_roughness_out.x $tmp252 $const9 	%argrw{"wrr"}
	assign		___695_main_roughness_out.x ___695_main_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:87
#     }
	mul		___695_main_roughness_out.y ___672_roughness_sqr ___673_aspect 	%line{87} %argrw{"wrr"}
	assign		___695_main_roughness_out.y ___695_main_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:91
#         result.y = roughness_sqr;
	assign		___695_main_roughness_out.x ___672_roughness_sqr 	%line{91} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:92
#     }
	assign		___695_main_roughness_out.y ___672_roughness_sqr 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:308
#     vector main_tangent_out = mx_ternary(specular_anisotropy > main_tangent_value2_tmp, tangent_rotate_normalize_out, tangent);
	assign		___695_main_tangent_value2_tmp $const5 	%line{308} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:309
#     vector2 transmission_roughness_out = vector2(0.0, 0.0);
	gt		$tmp253 SR_test_grid_specular_anisotropy ___695_main_tangent_value2_tmp 	%line{309} %argrw{"wrr"}
	functioncall	$const17 493 	%argrw{"r"}
# D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h:22
# vector mx_ternary(int expr, vector v1, vector v2) { if (expr) return v1; else return v2; }
	if		$tmp253 491 493 	%filename{"D:/Work/materialx/bernard_MaterialX_3/build/bin/libraries/stdlib/genosl/include/mx_funcs.h"} %line{22} %argrw{"r"}
	assign		___695_main_tangent_out ___695_tangent_rotate_normalize_out 	%argrw{"wr"}
	return
	assign		___695_main_tangent_out geomprop_Tworld_out1 	%argrw{"wr"}
	return
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:310
#     mx_roughness_anisotropy(coat_affected_transmission_roughness_out, specular_anisotropy, transmission_roughness_out);
	assign		___695_transmission_roughness_out.x $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{310} %argrw{"wr"}
	assign		___695_transmission_roughness_out.y $const5 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:311
#     color coat_affected_subsurface_color_out = pow(subsurface_color_nonnegative_out, coat_gamma_out);
	functioncall	$const20 514 	%line{311} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:82
#     if (anisotropy > 0.0)
	mul		$tmp254 ___695_coat_affected_transmission_roughness_out ___695_coat_affected_transmission_roughness_out 	%line{82} %argrw{"wrr"}
	functioncall	$const22 500 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp255 $tmp254 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___672_roughness_sqr $tmp255 $const21 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:83
#     {
	gt		$tmp256 SR_test_grid_specular_anisotropy $const5 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{83} %argrw{"wrr"}
	if		$tmp256 512 514 	%argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:85
#         result.x = min(roughness_sqr / aspect, 1.0);
	functioncall	$const22 505 	%line{85} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp258 SR_test_grid_specular_anisotropy $const23 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp257 $tmp258 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:85
#         result.x = min(roughness_sqr / aspect, 1.0);
	sub		$tmp259 $const9 $tmp257 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{85} %argrw{"wrr"}
	sqrt		___673_aspect $tmp259 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:86
#         result.y = roughness_sqr * aspect;
	div		$tmp260 ___672_roughness_sqr ___673_aspect 	%line{86} %argrw{"wrr"}
	min		___695_transmission_roughness_out.x $tmp260 $const9 	%argrw{"wrr"}
	assign		___695_transmission_roughness_out.x ___695_transmission_roughness_out.x 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:87
#     }
	mul		___695_transmission_roughness_out.y ___672_roughness_sqr ___673_aspect 	%line{87} %argrw{"wrr"}
	assign		___695_transmission_roughness_out.y ___695_transmission_roughness_out.y 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:91
#         result.y = roughness_sqr;
	assign		___695_transmission_roughness_out.x ___672_roughness_sqr 	%line{91} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:92
#     }
	assign		___695_transmission_roughness_out.y ___672_roughness_sqr 	%line{92} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:312
#     color coat_affected_diffuse_color_out = pow(base_color_nonnegative_out, coat_gamma_out);
	pow		___695_coat_affected_subsurface_color_out ___695_subsurface_color_nonnegative_out ___695_coat_gamma_out 	%line{312} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:313
#     float one_minus_coat_ior_to_F0_in1_tmp = 1.000000;
	pow		___695_coat_affected_diffuse_color_out ___695_base_color_nonnegative_out ___695_coat_gamma_out 	%line{313} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:314
#     float one_minus_coat_ior_to_F0_out = one_minus_coat_ior_to_F0_in1_tmp - coat_ior_to_F0_out;
	assign		___695_one_minus_coat_ior_to_F0_in1_tmp $const9 	%line{314} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:315
#     color emission_color0_out = color(0.0);
	sub		___695_one_minus_coat_ior_to_F0_out ___695_one_minus_coat_ior_to_F0_in1_tmp ___695_coat_ior_to_F0_out 	%line{315} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:316
#     NG_convert_float_color3(one_minus_coat_ior_to_F0_out, emission_color0_out);
	assign		___695_emission_color0_out $const6 	%line{316} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:317
#     BSDF coat_bsdf_out = null_closure;
	functioncall	$const18 522 	%line{317} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:30
#     out = combine_out;
	color		___670_combine_out ___695_one_minus_coat_ior_to_F0_out ___695_one_minus_coat_ior_to_F0_out ___695_one_minus_coat_ior_to_F0_out 	%line{30} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:31
# }
	assign		___695_emission_color0_out ___670_combine_out 	%line{31} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:318
#     mx_dielectric_bsdf(coat, color(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, 0.000000, 1.500000, coat_normal, coat_tangent_out, "ggx", "R", coat_bsdf_out);
	assign		___695_coat_bsdf_out ___695_null_closure 	%line{318} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:319
#     float metal_bsdf_weight_tmp = 1.000000;
	functioncall	$const40 534 	%line{319} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:142
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp262 $const39 $const41 	%line{142} %argrw{"wrr"}
	if		$tmp262 527 528 	%argrw{"r"}
	assign		___679_reflection_tint $const6 	%argrw{"wr"}
	assign		___679_reflection_tint $const25 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:143
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp263 $const39 $const39 	%line{143} %argrw{"wrr"}
	if		$tmp263 531 532 	%argrw{"r"}
	assign		___679_transmission_tint $const6 	%argrw{"wr"}
	assign		___679_transmission_tint $const25 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:144
# }
	closure		$tmp264 $const44 geomprop_Nworld_out1 ___695_coat_tangent_out ___679_reflection_tint ___679_transmission_tint ___695_coat_roughness_vector_out.x ___695_coat_roughness_vector_out.y SR_test_grid_coat_IOR $const38 $const42 $const5 $const43 $const37 	%line{144} %argrw{"wrrrrrrrrrrrrr"}
	mul		___695_coat_bsdf_out $tmp264 SR_test_grid_coat 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:320
#     string metal_bsdf_distribution_tmp = "ggx";
	assign		___695_metal_bsdf_weight_tmp $const9 	%line{320} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:321
#     BSDF metal_bsdf_out = metal_bsdf_weight_tmp * conductor_bsdf(normal1, main_tangent_out, main_roughness_out.x, main_roughness_out.y, artistic_ior_ior, artistic_ior_extinction, metal_bsdf_distribution_tmp, "thinfilm_thickness", thin_film_thickness, "thinfilm_ior", thin_film_IOR);
	assign		___695_metal_bsdf_distribution_tmp $const38 	%line{321} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:322
#     BSDF specular_bsdf_out = null_closure;
	closure		$tmp265 $const45 geomprop_Nworld_out1 ___695_main_tangent_out ___695_main_roughness_out.x ___695_main_roughness_out.y ___695_artistic_ior_ior ___695_artistic_ior_extinction ___695_metal_bsdf_distribution_tmp $const42 SR_test_grid_thin_film_thickness $const43 SR_test_grid_thin_film_IOR 	%line{322} %argrw{"wrrrrrrrrrrrr"}
	mul		___695_metal_bsdf_out $tmp265 ___695_metal_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:323
#     mx_dielectric_bsdf(specular, specular_color, specular_IOR, main_roughness_out, thin_film_thickness, thin_film_IOR, normal1, main_tangent_out, "ggx", "R", specular_bsdf_out);
	assign		___695_specular_bsdf_out ___695_null_closure 	%line{323} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:324
#     BSDF transmission_bsdf_out = null_closure;
	functioncall	$const40 550 	%line{324} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:142
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp266 $const39 $const41 	%line{142} %argrw{"wrr"}
	if		$tmp266 543 544 	%argrw{"r"}
	assign		___679_reflection_tint $const6 	%argrw{"wr"}
	assign		___679_reflection_tint SR_test_grid_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:143
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp267 $const39 $const39 	%line{143} %argrw{"wrr"}
	if		$tmp267 547 548 	%argrw{"r"}
	assign		___679_transmission_tint $const6 	%argrw{"wr"}
	assign		___679_transmission_tint SR_test_grid_specular_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:144
# }
	closure		$tmp268 $const44 geomprop_Nworld_out1 ___695_main_tangent_out ___679_reflection_tint ___679_transmission_tint ___695_main_roughness_out.x ___695_main_roughness_out.y SR_test_grid_specular_IOR $const38 $const42 SR_test_grid_thin_film_thickness $const43 SR_test_grid_thin_film_IOR 	%line{144} %argrw{"wrrrrrrrrrrrrr"}
	mul		___695_specular_bsdf_out $tmp268 SR_test_grid_specular 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:325
#     mx_dielectric_bsdf(1.000000, transmission_color, specular_IOR, transmission_roughness_out, 0.000000, 1.500000, normal1, main_tangent_out, "ggx", "T", transmission_bsdf_out);
	assign		___695_transmission_bsdf_out ___695_null_closure 	%line{325} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:326
#     BSDF sheen_bsdf_out = sheen1 * sheen_bsdf(normal1, sheen_color, sheen_roughness);
	functioncall	$const40 562 	%line{326} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:142
#     color transmission_tint = (scatter_mode == "R") ? color(0.0) : tint;
	eq		$tmp269 $const41 $const41 	%line{142} %argrw{"wrr"}
	if		$tmp269 555 556 	%argrw{"r"}
	assign		___679_reflection_tint $const6 	%argrw{"wr"}
	assign		___679_reflection_tint SR_test_grid_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:143
#     bsdf = weight * dielectric_bsdf(N, U, reflection_tint, transmission_tint, roughness.x, roughness.y, ior, distribution, "thinfilm_thickness", thinfilm_thickness, "thinfilm_ior", thinfilm_ior);
	eq		$tmp270 $const41 $const39 	%line{143} %argrw{"wrr"}
	if		$tmp270 559 560 	%argrw{"r"}
	assign		___679_transmission_tint $const6 	%argrw{"wr"}
	assign		___679_transmission_tint SR_test_grid_transmission_color 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:144
# }
	closure		$tmp271 $const44 geomprop_Nworld_out1 ___695_main_tangent_out ___679_reflection_tint ___679_transmission_tint ___695_transmission_roughness_out.x ___695_transmission_roughness_out.y SR_test_grid_specular_IOR $const38 $const42 $const5 $const43 $const37 	%line{144} %argrw{"wrrrrrrrrrrrrr"}
	mul		___695_transmission_bsdf_out $tmp271 $const9 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:327
#     float translucent_bsdf_weight_tmp = 1.000000;
	closure		$tmp272 $const46 geomprop_Nworld_out1 SR_test_grid_sheen_color SR_test_grid_sheen_roughness 	%line{327} %argrw{"wrrrr"}
	mul		___695_sheen_bsdf_out $tmp272 SR_test_grid_sheen 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:328
#     BSDF translucent_bsdf_out = translucent_bsdf_weight_tmp * translucent_bsdf(normal1, coat_affected_subsurface_color_out);
	assign		___695_translucent_bsdf_weight_tmp $const9 	%line{328} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:329
#     BSDF subsurface_bsdf_out = null_closure;
	closure		$tmp273 $const47 geomprop_Nworld_out1 ___695_coat_affected_subsurface_color_out 	%line{329} %argrw{"wrrr"}
	mul		___695_translucent_bsdf_out $tmp273 ___695_translucent_bsdf_weight_tmp 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:330
#     mx_subsurface_bsdf(1.000000, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal1, subsurface_bsdf_out);
	assign		___695_subsurface_bsdf_out ___695_null_closure 	%line{330} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:331
#     BSDF selected_subsurface_bsdf_out = mix(subsurface_bsdf_out, translucent_bsdf_out, subsurface_selector_out);
	functioncall	$const48 571 	%line{331} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:152
# #endif
	mul		$tmp274 $const9 ___695_coat_affected_subsurface_color_out 	%line{152} %argrw{"wrr"}
	closure		___695_subsurface_bsdf_out $const49 geomprop_Nworld_out1 $tmp274 $const9 ___695_subsurface_radius_scaled_out SR_test_grid_subsurface_anisotropy 	%argrw{"wrrrrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:332
#     BSDF diffuse_bsdf_out = base * oren_nayar_diffuse_bsdf(normal1, coat_affected_diffuse_color_out, diffuse_roughness);
	functioncall	$const50 576 	%line{332} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp275 $const9 ___695_subsurface_selector_out 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp276 ___695_subsurface_bsdf_out $tmp275 	%argrw{"wrr"}
	mul		$tmp277 ___695_translucent_bsdf_out ___695_subsurface_selector_out 	%argrw{"wrr"}
	add		___695_selected_subsurface_bsdf_out $tmp276 $tmp277 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:333
#     BSDF subsurface_mix_out = mix(diffuse_bsdf_out, selected_subsurface_bsdf_out, subsurface1);
	closure		$tmp278 $const51 geomprop_Nworld_out1 ___695_coat_affected_diffuse_color_out SR_test_grid_diffuse_roughness 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{333} %argrw{"wrrrr"}
	mul		___695_diffuse_bsdf_out $tmp278 SR_test_grid_base 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:334
#     BSDF sheen_layer_out = layer(sheen_bsdf_out, subsurface_mix_out);
	functioncall	$const50 583 	%line{334} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp279 $const9 SR_test_grid_subsurface 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp280 ___695_diffuse_bsdf_out $tmp279 	%argrw{"wrr"}
	mul		$tmp281 ___695_selected_subsurface_bsdf_out SR_test_grid_subsurface 	%argrw{"wrr"}
	add		___695_subsurface_mix_out $tmp280 $tmp281 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:335
#     BSDF transmission_mix_out = mix(sheen_layer_out, transmission_bsdf_out, transmission);
	closure		___695_sheen_layer_out $const52 ___695_sheen_bsdf_out ___695_subsurface_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{335} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:336
#     BSDF specular_layer_out = layer(specular_bsdf_out, transmission_mix_out);
	functioncall	$const50 589 	%line{336} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp282 $const9 SR_test_grid_transmission 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp283 ___695_sheen_layer_out $tmp282 	%argrw{"wrr"}
	mul		$tmp284 ___695_transmission_bsdf_out SR_test_grid_transmission 	%argrw{"wrr"}
	add		___695_transmission_mix_out $tmp283 $tmp284 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:337
#     BSDF metalness_mix_out = mix(specular_layer_out, metal_bsdf_out, metalness);
	closure		___695_specular_layer_out $const52 ___695_specular_bsdf_out ___695_transmission_mix_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{337} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:338
#     BSDF thin_film_layer_attenuated_out = (coat_attenuation_out * metalness_mix_out);
	functioncall	$const50 595 	%line{338} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp285 $const9 SR_test_grid_metalness 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp286 ___695_specular_layer_out $tmp285 	%argrw{"wrr"}
	mul		$tmp287 ___695_metal_bsdf_out SR_test_grid_metalness 	%argrw{"wrr"}
	add		___695_metalness_mix_out $tmp286 $tmp287 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:339
#     BSDF coat_layer_out = layer(coat_bsdf_out, thin_film_layer_attenuated_out);
	mul		___695_thin_film_layer_attenuated_out ___695_metalness_mix_out ___695_coat_attenuation_out 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{339} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:340
#     EDF emission_edf_out = uniform_edf(emission_weight_out);
	closure		___695_coat_layer_out $const52 ___695_coat_bsdf_out ___695_thin_film_layer_attenuated_out 	%line{340} %argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:341
#     EDF coat_tinted_emission_edf_out = (coat_color * emission_edf_out);
	closure		___695_emission_edf_out $const53 ___695_emission_weight_out 	%line{341} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:342
#     EDF coat_emission_edf_out = null_closure;
	mul		___695_coat_tinted_emission_edf_out ___695_emission_edf_out SR_test_grid_coat_color 	%line{342} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:343
#     mx_generalized_schlick_edf(emission_color0_out, color(0.000000, 0.000000, 0.000000), 5.000000, coat_tinted_emission_edf_out, coat_emission_edf_out);
	assign		___695_coat_emission_edf_out ___695_null_closure 	%line{343} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:344
#     EDF blended_coat_emission_edf_out = mix(emission_edf_out, coat_emission_edf_out, coat);
	functioncall	$const55 612 	%line{344} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:237
#     color f = mx_fresnel_schlick(NdotV, color0, color90, exponent);
	neg		$tmp290 I 	%line{237} %argrw{"wr"}
	dot		$tmp289 N $tmp290 	%argrw{"wrr"}
	fabs		___693_NdotV $tmp289 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:238
#     result = base * f;
	functioncall	$const56 611 	%line{238} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:231
#     return mix(f0, f90, pow(x, exponent));
	sub		$tmp291 $const9 ___693_NdotV 	%line{231} %argrw{"wrr"}
	functioncall	$const22 609 	%argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp292 $tmp291 $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___692_x $tmp292 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:232
# }
	pow		$tmp293 ___692_x $const54 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{232} %argrw{"wrr"}
	mix		___693_f ___695_emission_color0_out $const6 $tmp293 	%argrw{"wrrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:239
# }
	mul		___695_coat_emission_edf_out ___695_coat_tinted_emission_edf_out ___693_f 	%line{239} %argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:345
#     surfaceshader shader_constructor_out = surfaceshader(null_closure, null_closure, 1.0);
	functioncall	$const50 617 	%line{345} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp294 $const9 SR_test_grid_coat 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp295 ___695_emission_edf_out $tmp294 	%argrw{"wrr"}
	mul		$tmp296 ___695_coat_emission_edf_out SR_test_grid_coat 	%argrw{"wrr"}
	add		___695_blended_coat_emission_edf_out $tmp295 $tmp296 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:346
#     mx_surface(coat_layer_out, blended_coat_emission_edf_out, opacity_luminance_float_out, 0, shader_constructor_out);
	assign		___695_shader_constructor_out.bsdf ___695_null_closure 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{346} %argrw{"wr"}
	assign		___695_shader_constructor_out.edf ___695_null_closure 	%argrw{"wr"}
	assign		___695_shader_constructor_out.opacity $const9 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:347
#     out = shader_constructor_out;
	functioncall	$const57 627 	%line{347} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:244
#     result.edf     = edf;
	assign		___695_shader_constructor_out.bsdf ___695_coat_layer_out 	%line{244} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:245
#     result.opacity = clamp(opacity, 0.0, 1.0);
	assign		___695_shader_constructor_out.edf ___695_blended_coat_emission_edf_out 	%line{245} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:246
# }
	functioncall	$const22 626 	%line{246} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp297 ___695_opacity_luminance_float_out $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___695_shader_constructor_out.opacity $tmp297 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:246
# }
	assign		___695_shader_constructor_out.opacity ___695_shader_constructor_out.opacity 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{246} %argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:348
# }
	assign		SR_test_grid_out.bsdf ___695_shader_constructor_out.bsdf 	%line{348} %argrw{"wr"}
	assign		SR_test_grid_out.edf ___695_shader_constructor_out.edf 	%argrw{"wr"}
	assign		SR_test_grid_out.opacity ___695_shader_constructor_out.opacity 	%argrw{"wr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:756
#     out = test_grid_out;
	functioncall	$const58 640 	%line{756} %argrw{"r"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:353
#     return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
	functioncall	$const22 634 	%line{353} %argrw{"r"}
# D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp298 SR_test_grid_out.opacity $const9 	%filename{"D:\\\\Work\\\\materialx\\\\OSL_ILM/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___696_opacity_weight $tmp298 $const5 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:354
# }
	add		$tmp299 SR_test_grid_out.bsdf SR_test_grid_out.edf 	%filename{"D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl"} %line{354} %argrw{"wrr"}
	mul		$tmp300 $tmp299 ___696_opacity_weight 	%argrw{"wrr"}
	closure		$tmp301 $const59 	%argrw{"wr"}
	sub		$tmp302 $const9 ___696_opacity_weight 	%argrw{"wrr"}
	mul		$tmp303 $tmp301 $tmp302 	%argrw{"wrr"}
	add		test_grid_out $tmp300 $tmp303 	%argrw{"wrr"}
# D:\\Work\\materialx\\bernard_MaterialX_3\\build\\bin\\resources\\Materials\\TestSuite\\stdlib\\procedural\\linepattern\\test_grid.osl:757
# }
	assign		out test_grid_out 	%line{757} %argrw{"wr"}
	end
