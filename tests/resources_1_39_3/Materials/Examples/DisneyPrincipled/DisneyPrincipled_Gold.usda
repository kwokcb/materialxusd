#usda 1.0
(
    customLayerData = {
        string colorSpace = "lin_rec709"
    }
    defaultPrim = "TestScene"
    doc = "Combined content from: ./resources_1_39_3/Materials/Examples\\DisneyPrincipled\\disney_principled_gold_converted.mtlx, D:\\Work\\materialx\\materialxusd\\tests\\data\\sphere.usd, D:\\Work\\materialx\\materialxusd\\tests\\data\\san_giuseppe_bridge.hdr."
    metersPerUnit = 1
    upAxis = "Y"
)

def "MaterialX"
{
    def "Materials"
    {
        def Material "DisneyPrincipled_Gold" (
            prepend apiSchemas = ["MaterialXConfigAPI"]
        )
        {
            string config:mtlx:version = "1.39"
            float inputs:anisotropic
            color3f inputs:baseColor = (0.944, 0.776, 0.373)
            float inputs:clearcoat
            float inputs:clearcoatGloss
            float inputs:ior
            float inputs:metallic = 1
            float inputs:roughness = 0.02
            float inputs:sheen
            float inputs:sheenTint
            float inputs:specTrans
            float inputs:specular
            float inputs:specularTint
            float inputs:subsurface
            color3f inputs:subsurfaceDistance
            token outputs:mtlx:surface.connect = </MaterialX/Materials/DisneyPrincipled_Gold/SR_gold.outputs:surface>

            def Shader "SR_gold" (
                prepend references = </MaterialX/Shaders/SR_gold>
            )
            {
                float inputs:anisotropic.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:anisotropic>
                color3f inputs:baseColor.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:baseColor>
                float inputs:clearcoat.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:clearcoat>
                float inputs:clearcoatGloss.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:clearcoatGloss>
                float inputs:ior.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:ior>
                float inputs:metallic.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:metallic>
                float inputs:roughness.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:roughness>
                float inputs:sheen.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:sheen>
                float inputs:sheenTint.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:sheenTint>
                float inputs:specTrans.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:specTrans>
                float inputs:specular.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:specular>
                float inputs:specularTint.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:specularTint>
                float inputs:subsurface.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:subsurface>
                color3f inputs:subsurfaceDistance.connect = </MaterialX/Materials/DisneyPrincipled_Gold.inputs:subsurfaceDistance>
            }
        }
    }

    def "Shaders"
    {
        def Shader "SR_gold"
        {
            uniform token info:id = "ND_disney_principled"
            token outputs:surface
        }
    }
}

def Xform "TestScene"
{
    def Xform "Geometry" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @D:\Work\materialx\materialxusd\tests\data\sphere.usd@
    )
    {
        rel material:binding = </MaterialX/Materials/DisneyPrincipled_Gold>
    }

    def Xform "Lights"
    {
        float3 xformOp:scale = (1.3, 1.3, 1.3)
        uniform token[] xformOpOrder = ["xformOp:scale"]

        def DomeLight "EnvironmentLight"
        {
            float guideRadius = 1
            float inputs:intensity = 1
            asset inputs:texture:file = @D:\Work\materialx\materialxusd\tests\data\san_giuseppe_bridge.hdr@
            float3 xformOp:rotateXYZ = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        }
    }

    def Xform "Camera" (
        prepend references = @D:\Work\materialx\materialxusd\tests\data\camera_sphere.usda@
    )
    {
    }
}

