#usda 1.0
(
    doc = """Generated from Composed Stage of root layer 
"""
    endTimeCode = 221
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 221
    timeCodesPerSecond = 24
    upAxis = "Y"
    renderSettingsPrimPath = "/Render/rendersettings"
)

def Cube "cube1"
{
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    double size = 2
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "cameras"
{
    def Camera "camera1" (
        apiSchemas = ["HoudiniViewportGuideAPI", "HoudiniCameraPlateAPI"]
    )
    {
        float2 clippingRange = (0.023601089, 23601.088)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.366
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        uniform bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.366
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (0.6743720382053003, -8.25983809127351e-9, -0.7383917348446073, 0), (-0.27918799491269564, 0.9257636062079245, -0.2549819776327879, 0), (0.683576197349979, 0.37810282387321414, 0.6243090877086795, 0), (5.419656224684051, 3.003805374967365, 5.088231741682515, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{
    def RenderSettings "rendersettings"
    {
        uniform token aspectRatioConformPolicy = "adjustApertureWidth"
        rel camera = </cameras/camera1>
        uniform float4 dataWindowNDC = (0, 0, 1, 1)
        uniform bool disableMotionBlur = 0
        uniform token[] includedPurposes = ["default"]
        uniform token[] materialBindingPurposes = ["full", "allPurpose"]
        uniform float pixelAspectRatio = 1
        rel products
        uniform int2 resolution = (512, 512)
        custom string ri:lpe:diffuse2 = "Diffuse,HairDiffuse,diffuse,translucent,hair4,irradiance"
        custom string ri:lpe:diffuse3 = "Subsurface,subsurface"
        custom string ri:lpe:specular2 = "Specular,HairSpecularR,specular,hair1"
        custom string ri:lpe:specular3 = "RoughSpecular,HairSpecularTRT,hair3"
        custom string ri:lpe:specular4 = "Clearcoat"
        custom string ri:lpe:specular5 = "Iridescence"
        custom string ri:lpe:specular6 = "Fuzz,HairSpecularGLINTS"
        custom string ri:lpe:specular7 = "SingleScatter,HairSpecularTT,hair2"
        custom string ri:lpe:specular8 = "Glass,specular"
        custom string ri:lpe:user2 = "Albedo,DiffuseAlbedo,SubsurfaceAlbedo,HairAlbedo"
        custom string ri:lpe:user3 = "Position"
        custom string ri:lpe:user4 = "UserColor"
        custom string ri:lpe:user6 = "Normal,DiffuseNormal,HairTangent,SubsurfaceNormal,SpecularNormal,RoughSpecularNormal,SingleScatterNormal,FuzzNormal,IridescenceNormal,GlassNormal"
        token ri:Ri:PixelFilterName = "gaussian"
        float2 ri:Ri:PixelFilterWidth = (20, 20)
        custom bool vray:ipr:SettingsOptions_geom_export_proxy = 1
        custom bool vray:ipr:SettingsOptions_geom_export_proxy_mesh = 1
        custom float vray:SettingsImageSampler_filter_size = 20
        custom int vray:SettingsImageSampler_filter_type = 7
        custom string vray:vfb:settings_file_name = "untitled"
        custom int vray:vfb:show_vfb = 0
    }
}

